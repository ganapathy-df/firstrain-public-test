/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:15:50 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.any;
import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertNull;

import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.ExcelProcessingHelperRepository;
import com.firstrain.frapi.service.EntityBaseService;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.DateCount;
import com.firstrain.solr.client.SearchResult;
import com.firstrain.solr.client.SolrSearcher;
import com.firstrain.web.pojo.SearchResultWeb;
import it.unimi.dsi.fastutil.longs.LongArrayList;
import java.util.Map;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class EntityBreifCustomServiceImplESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		EntityBreifCustomServiceImpl entityBreifCustomServiceImpl0 = new EntityBreifCustomServiceImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"convertUtil", convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseService0)
				.getWebResultsForSearch(anyString(), anyString(),
						any(com.firstrain.frapi.domain.BaseSpec.class),
						any(com.firstrain.frapi.domain.BlendDunsInput.class));
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(excelProcessingHelperRepository0).getPaltinumSourceVsRank();
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository1);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		Injector
				.validateBean(entityBreifCustomServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class);
		Injector.executePostConstruct(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class);
		DateCount dateCount0 = new DateCount();
		LongArrayList longArrayList0 = dateCount0.getCounts();
		SearchResultWeb searchResultWeb0 = entityBreifCustomServiceImpl0
				.getWebResultsForCatId(longArrayList0, longArrayList0.DEFAULT_INITIAL_CAPACITY,
						longArrayList0.DEFAULT_INITIAL_CAPACITY,
						longArrayList0.DEFAULT_INITIAL_CAPACITY);
		assertNull(searchResultWeb0.getPrimaryRegion());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test1() throws Exception {
		EntityBreifCustomServiceImpl entityBreifCustomServiceImpl0 = new EntityBreifCustomServiceImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"convertUtil", convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(excelProcessingHelperRepository0).getPaltinumSourceVsRank();
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository1);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		Injector
				.validateBean(entityBreifCustomServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class);
		Injector.executePostConstruct(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class);
		Long long0 = 0L;
		DateCount dateCount0 = new DateCount();
		LongArrayList longArrayList0 = dateCount0.getCounts();
		entityBreifCustomServiceImpl0
				.getWebResults(long0, longArrayList0, 16, 16, 16, false);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test2() throws Exception {
		EntityBreifCustomServiceImpl entityBreifCustomServiceImpl0 = new EntityBreifCustomServiceImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"convertUtil", convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"entityBaseService", entityBaseService0);
		SolrSearcher solrSearcher0 = mock(SolrSearcher.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(solrSearcher0)
				.search(any(com.firstrain.solr.client.SearchSpec.class));
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(solrSearcher0).when(entityBaseServiceRepository0).getSearcher();
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(excelProcessingHelperRepository0).getPaltinumSourceVsRank();
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository1);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		Injector
				.validateBean(entityBreifCustomServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class);
		Injector.executePostConstruct(entityBreifCustomServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl.class);
		DateCount dateCount0 = new DateCount((-1L), (-1L), (-1L));
		LongArrayList longArrayList0 = dateCount0.getCounts();
		entityBreifCustomServiceImpl0
				.getCoMentionCompanies(longArrayList0, 16, 16, 16);
	}
}
