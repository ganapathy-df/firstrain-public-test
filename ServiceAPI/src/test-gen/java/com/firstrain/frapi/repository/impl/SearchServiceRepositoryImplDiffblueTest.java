package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.config.ServiceConfig;
import com.firstrain.frapi.domain.BaseSpec;
import com.firstrain.solr.client.SearchResult;
import com.firstrain.solr.client.SearchSpec;
import com.firstrain.solr.client.SolrSearcher;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class SearchServiceRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: SearchServiceRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrSearcher.class,
    BaseSpec.class,
    SearchSpec.class,
    SearchServiceRepositoryImpl.class
  })
  @Test
  public void getMultiSectionSearchResultsInputNullNullNotNullNotNullOutputNull() throws Exception {

    // Arrange
    final SearchServiceRepositoryImpl objectUnderTest = new SearchServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    Reflector.setField(objectUnderTest, "searcher", solrSearcher);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    serviceConfig.setSecSolrServer(null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    serviceConfig.setEntitySolrServer(null);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final String fq = "!!!!!!!!";
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    PowerMockito.doReturn((short) 0).when(baseSpec, getStartMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn(" ").doReturn(" ").doReturn(null))
        .when(baseSpec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(baseSpec, getCountMethod).withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(baseSpec, getDaysCountMethod).withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setDaysMethod = DTUMemberMatcher.method(SearchSpec.class, "setDays", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setDaysMethod).withArguments(anyInt());
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setStartMethod = DTUMemberMatcher.method(SearchSpec.class, "setStart", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setStartMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "q", null);
    Reflector.setField(searchSpec, "needHotListIndustry", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "q", null);
    Reflector.setField(searchSpec1, "needHotListIndustry", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);

    // Act
    final SearchResult retval =
        objectUnderTest.getMultiSectionSearchResults(qMulti, scopeMulti, fq, baseSpec);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrSearcher.class,
    BaseSpec.class,
    SearchSpec.class,
    SearchServiceRepositoryImpl.class
  })
  @Test
  public void getMultiSectionSearchResultsInputNullNullNullNotNullOutputNull() throws Exception {

    // Arrange
    final SearchServiceRepositoryImpl objectUnderTest = new SearchServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    Reflector.setField(objectUnderTest, "searcher", solrSearcher);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    serviceConfig.setSecSolrServer(null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    serviceConfig.setEntitySolrServer(null);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final String fq = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    PowerMockito.doReturn((short) 0).when(baseSpec, getStartMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn(" ").doReturn(" ").doReturn(null))
        .when(baseSpec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(baseSpec, getCountMethod).withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(baseSpec, getDaysCountMethod).withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setDaysMethod = DTUMemberMatcher.method(SearchSpec.class, "setDays", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setDaysMethod).withArguments(anyInt());
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setStartMethod = DTUMemberMatcher.method(SearchSpec.class, "setStart", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setStartMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "q", null);
    Reflector.setField(searchSpec, "needHotListIndustry", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "q", null);
    Reflector.setField(searchSpec1, "needHotListIndustry", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);

    // Act
    final SearchResult retval =
        objectUnderTest.getMultiSectionSearchResults(qMulti, scopeMulti, fq, baseSpec);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrSearcher.class,
    BaseSpec.class,
    SearchSpec.class,
    SearchServiceRepositoryImpl.class
  })
  @Test
  public void getMultiSectionSearchResultsInputNullNullNullNotNullOutputNull2() throws Exception {

    // Arrange
    final SearchServiceRepositoryImpl objectUnderTest = new SearchServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    Reflector.setField(objectUnderTest, "searcher", solrSearcher);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    serviceConfig.setSecSolrServer(null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    serviceConfig.setEntitySolrServer(null);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final String fq = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    PowerMockito.doReturn((short) 0).when(baseSpec, getStartMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    PowerMockito.doReturn(null).when(baseSpec, getExcludeArticleIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(baseSpec, getCountMethod).withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(baseSpec, getDaysCountMethod).withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setStartMethod = DTUMemberMatcher.method(SearchSpec.class, "setStart", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setStartMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setDaysMethod = DTUMemberMatcher.method(SearchSpec.class, "setDays", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setDaysMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "q", null);
    Reflector.setField(searchSpec, "needHotListIndustry", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "q", null);
    Reflector.setField(searchSpec1, "needHotListIndustry", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);

    // Act
    final SearchResult retval =
        objectUnderTest.getMultiSectionSearchResults(qMulti, scopeMulti, fq, baseSpec);

    // Assert
    assertNull(retval);
  }
}
