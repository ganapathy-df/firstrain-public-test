package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.ManagementChange;
import com.firstrain.frapi.obj.MgmtTurnoverServiceSpec;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.SolrSearcher;
import com.firstrain.solr.client.util.SolrServerReader;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class CompanyServiceRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: CompanyServiceRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void constructorOutputVoid() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act, creating object to test constructor
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getCompanyDetailsFromCompanyIdsInputNotNullZeroOutputNull() throws Exception {

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String compIds = "";
    final int count = 0;

    // Act
    final SolrDocumentList retval = objectUnderTest.getCompanyDetailsFromCompanyIds(compIds, count);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(SolrServerReader.class)
  @Test
  public void getCompanyDetailsFromCompanyIdsInputNotNullZeroOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String compIds = "!!";
    final int count = 0;
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));

    // Act
    final SolrDocumentList retval = objectUnderTest.getCompanyDetailsFromCompanyIds(compIds, count);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(SolrServerReader.class)
  @Test
  public void getCompanySolrDocsForQueryInputNotNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String q = "!";
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));

    // Act
    final SolrDocumentList retval = objectUnderTest.getCompanySolrDocsForQuery(q);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getCompanySolrDocsForQueryInputNotNullOutputNull2() throws Exception {

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String q = "";

    // Act
    final SolrDocumentList retval = objectUnderTest.getCompanySolrDocsForQuery(q);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(SolrServerReader.class)
  @Test
  public void getCompetitorCatIdsFromSolrInputPositiveOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final int companyId = 1;
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));

    // Act
    final List<String> retval = objectUnderTest.getCompetitorCatIdsFromSolr(companyId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({SolrServerReader.class, SolrDocumentList.class})
  @Test
  public void getCompetitorCatIdsFromSolrInputPositiveOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final int companyId = 1;
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method isEmptyMethod = DTUMemberMatcher.method(SolrDocumentList.class, "isEmpty");
    PowerMockito.doReturn(true).when(solrDocumentList, isEmptyMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));

    // Act
    final List<String> retval = objectUnderTest.getCompetitorCatIdsFromSolr(companyId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({SolrDocument.class, SolrServerReader.class, SolrDocumentList.class})
  @Test
  public void getCompetitorCatIdsFromSolrInputPositiveOutputNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final int companyId = 1;
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final SolrDocument solrDocument = PowerMockito.mock(SolrDocument.class);
    final Method getFieldValuesMethod =
        DTUMemberMatcher.method(SolrDocument.class, "getFieldValues", String.class);
    PowerMockito.doReturn(null)
        .when(solrDocument, getFieldValuesMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method getMethod = DTUMemberMatcher.method(SolrDocumentList.class, "get", int.class);
    PowerMockito.doReturn(solrDocument).when(solrDocumentList, getMethod).withArguments(anyInt());
    final Method isEmptyMethod = DTUMemberMatcher.method(SolrDocumentList.class, "isEmpty");
    PowerMockito.doReturn(false).when(solrDocumentList, isEmptyMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));

    // Act
    final List<String> retval = objectUnderTest.getCompetitorCatIdsFromSolr(companyId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({SolrServerReader.class, SolrDocumentList.class, Logger.class})
  @Test
  public void getMatchedCompanyForQInputNotNullOutput0() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest =
        (CompanyServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(objectUnderTest, "searcher", solrSearcher);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        logger1);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final String q = "        ";
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method isEmptyMethod = DTUMemberMatcher.method(SolrDocumentList.class, "isEmpty");
    PowerMockito.doReturn(true).when(solrDocumentList, isEmptyMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));

    // Act
    final List<Entity> retval = objectUnderTest.getMatchedCompanyForQ(q);

    // Assert
    final ArrayList<Entity> arrayList = new ArrayList<Entity>();
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({SolrServerReader.class, Logger.class})
  @Test
  public void getMatchedCompanyForQInputNotNullOutput02() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest =
        (CompanyServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(objectUnderTest, "searcher", solrSearcher);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        logger1);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final String q = "        ";
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));

    // Act
    final List<Entity> retval = objectUnderTest.getMatchedCompanyForQ(q);

    // Assert
    final ArrayList<Entity> arrayList = new ArrayList<Entity>();
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getMatchedCompanyForQInputNotNullOutputNull() throws Exception {

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(objectUnderTest, "searcher", solrSearcher);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final String q = "";

    // Act
    final List<Entity> retval = objectUnderTest.getMatchedCompanyForQ(q);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getMgmtTurnoverDetailsInputNullNotNullOutputNull() throws Exception {

    // Arrange
    final CompanyServiceRepositoryImpl objectUnderTest = new CompanyServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "BASE_YEAR", (short) 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "entitySolrServer", solrServer);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final List<Integer> companyIDs = null;
    final MgmtTurnoverServiceSpec spec =
        (MgmtTurnoverServiceSpec)
            Reflector.getInstance("com.firstrain.frapi.obj.MgmtTurnoverServiceSpec");
    spec.setLhs(false);
    Reflector.setField(spec, "start", 0);
    spec.monthlyCountForMonth = 0;
    spec.setDetails(false);
    spec.setDays(0);
    Reflector.setField(spec, "rows", 0);
    spec.eventTypes = null;
    spec.setChangeLevels(null);
    spec.setLastDay(null);
    spec.setChangeTypes(null);
    spec.setQuarterlyCount(false);
    spec.setTotal(0L);
    spec.setMonthlyCount(false);

    // Act
    final List<ManagementChange> retval = objectUnderTest.getMgmtTurnoverDetails(companyIDs, spec);

    // Assert
    assertNull(retval);
  }
}
