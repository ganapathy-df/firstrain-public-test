package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.BaseSpec;
import com.firstrain.frapi.domain.BlendDunsInput;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.ExcelProcessingHelperRepository;
import com.firstrain.frapi.service.EntityBaseService;
import com.firstrain.obj.IEntityInfo;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.DocEntry;
import com.firstrain.solr.client.EntityEntry;
import com.firstrain.solr.client.HotListBucket;
import com.firstrain.solr.client.SearchResult;
import com.firstrain.solr.client.SearchSpec;
import com.firstrain.solr.client.SolrSearcher;
import com.firstrain.utils.FR_ArrayUtils;
import com.firstrain.web.pojo.SearchResultWeb;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections.CollectionUtils;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class EntityBreifCustomServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EntityBreifCustomServiceImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void access$000InputNotNullOutputNull() throws Exception {

    // Arrange
    final EntityBreifCustomServiceImpl x0 = new EntityBreifCustomServiceImpl();
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "roleslistStr", null);
    Reflector.setField(x0, "excelProcesingHelperRepository", null);
    Reflector.setField(x0, "compareOnRecency", null);
    Reflector.setField(x0, "paltinumSourceVsRank", null);
    Reflector.setField(x0, "compareAdvance", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    Reflector.setField(x0, "quoteOTRRelevanceThreshold", 0);
    Reflector.setField(x0, "dsutil", null);
    Reflector.setField(x0, "convertUtil", null);
    Reflector.setField(x0, "rolesList", null);
    Reflector.setField(x0, "stopwordsFile", null);
    Reflector.setField(x0, "entityBaseService", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$000",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl"));
    methodUnderTest.setAccessible(true);
    final Map retval = (Map) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({DocEntry.class, CollectionUtils.class})
  @Test
  public void compareInputNotNullNotNullOutputNegative() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(CollectionUtils.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    final DocEntry o1 = PowerMockito.mock(DocEntry.class);
    final Method getOtrQuotesMethod = DTUMemberMatcher.method(DocEntry.class, "getOtrQuotes");
    PowerMockito.doReturn(null).when(o1, getOtrQuotesMethod).withNoArguments();
    Reflector.setField(o1, "matchedTopics", null);
    Reflector.setField(o1, "docScore", 0);
    Reflector.setField(o1, "summary", null);
    Reflector.setField(o1, "catEntries", null);
    Reflector.setField(o1, "insertTime", null);
    Reflector.setField(o1, "matchedOthers", null);
    Reflector.setField(o1, "title", "");
    Reflector.setField(o1, "sitedocId", null);
    Reflector.setField(o1, "sourceEntity", null);
    Reflector.setField(o1, "groupId", 0L);
    Reflector.setField(o1, "matchedCompanies", null);
    Reflector.setField(o1, "bodyLength", 0);
    final DocEntry o2 = PowerMockito.mock(DocEntry.class);
    final Method getOtrQuotesMethod1 = DTUMemberMatcher.method(DocEntry.class, "getOtrQuotes");
    PowerMockito.doReturn(null).when(o2, getOtrQuotesMethod1).withNoArguments();
    Reflector.setField(o2, "matchedTopics", null);
    Reflector.setField(o2, "docScore", 0);
    Reflector.setField(o2, "summary", null);
    Reflector.setField(o2, "catEntries", null);
    Reflector.setField(o2, "insertTime", null);
    Reflector.setField(o2, "matchedOthers", null);
    Reflector.setField(o2, "title", null);
    Reflector.setField(o2, "sitedocId", null);
    Reflector.setField(o2, "sourceEntity", null);
    Reflector.setField(o2, "groupId", 0L);
    Reflector.setField(o2, "matchedCompanies", null);
    Reflector.setField(o2, "bodyLength", 0);
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(CollectionUtils.class, "isNotEmpty", Collection.class);
    ((PowerMockitoStubber)
            PowerMockito.doReturn(true).doReturn(true).doReturn(false).doReturn(true))
        .when(CollectionUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.solr.client.DocEntry"),
            Reflector.forName("com.firstrain.solr.client.DocEntry"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({DocEntry.class, CollectionUtils.class})
  @Test
  public void compareInputNotNullNotNullOutputPositive() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(CollectionUtils.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    final DocEntry o1 = PowerMockito.mock(DocEntry.class);
    final Method getOtrQuotesMethod = DTUMemberMatcher.method(DocEntry.class, "getOtrQuotes");
    PowerMockito.doReturn(null).when(o1, getOtrQuotesMethod).withNoArguments();
    Reflector.setField(o1, "matchedTopics", null);
    Reflector.setField(o1, "docScore", 0);
    Reflector.setField(o1, "summary", null);
    Reflector.setField(o1, "catEntries", null);
    Reflector.setField(o1, "insertTime", null);
    Reflector.setField(o1, "matchedOthers", null);
    Reflector.setField(o1, "title", "");
    Reflector.setField(o1, "sitedocId", null);
    Reflector.setField(o1, "sourceEntity", null);
    Reflector.setField(o1, "groupId", 0L);
    Reflector.setField(o1, "matchedCompanies", null);
    Reflector.setField(o1, "bodyLength", 0);
    final DocEntry o2 = PowerMockito.mock(DocEntry.class);
    final Method getOtrQuotesMethod1 = DTUMemberMatcher.method(DocEntry.class, "getOtrQuotes");
    PowerMockito.doReturn(null).when(o2, getOtrQuotesMethod1).withNoArguments();
    Reflector.setField(o2, "matchedTopics", null);
    Reflector.setField(o2, "docScore", 0);
    Reflector.setField(o2, "summary", null);
    Reflector.setField(o2, "catEntries", null);
    Reflector.setField(o2, "insertTime", null);
    Reflector.setField(o2, "matchedOthers", null);
    Reflector.setField(o2, "title", null);
    Reflector.setField(o2, "sitedocId", null);
    Reflector.setField(o2, "sourceEntity", null);
    Reflector.setField(o2, "groupId", 0L);
    Reflector.setField(o2, "matchedCompanies", null);
    Reflector.setField(o2, "bodyLength", 0);
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(CollectionUtils.class, "isNotEmpty", Collection.class);
    ((PowerMockitoStubber)
            PowerMockito.doReturn(true).doReturn(false).doReturn(false).doReturn(false))
        .when(CollectionUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.solr.client.DocEntry"),
            Reflector.forName("com.firstrain.solr.client.DocEntry"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Date.class)
  @Test
  public void compareInputNotNullNotNullOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$1");
    Reflector.setField(objectUnderTest, "this$0", null);
    final DocEntry o1 = (DocEntry) Reflector.getInstance("com.firstrain.solr.client.DocEntry");
    Reflector.setField(o1, "catEntries", null);
    final Date date = PowerMockito.mock(Date.class);
    PowerMockito.when(date.compareTo(or(isA(Date.class), isNull(Date.class)))).thenReturn(0);
    Reflector.setField(date, "fastTime", 0L);
    Reflector.setField(o1, "insertTime", date);
    Reflector.setField(o1, "title", null);
    Reflector.setField(o1, "matchedOthers", null);
    Reflector.setField(o1, "matchedTopics", null);
    Reflector.setField(o1, "docScore", 0);
    Reflector.setField(o1, "summary", null);
    Reflector.setField(o1, "sitedocId", null);
    Reflector.setField(o1, "groupId", 0L);
    Reflector.setField(o1, "sourceEntity", null);
    Reflector.setField(o1, "matchedCompanies", null);
    Reflector.setField(o1, "bodyLength", 0);
    final DocEntry o2 = (DocEntry) Reflector.getInstance("com.firstrain.solr.client.DocEntry");
    Reflector.setField(o2, "catEntries", null);
    final Date date1 = PowerMockito.mock(Date.class);
    Reflector.setField(date1, "fastTime", 0L);
    Reflector.setField(o2, "insertTime", date1);
    Reflector.setField(o2, "title", null);
    Reflector.setField(o2, "matchedOthers", null);
    Reflector.setField(o2, "matchedTopics", null);
    Reflector.setField(o2, "docScore", 0);
    Reflector.setField(o2, "summary", null);
    Reflector.setField(o2, "sitedocId", null);
    Reflector.setField(o2, "groupId", 0L);
    Reflector.setField(o2, "sourceEntity", null);
    Reflector.setField(o2, "matchedCompanies", null);
    Reflector.setField(o2, "bodyLength", 0);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$1");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.solr.client.DocEntry"),
            Reflector.forName("com.firstrain.solr.client.DocEntry"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({DocEntry.class, CollectionUtils.class})
  @Test
  public void compareInputNotNullNotNullOutputZero2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(CollectionUtils.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    final DocEntry o1 = PowerMockito.mock(DocEntry.class);
    final Method getOtrQuotesMethod = DTUMemberMatcher.method(DocEntry.class, "getOtrQuotes");
    PowerMockito.doReturn(null).when(o1, getOtrQuotesMethod).withNoArguments();
    Reflector.setField(o1, "matchedTopics", null);
    Reflector.setField(o1, "docScore", 0);
    Reflector.setField(o1, "summary", null);
    Reflector.setField(o1, "catEntries", null);
    Reflector.setField(o1, "insertTime", null);
    Reflector.setField(o1, "matchedOthers", null);
    Reflector.setField(o1, "title", "");
    Reflector.setField(o1, "sitedocId", null);
    Reflector.setField(o1, "sourceEntity", null);
    Reflector.setField(o1, "groupId", 0L);
    Reflector.setField(o1, "matchedCompanies", null);
    Reflector.setField(o1, "bodyLength", 0);
    final DocEntry o2 = PowerMockito.mock(DocEntry.class);
    final Method getOtrQuotesMethod1 = DTUMemberMatcher.method(DocEntry.class, "getOtrQuotes");
    PowerMockito.doReturn(null).when(o2, getOtrQuotesMethod1).withNoArguments();
    Reflector.setField(o2, "matchedTopics", null);
    Reflector.setField(o2, "docScore", 0);
    Reflector.setField(o2, "summary", null);
    Reflector.setField(o2, "catEntries", null);
    Reflector.setField(o2, "insertTime", null);
    Reflector.setField(o2, "matchedOthers", null);
    Reflector.setField(o2, "title", null);
    Reflector.setField(o2, "sitedocId", null);
    Reflector.setField(o2, "sourceEntity", null);
    Reflector.setField(o2, "groupId", 0L);
    Reflector.setField(o2, "matchedCompanies", null);
    Reflector.setField(o2, "bodyLength", 0);
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(CollectionUtils.class, "isNotEmpty", Collection.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(true).doReturn(true).doReturn(true).doReturn(true))
        .when(CollectionUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.solr.client.DocEntry"),
            Reflector.forName("com.firstrain.solr.client.DocEntry"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void createQFromLongIdsInput0Null0Output0() throws Exception {

    // Arrange
    final EntityBreifCustomServiceImpl objectUnderTest = new EntityBreifCustomServiceImpl();
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "roleslistStr", null);
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "compareOnRecency", null);
    Reflector.setField(objectUnderTest, "paltinumSourceVsRank", null);
    Reflector.setField(objectUnderTest, "compareAdvance", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "quoteOTRRelevanceThreshold", 0);
    Reflector.setField(objectUnderTest, "dsutil", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "rolesList", null);
    Reflector.setField(objectUnderTest, "stopwordsFile", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    final ArrayList<Long> catIds = new ArrayList<Long>();
    final Integer scope = null;
    final ArrayList<Integer> scopeList = new ArrayList<Integer>();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "createQFromLongIds",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.Integer"),
            Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final List<String> retval =
        (List<String>) methodUnderTest.invoke(objectUnderTest, catIds, scope, scopeList);

    // Assert
    final ArrayList<String> arrayList = new ArrayList<String>();
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void createQFromLongIdsInput1Null0Output1() throws Exception {

    // Arrange
    final EntityBreifCustomServiceImpl objectUnderTest = new EntityBreifCustomServiceImpl();
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSearchToken");
    PowerMockito.doReturn(null).when(iEntityInfo, getSearchTokenMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "roleslistStr", null);
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "compareOnRecency", null);
    Reflector.setField(objectUnderTest, "paltinumSourceVsRank", null);
    Reflector.setField(objectUnderTest, "compareAdvance", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "quoteOTRRelevanceThreshold", 0);
    Reflector.setField(objectUnderTest, "dsutil", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "rolesList", null);
    Reflector.setField(objectUnderTest, "stopwordsFile", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    final ArrayList<Long> catIds = new ArrayList<Long>();
    catIds.add(0L);
    final Integer scope = null;
    final ArrayList<Integer> scopeList = new ArrayList<Integer>();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "createQFromLongIds",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.Integer"),
            Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final List<String> retval =
        (List<String>) methodUnderTest.invoke(objectUnderTest, catIds, scope, scopeList);

    // Assert
    final ArrayList<String> arrayList = new ArrayList<String>();
    arrayList.add(null);
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    IEntityInfoCache.class, SolrSearcher.class, EntityBreifCustomServiceImpl.class,
    SearchSpec.class, FR_ArrayUtils.class, IEntityInfo.class,
    EntityBaseServiceRepository.class
  })
  @Test
  public void getCoMentionCompaniesInput1ZeroZeroZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FR_ArrayUtils.class);

    // Arrange
    final EntityBreifCustomServiceImpl objectUnderTest = new EntityBreifCustomServiceImpl();
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final SearchResult searchResult =
        (SearchResult) Reflector.getInstance("com.firstrain.solr.client.SearchResult");
    Reflector.setField(searchResult, "buckets", null);
    Reflector.setField(searchResult, "facetCompanies", null);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(searchResult)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSearchToken");
    PowerMockito.doReturn(null).when(iEntityInfo, getSearchTokenMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "roleslistStr", null);
    final ExcelProcessingHelperRepository excelProcessingHelperRepository =
        (ExcelProcessingHelperRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.ExcelProcessingHelperRepository");
    Reflector.setField(
        objectUnderTest, "excelProcesingHelperRepository", excelProcessingHelperRepository);
    Reflector.setField(objectUnderTest, "compareOnRecency", null);
    final HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();
    Reflector.setField(objectUnderTest, "paltinumSourceVsRank", hashMap);
    Reflector.setField(objectUnderTest, "compareAdvance", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "quoteOTRRelevanceThreshold", 0);
    Reflector.setField(objectUnderTest, "dsutil", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "rolesList", null);
    Reflector.setField(objectUnderTest, "stopwordsFile", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    final ArrayList<Long> catIds = new ArrayList<Long>();
    catIds.add(null);
    final Integer scope = 0;
    final Integer count = 0;
    final Integer daysCount = 0;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final Method setStartMethod = DTUMemberMatcher.method(SearchSpec.class, "setStart", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setStartMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "needHotListTopic", false);
    Reflector.setField(searchSpec, "needHotListCompany", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "hiddenFq", null);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "needDocList", false);
    Reflector.setField(searchSpec, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec, "hotListRows", 0);
    Reflector.setField(searchSpec, "hotlistScope", 0);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "days", 0);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "needHotListTopic", false);
    Reflector.setField(searchSpec1, "needHotListCompany", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "hiddenFq", null);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "needDocList", false);
    Reflector.setField(searchSpec1, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec1, "hotListRows", 0);
    Reflector.setField(searchSpec1, "hotlistScope", 0);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "days", 0);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);
    final Method collectionToIntArrayMethod =
        DTUMemberMatcher.method(FR_ArrayUtils.class, "collectionToIntArray", Collection.class);
    PowerMockito.doReturn(null)
        .when(FR_ArrayUtils.class, collectionToIntArrayMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));
    final Method collectionToStringArrayMethod =
        DTUMemberMatcher.method(FR_ArrayUtils.class, "collectionToStringArray", Collection.class);
    PowerMockito.doReturn(null)
        .when(FR_ArrayUtils.class, collectionToStringArrayMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final HotListBucket retval =
        objectUnderTest.getCoMentionCompanies(catIds, scope, count, daysCount);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    SearchResultWeb.class,
    BaseSpec.class,
    EntityBreifCustomServiceImpl.class
  })
  @Test
  public void getWebResultsForCatIdInput0NullZeroZeroOutputNotNull() throws Exception {

    // Arrange
    final EntityBreifCustomServiceImpl objectUnderTest = new EntityBreifCustomServiceImpl();
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "roleslistStr", null);
    final ExcelProcessingHelperRepository excelProcessingHelperRepository =
        (ExcelProcessingHelperRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.ExcelProcessingHelperRepository");
    Reflector.setField(
        objectUnderTest, "excelProcesingHelperRepository", excelProcessingHelperRepository);
    Reflector.setField(objectUnderTest, "compareOnRecency", null);
    Reflector.setField(objectUnderTest, "paltinumSourceVsRank", null);
    Reflector.setField(objectUnderTest, "compareAdvance", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "quoteOTRRelevanceThreshold", 0);
    Reflector.setField(objectUnderTest, "dsutil", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "rolesList", null);
    Reflector.setField(objectUnderTest, "stopwordsFile", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getWebResultsForSearch(
                or(isA(String.class), isNull(String.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(BlendDunsInput.class), isNull(BlendDunsInput.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ArrayList<Long> secondaryCatIds = new ArrayList<Long>();
    final Integer scope = null;
    final Integer count = 0;
    final Integer daysCount = 0;
    final SearchResultWeb searchResultWeb = PowerMockito.mock(SearchResultWeb.class);
    PowerMockito.whenNew(SearchResultWeb.class).withNoArguments().thenReturn(searchResultWeb);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    PowerMockito.whenNew(BaseSpec.class).withNoArguments().thenReturn(baseSpec);

    // Act
    final SearchResultWeb retval =
        objectUnderTest.getWebResultsForCatId(secondaryCatIds, scope, count, daysCount);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EntityEntry.class)
  @Test
  public void platinumRankInputNotNullOutputNegative() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    final EntityBreifCustomServiceImpl entityBreifCustomServiceImpl =
        new EntityBreifCustomServiceImpl();
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(entityBreifCustomServiceImpl, "LOG", logger);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(
        entityBreifCustomServiceImpl, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(entityBreifCustomServiceImpl, "roleslistStr", null);
    Reflector.setField(entityBreifCustomServiceImpl, "excelProcesingHelperRepository", null);
    Reflector.setField(entityBreifCustomServiceImpl, "compareOnRecency", null);
    final HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();
    Reflector.setField(entityBreifCustomServiceImpl, "paltinumSourceVsRank", hashMap);
    Reflector.setField(entityBreifCustomServiceImpl, "compareAdvance", null);
    Reflector.setField(entityBreifCustomServiceImpl, "servicesAPIUtil", null);
    Reflector.setField(entityBreifCustomServiceImpl, "quoteOTRRelevanceThreshold", 0);
    Reflector.setField(entityBreifCustomServiceImpl, "dsutil", null);
    Reflector.setField(entityBreifCustomServiceImpl, "convertUtil", null);
    Reflector.setField(entityBreifCustomServiceImpl, "rolesList", null);
    Reflector.setField(entityBreifCustomServiceImpl, "stopwordsFile", null);
    Reflector.setField(entityBreifCustomServiceImpl, "entityBaseService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBreifCustomServiceImpl);
    final EntityEntry sourceEntity = PowerMockito.mock(EntityEntry.class);
    final Method getIdMethod = DTUMemberMatcher.method(EntityEntry.class, "getId");
    PowerMockito.doReturn("2").when(sourceEntity, getIdMethod).withNoArguments();
    Reflector.setField(sourceEntity, "id", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "platinumRank", Reflector.forName("com.firstrain.solr.client.EntityEntry"));
    methodUnderTest.setAccessible(true);
    final Integer retval = (Integer) methodUnderTest.invoke(objectUnderTest, sourceEntity);

    // Assert
    assertEquals(new Integer(-100), retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EntityEntry.class)
  @Test
  public void platinumRankInputNotNullOutputNegative2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    final EntityBreifCustomServiceImpl entityBreifCustomServiceImpl =
        new EntityBreifCustomServiceImpl();
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(entityBreifCustomServiceImpl, "LOG", logger);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(
        entityBreifCustomServiceImpl, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(entityBreifCustomServiceImpl, "roleslistStr", null);
    Reflector.setField(entityBreifCustomServiceImpl, "excelProcesingHelperRepository", null);
    Reflector.setField(entityBreifCustomServiceImpl, "compareOnRecency", null);
    final HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();
    hashMap.put(2, -100);
    Reflector.setField(entityBreifCustomServiceImpl, "paltinumSourceVsRank", hashMap);
    Reflector.setField(entityBreifCustomServiceImpl, "compareAdvance", null);
    Reflector.setField(entityBreifCustomServiceImpl, "servicesAPIUtil", null);
    Reflector.setField(entityBreifCustomServiceImpl, "quoteOTRRelevanceThreshold", 0);
    Reflector.setField(entityBreifCustomServiceImpl, "dsutil", null);
    Reflector.setField(entityBreifCustomServiceImpl, "convertUtil", null);
    Reflector.setField(entityBreifCustomServiceImpl, "rolesList", null);
    Reflector.setField(entityBreifCustomServiceImpl, "stopwordsFile", null);
    Reflector.setField(entityBreifCustomServiceImpl, "entityBaseService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBreifCustomServiceImpl);
    final EntityEntry sourceEntity = PowerMockito.mock(EntityEntry.class);
    final Method getIdMethod = DTUMemberMatcher.method(EntityEntry.class, "getId");
    PowerMockito.doReturn("2").when(sourceEntity, getIdMethod).withNoArguments();
    Reflector.setField(sourceEntity, "id", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBreifCustomServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "platinumRank", Reflector.forName("com.firstrain.solr.client.EntityEntry"));
    methodUnderTest.setAccessible(true);
    final Integer retval = (Integer) methodUnderTest.invoke(objectUnderTest, sourceEntity);

    // Assert
    assertEquals(new Integer(-100), retval);
  }
}
