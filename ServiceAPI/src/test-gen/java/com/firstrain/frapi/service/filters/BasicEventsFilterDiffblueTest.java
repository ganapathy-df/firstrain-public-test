package com.firstrain.frapi.service.filters;

import static org.junit.Assert.assertEquals;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.firstrain.frapi.events.IEvents;
import com.firstrain.frapi.service.EventSelector;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class BasicEventsFilterDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: BasicEventsFilter */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EventSelector.class)
  @Test
  public void isFilteredInputNullOutputFalse() throws Exception {

    // Arrange
    final BasicEventsFilter objectUnderTest =
        (BasicEventsFilter)
            Reflector.getInstance("com.firstrain.frapi.service.filters.BasicEventsFilter");
    final EventSelector eventSelector = PowerMockito.mock(EventSelector.class);
    PowerMockito.when(eventSelector.isSelected(or(isA(IEvents.class), isNull(IEvents.class))))
        .thenReturn(false);
    final EventSelector[] eventSelectorArray = {eventSelector};
    Reflector.setField(objectUnderTest, "selectors", eventSelectorArray);
    final IEvents e = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.filters.BasicEventsFilter");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "isFiltered", Reflector.forName("com.firstrain.frapi.events.IEvents"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(objectUnderTest, e);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EventSelector.class)
  @Test
  public void isFilteredInputNullOutputTrue() throws Exception {

    // Arrange
    final BasicEventsFilter objectUnderTest =
        (BasicEventsFilter)
            Reflector.getInstance("com.firstrain.frapi.service.filters.BasicEventsFilter");
    final EventSelector eventSelector = PowerMockito.mock(EventSelector.class);
    PowerMockito.when(eventSelector.isSelected(or(isA(IEvents.class), isNull(IEvents.class))))
        .thenReturn(true);
    final EventSelector[] eventSelectorArray = {eventSelector};
    Reflector.setField(objectUnderTest, "selectors", eventSelectorArray);
    final IEvents e = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.filters.BasicEventsFilter");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "isFiltered", Reflector.forName("com.firstrain.frapi.events.IEvents"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(objectUnderTest, e);

    // Assert
    assertEquals(true, retval);
  }
}
