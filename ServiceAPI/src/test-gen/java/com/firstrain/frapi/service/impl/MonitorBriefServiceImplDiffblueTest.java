package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.FRCompletionService;
import com.firstrain.frapi.domain.BaseSpec;
import com.firstrain.frapi.domain.SectionSpec;
import com.firstrain.frapi.domain.TwitterSpec;
import com.firstrain.frapi.domain.User;
import com.firstrain.frapi.domain.VisualizationData;
import com.firstrain.frapi.pojo.MonitorBriefDetail;
import com.firstrain.frapi.pojo.MonitorEmailAPIResponse;
import com.firstrain.frapi.pojo.wrapper.BaseSet;
import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import com.firstrain.frapi.pojo.wrapper.TweetSet;
import com.firstrain.frapi.repository.EmailServiceRepository;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.MonitorServiceRepository;
import com.firstrain.frapi.repository.UserServiceRepository;
import com.firstrain.frapi.service.EntityBaseService;
import com.firstrain.frapi.service.EntityProcessingService;
import com.firstrain.frapi.service.MonitorService;
import com.firstrain.frapi.service.RestrictContentService;
import com.firstrain.frapi.service.TwitterService;
import com.firstrain.frapi.service.VisualizationService;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.MonitorAnalyticsUtil;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.solr.client.SearchResult;
import com.firstrain.utils.object.PerfActivityType;
import com.firstrain.utils.object.PerfMonitor;
import com.firstrain.utils.object.PerfRequestEntry;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class MonitorBriefServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: MonitorBriefServiceImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocumentSet.class,
    EntityBaseService.class,
    MonitorBriefServiceImpl.class,
    Logger.class,
    ThreadPoolTaskExecutor.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void access$000InputNotNullNull0NotNullNotNullZeroPositiveOutputNotNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl x0 =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(x0, "restrictContentService", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "servicesAPIUtil", null);
    Reflector.setField(x0, "visualizationService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    x0.executorService = threadPoolTaskExecutor;
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "twitterService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "monitorAnalyticsUtil", null);
    Reflector.setField(x0, "monitorServiceRepository", null);
    Reflector.setField(x0, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getWebResults(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(x0, "entityBaseService", entityBaseService);
    final UserServiceRepository userServiceRepository =
        (UserServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.UserServiceRepository");
    Reflector.setField(x0, "userServiceRepository", userServiceRepository);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "emailServiceRepository", null);
    final String[] x1 = null;
    final int[] x2 = {};
    final BaseSpec x3 = PowerMockito.mock(BaseSpec.class);
    final Method getNeedPaginationMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedPagination");
    PowerMockito.doReturn(true).when(x3, getNeedPaginationMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn(null))
        .when(x3, getCountMethod)
        .withNoArguments();
    final BaseSpec x4 = PowerMockito.mock(BaseSpec.class);
    final long x5 = 0L;
    final long x6 = 5L;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$000",
            Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl"),
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("long"),
            Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(null, x0, x1, x2, x3, x4, x5, x6);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$100InputNotNullOutputNull() throws Exception {

    // Arrange
    final MonitorBriefServiceImpl x0 = new MonitorBriefServiceImpl();
    Reflector.setField(x0, "restrictContentService", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "servicesAPIUtil", null);
    Reflector.setField(x0, "visualizationService", null);
    x0.executorService = null;
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "twitterService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "monitorAnalyticsUtil", null);
    Reflector.setField(x0, "monitorServiceRepository", null);
    Reflector.setField(x0, "monitorService", null);
    Reflector.setField(x0, "entityBaseService", null);
    Reflector.setField(x0, "userServiceRepository", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "emailServiceRepository", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$100",
            Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl"));
    methodUnderTest.setAccessible(true);
    final VisualizationService retval = (VisualizationService) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$200InputNotNullOutputNull() throws Exception {

    // Arrange
    final MonitorBriefServiceImpl x0 = new MonitorBriefServiceImpl();
    Reflector.setField(x0, "restrictContentService", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "servicesAPIUtil", null);
    Reflector.setField(x0, "visualizationService", null);
    x0.executorService = null;
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "twitterService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "monitorAnalyticsUtil", null);
    Reflector.setField(x0, "monitorServiceRepository", null);
    Reflector.setField(x0, "monitorService", null);
    Reflector.setField(x0, "entityBaseService", null);
    Reflector.setField(x0, "userServiceRepository", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "emailServiceRepository", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$200",
            Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl"));
    methodUnderTest.setAccessible(true);
    final Logger retval = (Logger) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$300InputNotNullOutputNull() throws Exception {

    // Arrange
    final MonitorBriefServiceImpl x0 = new MonitorBriefServiceImpl();
    Reflector.setField(x0, "restrictContentService", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "servicesAPIUtil", null);
    Reflector.setField(x0, "visualizationService", null);
    x0.executorService = null;
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "twitterService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "monitorAnalyticsUtil", null);
    Reflector.setField(x0, "monitorServiceRepository", null);
    Reflector.setField(x0, "monitorService", null);
    Reflector.setField(x0, "entityBaseService", null);
    Reflector.setField(x0, "userServiceRepository", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "emailServiceRepository", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$300",
            Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl"));
    methodUnderTest.setAccessible(true);
    final EntityBaseService retval = (EntityBaseService) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    SectionSpec.class,
    TweetSet.class,
    PerfMonitor.class,
    MonitorBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void access$400InputNotNullNullZeroNotNullNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl x0 = new MonitorBriefServiceImpl();
    Reflector.setField(x0, "restrictContentService", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "servicesAPIUtil", null);
    Reflector.setField(x0, "visualizationService", null);
    x0.executorService = null;
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "twitterService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "monitorAnalyticsUtil", null);
    Reflector.setField(x0, "monitorServiceRepository", null);
    Reflector.setField(x0, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(null);
    Reflector.setField(x0, "entityBaseService", entityBaseService);
    Reflector.setField(x0, "userServiceRepository", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "emailServiceRepository", null);
    final String[] x1 = null;
    final long x2 = 0L;
    final SectionSpec x3 = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(x3, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(x3, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(x3, getNeedBucketMethod).withNoArguments();
    final String x4 = "";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$400",
            Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl"),
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("long"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval = (TweetSet) methodUnderTest.invoke(null, x0, x1, x2, x3, x4);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    DocumentSet.class,
    MonitorBriefServiceImpl.class,
    ThreadPoolTaskExecutor.class,
    Logger.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void callOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$1");
    final MonitorBriefServiceImpl monitorBriefServiceImpl =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(monitorBriefServiceImpl, "restrictContentService", null);
    monitorBriefServiceImpl.executorTimeout = 0L;
    Reflector.setField(monitorBriefServiceImpl, "servicesAPIUtil", null);
    Reflector.setField(monitorBriefServiceImpl, "visualizationService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    monitorBriefServiceImpl.executorService = threadPoolTaskExecutor;
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(monitorBriefServiceImpl, "LOG", logger);
    Reflector.setField(monitorBriefServiceImpl, "twitterService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(monitorBriefServiceImpl, "entityProcessingService", entityProcessingService);
    Reflector.setField(monitorBriefServiceImpl, "monitorAnalyticsUtil", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorServiceRepository", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getWebResults(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(monitorBriefServiceImpl, "entityBaseService", entityBaseService);
    Reflector.setField(monitorBriefServiceImpl, "userServiceRepository", null);
    monitorBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(monitorBriefServiceImpl, "emailServiceRepository", null);
    Reflector.setField(objectUnderTest, "this$0", monitorBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$folderId", 0L);
    Reflector.setField(objectUnderTest, "val$qMulti", null);
    Reflector.setField(objectUnderTest, "val$userId", 9L);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    Reflector.setField(objectUnderTest, "val$baseSpec180Days", baseSpec);
    final int[] intArray = {};
    Reflector.setField(objectUnderTest, "val$scopeMulti", intArray);
    final BaseSpec baseSpec1 = PowerMockito.mock(BaseSpec.class);
    final Method getNeedPaginationMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedPagination");
    PowerMockito.doReturn(false).when(baseSpec1, getNeedPaginationMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0).doReturn(null))
        .when(baseSpec1, getCountMethod)
        .withNoArguments();
    Reflector.setField(objectUnderTest, "val$baseSpec60Days", baseSpec1);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Logger logger1 = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger1)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$1");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final DocumentSet retval = (DocumentSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({VisualizationData.class, VisualizationService.class, PerfMonitor.class})
  @Test
  public void callOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$2");
    Reflector.setField(objectUnderTest, "val$nodeCount", 0);
    Reflector.setField(objectUnderTest, "val$isApplyMinNodeCheck", false);
    final MonitorBriefServiceImpl monitorBriefServiceImpl = new MonitorBriefServiceImpl();
    Reflector.setField(monitorBriefServiceImpl, "restrictContentService", null);
    monitorBriefServiceImpl.executorTimeout = 0L;
    Reflector.setField(monitorBriefServiceImpl, "servicesAPIUtil", null);
    final VisualizationService visualizationService = PowerMockito.mock(VisualizationService.class);
    final VisualizationData visualizationData = PowerMockito.mock(VisualizationData.class);
    PowerMockito.when(
            visualizationService.getVisualizationByMonitorId(
                anyLong(),
                anyInt(),
                or(isA(List.class), isNull(List.class)),
                or(isA(String.class), isNull(String.class)),
                anyBoolean(),
                anyBoolean()))
        .thenReturn(visualizationData);
    Reflector.setField(monitorBriefServiceImpl, "visualizationService", visualizationService);
    monitorBriefServiceImpl.executorService = null;
    Reflector.setField(monitorBriefServiceImpl, "LOG", null);
    Reflector.setField(monitorBriefServiceImpl, "twitterService", null);
    Reflector.setField(monitorBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorAnalyticsUtil", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorServiceRepository", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorService", null);
    Reflector.setField(monitorBriefServiceImpl, "entityBaseService", null);
    Reflector.setField(monitorBriefServiceImpl, "userServiceRepository", null);
    monitorBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(monitorBriefServiceImpl, "emailServiceRepository", null);
    Reflector.setField(objectUnderTest, "this$0", monitorBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$tagId", 3L);
    Reflector.setField(objectUnderTest, "val$chartTypes", null);
    Reflector.setField(objectUnderTest, "val$filters", null);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$2");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final VisualizationData retval = (VisualizationData) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class, TwitterSpec.class, TweetSet.class,
    MonitorBriefServiceImpl.class, PerfMonitor.class, SectionSpec.class
  })
  @Test
  public void callOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$4");
    Reflector.setField(objectUnderTest, "val$catIdsAll", null);
    Reflector.setField(objectUnderTest, "val$userId", 0L);
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(sectionSpec, getCountMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "val$sectionSpec", sectionSpec);
    final MonitorBriefServiceImpl monitorBriefServiceImpl = new MonitorBriefServiceImpl();
    Reflector.setField(monitorBriefServiceImpl, "restrictContentService", null);
    monitorBriefServiceImpl.executorTimeout = 0L;
    Reflector.setField(monitorBriefServiceImpl, "servicesAPIUtil", null);
    Reflector.setField(monitorBriefServiceImpl, "visualizationService", null);
    monitorBriefServiceImpl.executorService = null;
    Reflector.setField(monitorBriefServiceImpl, "LOG", null);
    Reflector.setField(monitorBriefServiceImpl, "twitterService", null);
    Reflector.setField(monitorBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorAnalyticsUtil", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorServiceRepository", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(null);
    Reflector.setField(monitorBriefServiceImpl, "entityBaseService", entityBaseService);
    Reflector.setField(monitorBriefServiceImpl, "userServiceRepository", null);
    monitorBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(monitorBriefServiceImpl, "emailServiceRepository", null);
    Reflector.setField(objectUnderTest, "this$0", monitorBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$excludeArticleIdsSSV", "");
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$4");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final TweetSet retval = (TweetSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$2"},
      value = {Logger.class, VisualizationData.class, PerfMonitor.class})
  @Test
  public void callOutputNotNull4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$2");
    Reflector.setField(objectUnderTest, "val$nodeCount", 0);
    Reflector.setField(objectUnderTest, "val$isApplyMinNodeCheck", false);
    final MonitorBriefServiceImpl monitorBriefServiceImpl =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(monitorBriefServiceImpl, "restrictContentService", null);
    monitorBriefServiceImpl.executorTimeout = 0L;
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(servicesAPIUtil, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil);
    Reflector.setField(monitorBriefServiceImpl, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(monitorBriefServiceImpl, "visualizationService", null);
    monitorBriefServiceImpl.executorService = null;
    final Logger logger2 = PowerMockito.mock(Logger.class);
    Reflector.setField(monitorBriefServiceImpl, "LOG", logger2);
    final TwitterService twitterService =
        (TwitterService) Reflector.getInstance("com.firstrain.frapi.service.TwitterService");
    Reflector.setField(monitorBriefServiceImpl, "twitterService", twitterService);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(monitorBriefServiceImpl, "entityProcessingService", entityProcessingService);
    Reflector.setField(monitorBriefServiceImpl, "monitorAnalyticsUtil", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorServiceRepository", null);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(monitorBriefServiceImpl, "monitorService", monitorService);
    Reflector.setField(monitorBriefServiceImpl, "entityBaseService", null);
    Reflector.setField(monitorBriefServiceImpl, "userServiceRepository", null);
    monitorBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(monitorBriefServiceImpl, "emailServiceRepository", null);
    Reflector.setField(objectUnderTest, "this$0", monitorBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$tagId", 511L);
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "val$chartTypes", arrayList);
    Reflector.setField(objectUnderTest, "val$filters", "????");
    final VisualizationData visualizationData = PowerMockito.mock(VisualizationData.class);
    PowerMockito.whenNew(VisualizationData.class).withNoArguments().thenReturn(visualizationData);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$2");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final VisualizationData retval = (VisualizationData) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EntityBaseService.class)
  @Test
  public void callOutputNull() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$3");
    final MonitorBriefServiceImpl monitorBriefServiceImpl = new MonitorBriefServiceImpl();
    Reflector.setField(monitorBriefServiceImpl, "restrictContentService", null);
    monitorBriefServiceImpl.executorTimeout = 0L;
    Reflector.setField(monitorBriefServiceImpl, "servicesAPIUtil", null);
    Reflector.setField(monitorBriefServiceImpl, "visualizationService", null);
    monitorBriefServiceImpl.executorService = null;
    Reflector.setField(monitorBriefServiceImpl, "LOG", null);
    Reflector.setField(monitorBriefServiceImpl, "twitterService", null);
    Reflector.setField(monitorBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorAnalyticsUtil", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorServiceRepository", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getSearchResult(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(monitorBriefServiceImpl, "entityBaseService", entityBaseService);
    Reflector.setField(monitorBriefServiceImpl, "userServiceRepository", null);
    monitorBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(monitorBriefServiceImpl, "emailServiceRepository", null);
    Reflector.setField(objectUnderTest, "this$0", monitorBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$baseSpec", null);
    Reflector.setField(objectUnderTest, "val$scopeMulti", null);
    Reflector.setField(objectUnderTest, "val$qMulti", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$3");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final SearchResult retval = (SearchResult) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$2"},
      value = {VisualizationData.class, VisualizationService.class, PerfMonitor.class})
  @Test
  public void callOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$2");
    Reflector.setField(objectUnderTest, "val$nodeCount", 0);
    Reflector.setField(objectUnderTest, "val$isApplyMinNodeCheck", false);
    final MonitorBriefServiceImpl monitorBriefServiceImpl =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(monitorBriefServiceImpl, "restrictContentService", null);
    monitorBriefServiceImpl.executorTimeout = 0L;
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(servicesAPIUtil, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil);
    Reflector.setField(monitorBriefServiceImpl, "servicesAPIUtil", servicesAPIUtil);
    final VisualizationService visualizationService = PowerMockito.mock(VisualizationService.class);
    PowerMockito.when(
            visualizationService.getVisualizationByMonitorId(
                anyLong(),
                anyInt(),
                or(isA(List.class), isNull(List.class)),
                or(isA(String.class), isNull(String.class)),
                anyBoolean(),
                anyBoolean()))
        .thenReturn(null);
    Reflector.setField(monitorBriefServiceImpl, "visualizationService", visualizationService);
    monitorBriefServiceImpl.executorService = null;
    Reflector.setField(monitorBriefServiceImpl, "LOG", null);
    final TwitterService twitterService =
        (TwitterService) Reflector.getInstance("com.firstrain.frapi.service.TwitterService");
    Reflector.setField(monitorBriefServiceImpl, "twitterService", twitterService);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(monitorBriefServiceImpl, "entityProcessingService", entityProcessingService);
    Reflector.setField(monitorBriefServiceImpl, "monitorAnalyticsUtil", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorServiceRepository", null);
    Reflector.setField(monitorBriefServiceImpl, "monitorService", null);
    final EntityBaseService entityBaseService =
        (EntityBaseService) Reflector.getInstance("com.firstrain.frapi.service.EntityBaseService");
    Reflector.setField(monitorBriefServiceImpl, "entityBaseService", entityBaseService);
    Reflector.setField(monitorBriefServiceImpl, "userServiceRepository", null);
    monitorBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(monitorBriefServiceImpl, "emailServiceRepository", null);
    Reflector.setField(objectUnderTest, "this$0", monitorBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$tagId", 511L);
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "val$chartTypes", arrayList);
    Reflector.setField(objectUnderTest, "val$filters", "????");
    final VisualizationData visualizationData = PowerMockito.mock(VisualizationData.class);
    PowerMockito.whenNew(VisualizationData.class).withNoArguments().thenReturn(visualizationData);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl$2");
      final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void collectResultsInputNotNullNullOutputNull() throws Exception {

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest = new MonitorBriefServiceImpl();
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 3L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.executorService = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    final UserServiceRepository userServiceRepository =
        (UserServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.UserServiceRepository");
    Reflector.setField(objectUnderTest, "userServiceRepository", userServiceRepository);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final FRCompletionService<BaseSet> completionService =
        (FRCompletionService<BaseSet>)
            Reflector.getInstance("com.firstrain.frapi.FRCompletionService");
    Reflector.setField(completionService, "completionService", null);
    Reflector.setField(completionService, "submissions", 0);
    final MonitorBriefDetail monitorBrief = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "collectResults",
            Reflector.forName("com.firstrain.frapi.FRCompletionService"),
            Reflector.forName("com.firstrain.frapi.pojo.MonitorBriefDetail"));
    methodUnderTest.setAccessible(true);
    final MonitorBriefDetail retval =
        (MonitorBriefDetail)
            methodUnderTest.invoke(objectUnderTest, completionService, monitorBrief);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void fetchTweetsAsyncInputNullZeroNullNullOutputNotNull() throws Exception {

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest = new MonitorBriefServiceImpl();
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    objectUnderTest.executorService = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] catIdsAll = null;
    final long userId = 0L;
    final SectionSpec sectionSpec = null;
    final String excludeArticleIdsSSV = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "fetchTweetsAsync",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("long"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, userId, sectionSpec, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$catIdsAll"));
    assertEquals(0L, Reflector.getInstanceField(retval, "val$userId"));
    assertNull(Reflector.getInstanceField(retval, "val$sectionSpec"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertEquals(
        0L,
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorService);
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "twitterService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorAnalyticsUtil"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "monitorService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "userServiceRepository"));
    assertNull(
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0"))
            .contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "emailServiceRepository"));
    assertNull(Reflector.getInstanceField(retval, "val$excludeArticleIdsSSV"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    SectionSpec.class,
    TweetSet.class,
    PerfMonitor.class,
    MonitorBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void fetchTweetsInputNullZeroNotNullNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest = new MonitorBriefServiceImpl();
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    objectUnderTest.executorService = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] catIdsAll = null;
    final long userId = 0L;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(sectionSpec, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final String excludeArticleIdsSSV = "!!!!";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "fetchTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("long"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, userId, sectionSpec, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityProcessingService.class, EntityBaseService.class, SectionSpec.class,
    TweetSet.class, PerfMonitor.class, MonitorBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void fetchTweetsInputNullZeroNotNullNotNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest = new MonitorBriefServiceImpl();
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    objectUnderTest.executorService = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityProcessingService.getTweetsWithId(
                or(isA(TweetSet.class), isNull(TweetSet.class))))
        .thenReturn(tweetSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final TweetSet tweetSet1 = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(tweetSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] catIdsAll = null;
    final long userId = 0L;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(sectionSpec, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final String excludeArticleIdsSSV = "!!!!";
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "fetchTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("long"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, userId, sectionSpec, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityProcessingService.class, EntityBaseService.class, SectionSpec.class,
    TweetSet.class, PerfMonitor.class, MonitorBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void fetchTweetsInputNullZeroNotNullNotNullOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest = new MonitorBriefServiceImpl();
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    objectUnderTest.executorService = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityProcessingService.getTweetsWithId(
                or(isA(TweetSet.class), isNull(TweetSet.class))))
        .thenReturn(tweetSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final TweetSet tweetSet1 = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(tweetSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] catIdsAll = null;
    final long userId = 0L;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(sectionSpec, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final String excludeArticleIdsSSV = "";
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "fetchTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("long"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, userId, sectionSpec, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    TwitterSpec.class,
    TweetSet.class,
    PerfMonitor.class,
    Logger.class,
    MonitorBriefServiceImpl.class,
    SectionSpec.class
  })
  @Test
  public void fetchTweetsInputNullZeroNotNullNotNullOutputNotNull4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    objectUnderTest.executorService = null;
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    final UserServiceRepository userServiceRepository =
        (UserServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.UserServiceRepository");
    Reflector.setField(objectUnderTest, "userServiceRepository", userServiceRepository);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] catIdsAll = null;
    final long userId = 0L;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(sectionSpec, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final String excludeArticleIdsSSV = "";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "fetchTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("long"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, userId, sectionSpec, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SectionSpec.class,
    TweetSet.class,
    PerfMonitor.class,
    MonitorBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void fetchTweetsInputNullZeroNotNullNotNullOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    objectUnderTest.executorService = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    final UserServiceRepository userServiceRepository =
        (UserServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.UserServiceRepository");
    Reflector.setField(objectUnderTest, "userServiceRepository", userServiceRepository);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] catIdsAll = null;
    final long userId = 0L;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(sectionSpec, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final String excludeArticleIdsSSV = "";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "fetchTweets",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("long"),
              Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
              Reflector.forName("java.lang.String"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, catIdsAll, userId, sectionSpec, excludeArticleIdsSSV);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    MonitorEmailAPIResponse.class, MonitorServiceRepository.class,
    MonitorBriefServiceImpl.class, PerfMonitor.class
  })
  @Test
  public void getMonitorEmailListInputNotNullPositiveNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.executorService = threadPoolTaskExecutor;
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    final MonitorServiceRepository monitorServiceRepository =
        PowerMockito.mock(MonitorServiceRepository.class);
    PowerMockito.when(monitorServiceRepository.getTagById(anyLong())).thenReturn(null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final User user = (User) Reflector.getInstance("com.firstrain.frapi.domain.User");
    final long monitorId = 6L;
    final String startDateStr = "?";
    final String endDateStr = null;
    final MonitorEmailAPIResponse monitorEmailAPIResponse =
        PowerMockito.mock(MonitorEmailAPIResponse.class);
    PowerMockito.whenNew(MonitorEmailAPIResponse.class)
        .withNoArguments()
        .thenReturn(monitorEmailAPIResponse);
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final MonitorEmailAPIResponse retval =
        objectUnderTest.getMonitorEmailList(user, monitorId, startDateStr, endDateStr);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getSearchResultAsyncInputNullNullNullNullOutputNotNull() throws Exception {

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest = new MonitorBriefServiceImpl();
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    objectUnderTest.executorService = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final String fq = null;
    final BaseSpec baseSpec = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getSearchResultAsync",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("int[]"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final Callable<SearchResult> retval =
        (Callable<SearchResult>)
            methodUnderTest.invoke(objectUnderTest, qMulti, scopeMulti, fq, baseSpec);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertEquals(
        0L,
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorService);
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "twitterService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorAnalyticsUtil"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "monitorService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "userServiceRepository"));
    assertNull(
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0"))
            .contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "emailServiceRepository"));
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
    assertNull(Reflector.getInstanceField(retval, "val$scopeMulti"));
    assertNull(Reflector.getInstanceField(retval, "val$qMulti"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getVisualizationAsyncInputZeroZeroNullNullFalseOutputNotNull() throws Exception {

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest = new MonitorBriefServiceImpl();
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    objectUnderTest.executorService = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final long tagId = 0L;
    final int nodeCount = 0;
    final List<VisualizationData.ChartType> chartTypes = null;
    final String filters = null;
    final boolean isApplyMinNodeCheck = false;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getVisualizationAsync",
            Reflector.forName("long"),
            Reflector.forName("int"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(
                objectUnderTest, tagId, nodeCount, chartTypes, filters, isApplyMinNodeCheck);

    // Assert
    assertNotNull(retval);
    assertEquals(0, Reflector.getInstanceField(retval, "val$nodeCount"));
    assertEquals(false, Reflector.getInstanceField(retval, "val$isApplyMinNodeCheck"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertEquals(
        0L,
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorService);
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "twitterService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorAnalyticsUtil"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "monitorService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "userServiceRepository"));
    assertNull(
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0"))
            .contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "emailServiceRepository"));
    assertEquals(0L, Reflector.getInstanceField(retval, "val$tagId"));
    assertNull(Reflector.getInstanceField(retval, "val$chartTypes"));
    assertNull(Reflector.getInstanceField(retval, "val$filters"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getWebResultsAsyncInputNullNullNullNullZeroZeroOutputNotNull() throws Exception {

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest = new MonitorBriefServiceImpl();
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    objectUnderTest.executorService = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final BaseSpec baseSpec60Days = null;
    final BaseSpec baseSpec180Days = null;
    final long folderId = 0L;
    final long userId = 0L;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebResultsAsync",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("long"),
            Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(
                objectUnderTest,
                qMulti,
                scopeMulti,
                baseSpec60Days,
                baseSpec180Days,
                folderId,
                userId);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertEquals(
        0L,
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorService);
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "twitterService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorAnalyticsUtil"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "monitorService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "userServiceRepository"));
    assertNull(
        ((MonitorBriefServiceImpl) Reflector.getInstanceField(retval, "this$0"))
            .contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "emailServiceRepository"));
    assertEquals(0L, Reflector.getInstanceField(retval, "val$folderId"));
    assertNull(Reflector.getInstanceField(retval, "val$qMulti"));
    assertEquals(0L, Reflector.getInstanceField(retval, "val$userId"));
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec180Days"));
    assertNull(Reflector.getInstanceField(retval, "val$scopeMulti"));
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec60Days"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocumentSet.class, EntityBaseService.class, Logger.class,
    ThreadPoolTaskExecutor.class, PerfMonitor.class, BaseSpec.class
  })
  @Test
  public void getWebResultsInputNullNullNotNullNotNullPositivePositiveOutputNullPointerException()
      throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.executorService = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "LOG", null);
    final TwitterService twitterService =
        (TwitterService) Reflector.getInstance("com.firstrain.frapi.service.TwitterService");
    Reflector.setField(objectUnderTest, "twitterService", twitterService);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    final MonitorAnalyticsUtil monitorAnalyticsUtil =
        (MonitorAnalyticsUtil)
            Reflector.getInstance("com.firstrain.frapi.util.MonitorAnalyticsUtil");
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(monitorAnalyticsUtil, "convertUtil", convertUtil);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(
        monitorAnalyticsUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(monitorAnalyticsUtil, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", monitorAnalyticsUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(objectUnderTest, "monitorService", monitorService);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.getWebResults(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(documentSet);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = "";
    final EmailServiceRepository emailServiceRepository =
        (EmailServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EmailServiceRepository");
    Reflector.setField(objectUnderTest, "emailServiceRepository", emailServiceRepository);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final BaseSpec baseSpec60Days = PowerMockito.mock(BaseSpec.class);
    final Method getNeedPaginationMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedPagination");
    PowerMockito.doReturn(true).when(baseSpec60Days, getNeedPaginationMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn(null))
        .when(baseSpec60Days, getCountMethod)
        .withNoArguments();
    final BaseSpec baseSpec180Days = PowerMockito.mock(BaseSpec.class);
    final long folderId = 9L;
    final long userId = 6L;
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getWebResults",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
              Reflector.forName("long"),
              Reflector.forName("long"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(
          objectUnderTest, qMulti, scopeMulti, baseSpec60Days, baseSpec180Days, folderId, userId);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocumentSet.class,
    MonitorBriefServiceImpl.class,
    BaseSpec.class,
    PerfMonitor.class
  })
  @Test
  public void getWebResultsInputNullNullNotNullNotNullPositivePositiveOutputNullPointerException2()
      throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.executorService = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "LOG", null);
    final TwitterService twitterService =
        (TwitterService) Reflector.getInstance("com.firstrain.frapi.service.TwitterService");
    Reflector.setField(objectUnderTest, "twitterService", twitterService);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    final MonitorAnalyticsUtil monitorAnalyticsUtil =
        (MonitorAnalyticsUtil)
            Reflector.getInstance("com.firstrain.frapi.util.MonitorAnalyticsUtil");
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(monitorAnalyticsUtil, "convertUtil", convertUtil);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(
        monitorAnalyticsUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(monitorAnalyticsUtil, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", monitorAnalyticsUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(objectUnderTest, "monitorService", monitorService);
    final EntityBaseService entityBaseService =
        (EntityBaseService) Reflector.getInstance("com.firstrain.frapi.service.EntityBaseService");
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = "";
    final EmailServiceRepository emailServiceRepository =
        (EmailServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EmailServiceRepository");
    Reflector.setField(objectUnderTest, "emailServiceRepository", emailServiceRepository);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final BaseSpec baseSpec60Days = PowerMockito.mock(BaseSpec.class);
    final Method getNeedPaginationMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedPagination");
    PowerMockito.doReturn(null).when(baseSpec60Days, getNeedPaginationMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn(null))
        .when(baseSpec60Days, getCountMethod)
        .withNoArguments();
    final BaseSpec baseSpec180Days = PowerMockito.mock(BaseSpec.class);
    final long folderId = 9L;
    final long userId = 6L;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getWebResults",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
              Reflector.forName("long"),
              Reflector.forName("long"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(
          objectUnderTest, qMulti, scopeMulti, baseSpec60Days, baseSpec180Days, folderId, userId);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocumentSet.class,
    EntityBaseService.class,
    MonitorBriefServiceImpl.class,
    Logger.class,
    ThreadPoolTaskExecutor.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void getWebResultsInputNullNullNotNullNotNullZeroPositiveOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.executorService = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getWebResults(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final UserServiceRepository userServiceRepository =
        (UserServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.UserServiceRepository");
    Reflector.setField(objectUnderTest, "userServiceRepository", userServiceRepository);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final BaseSpec baseSpec60Days = PowerMockito.mock(BaseSpec.class);
    final Method getNeedPaginationMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedPagination");
    PowerMockito.doReturn(null).when(baseSpec60Days, getNeedPaginationMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0).doReturn(null))
        .when(baseSpec60Days, getCountMethod)
        .withNoArguments();
    final BaseSpec baseSpec180Days = PowerMockito.mock(BaseSpec.class);
    final long folderId = 0L;
    final long userId = 7L;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebResults",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("long"),
            Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet)
            methodUnderTest.invoke(
                objectUnderTest,
                qMulti,
                scopeMulti,
                baseSpec60Days,
                baseSpec180Days,
                folderId,
                userId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocumentSet.class,
    EntityProcessingService.class,
    EntityBaseService.class,
    Logger.class,
    ThreadPoolTaskExecutor.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void getWebResultsInputNullNullNotNullNotNullZeroPositiveOutputNotNull2()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.executorService = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.getWebResults(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(documentSet);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final UserServiceRepository userServiceRepository =
        (UserServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.UserServiceRepository");
    Reflector.setField(objectUnderTest, "userServiceRepository", userServiceRepository);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final BaseSpec baseSpec60Days = PowerMockito.mock(BaseSpec.class);
    final Method getNeedPaginationMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedPagination");
    PowerMockito.doReturn(true).when(baseSpec60Days, getNeedPaginationMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn(null))
        .when(baseSpec60Days, getCountMethod)
        .withNoArguments();
    final BaseSpec baseSpec180Days = PowerMockito.mock(BaseSpec.class);
    final long folderId = 0L;
    final long userId = 7L;
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebResults",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("long"),
            Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet)
            methodUnderTest.invoke(
                objectUnderTest,
                qMulti,
                scopeMulti,
                baseSpec60Days,
                baseSpec180Days,
                folderId,
                userId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocumentSet.class,
    EntityProcessingService.class,
    EntityBaseService.class,
    Logger.class,
    ThreadPoolTaskExecutor.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void getWebResultsInputNullNullNotNullNotNullZeroPositiveOutputNotNull3()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.executorService = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "twitterService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.getWebResults(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(documentSet);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final UserServiceRepository userServiceRepository =
        (UserServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.UserServiceRepository");
    Reflector.setField(objectUnderTest, "userServiceRepository", userServiceRepository);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "emailServiceRepository", null);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final BaseSpec baseSpec60Days = PowerMockito.mock(BaseSpec.class);
    final Method getNeedPaginationMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedPagination");
    PowerMockito.doReturn(null).when(baseSpec60Days, getNeedPaginationMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0).doReturn(null))
        .when(baseSpec60Days, getCountMethod)
        .withNoArguments();
    final BaseSpec baseSpec180Days = PowerMockito.mock(BaseSpec.class);
    final long folderId = 0L;
    final long userId = 7L;
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebResults",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("long"),
            Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet)
            methodUnderTest.invoke(
                objectUnderTest,
                qMulti,
                scopeMulti,
                baseSpec60Days,
                baseSpec180Days,
                folderId,
                userId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocumentSet.class,
    MonitorBriefServiceImpl.class,
    Logger.class,
    PerfMonitor.class
  })
  @Test
  public void getWebResultsInputNullNullNullNotNullPositivePositiveOutputNotNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final MonitorBriefServiceImpl objectUnderTest =
        (MonitorBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "visualizationService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.executorService = threadPoolTaskExecutor;
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final TwitterService twitterService =
        (TwitterService) Reflector.getInstance("com.firstrain.frapi.service.TwitterService");
    Reflector.setField(objectUnderTest, "twitterService", twitterService);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final MonitorAnalyticsUtil monitorAnalyticsUtil =
        (MonitorAnalyticsUtil)
            Reflector.getInstance("com.firstrain.frapi.util.MonitorAnalyticsUtil");
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(monitorAnalyticsUtil, "convertUtil", convertUtil);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(
        monitorAnalyticsUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(monitorAnalyticsUtil, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorAnalyticsUtil", monitorAnalyticsUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(objectUnderTest, "monitorService", monitorService);
    final EntityBaseService entityBaseService =
        (EntityBaseService) Reflector.getInstance("com.firstrain.frapi.service.EntityBaseService");
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    objectUnderTest.contentFilterToken = "";
    final EmailServiceRepository emailServiceRepository =
        (EmailServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EmailServiceRepository");
    Reflector.setField(objectUnderTest, "emailServiceRepository", emailServiceRepository);
    final String[] qMulti = null;
    final int[] scopeMulti = null;
    final BaseSpec baseSpec60Days = null;
    final BaseSpec baseSpec180Days =
        (BaseSpec) Reflector.getInstance("com.firstrain.frapi.domain.BaseSpec");
    final long folderId = 9L;
    final long userId = 6L;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebResults",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("long"),
            Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet)
            methodUnderTest.invoke(
                objectUnderTest,
                qMulti,
                scopeMulti,
                baseSpec60Days,
                baseSpec180Days,
                folderId,
                userId);

    // Assert
    assertNotNull(retval);
  }
}
