package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.Items;
import com.firstrain.frapi.domain.ChartCountSummary;
import com.firstrain.frapi.domain.ChartDetails;
import com.firstrain.frapi.domain.ChartSpec;
import com.firstrain.frapi.domain.TrendingEntity;
import com.firstrain.frapi.domain.VisualizationData.ChartType;
import com.firstrain.frapi.domain.VisualizationData.Node;
import com.firstrain.frapi.domain.VisualizationData.NodeBucket;
import com.firstrain.frapi.pojo.wrapper.BaseSet;
import com.firstrain.frapi.pojo.wrapper.GraphSet;
import com.firstrain.frapi.repository.AccelerometerServiceRepository;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.MonitorServiceRepository;
import com.firstrain.obj.IEntityInfo;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.HotListBucket;
import com.firstrain.solr.client.QueryEntry;
import com.firstrain.solr.client.SearchResult;
import com.firstrain.solr.client.SearchSpec;
import com.firstrain.solr.client.SolrSearcher;
import com.firstrain.utils.FR_ArrayUtils;
import com.firstrain.utils.object.PerfActivityType;
import com.firstrain.utils.object.PerfMonitor;
import com.firstrain.utils.object.PerfRequestEntry;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class VisualizationServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: VisualizationServiceImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({GraphSet.class, VisualizationServiceImpl.class, PerfMonitor.class})
  @Test
  public void access$400InputNotNullNullNullNullZeroNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final VisualizationServiceImpl x0 = new VisualizationServiceImpl();
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "monitorServiceRepository", null);
    Reflector.setField(x0, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(x0, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(x0, "accelerometerServiceRepository", null);
    Reflector.setField(x0, "regionExcelUtilImpl", null);
    Reflector.setField(x0, "TRENDING_COUNT", 0);
    Reflector.setField(x0, "companyEndingWords", null);
    Reflector.setField(x0, "treeMapMinNode", 0);
    Reflector.setField(x0, "FACET_SORT_COUNT", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "docSummaryMap", null);
    x0.taskExecutor = null;
    final List x1 = null;
    final List x2 = null;
    final List x3 = null;
    final int x4 = 0;
    final String x5 = null;
    final GraphSet graphSet = PowerMockito.mock(GraphSet.class);
    PowerMockito.whenNew(GraphSet.class).withNoArguments().thenReturn(graphSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$400",
            Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final GraphSet retval = (GraphSet) methodUnderTest.invoke(null, x0, x1, x2, x3, x4, x5);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({GraphSet.class, VisualizationServiceImpl.class, PerfMonitor.class})
  @Test
  public void access$500InputNotNullNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final VisualizationServiceImpl x0 = new VisualizationServiceImpl();
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "monitorServiceRepository", null);
    Reflector.setField(x0, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(x0, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(x0, "accelerometerServiceRepository", null);
    Reflector.setField(x0, "regionExcelUtilImpl", null);
    Reflector.setField(x0, "TRENDING_COUNT", 0);
    Reflector.setField(x0, "companyEndingWords", null);
    Reflector.setField(x0, "treeMapMinNode", 0);
    Reflector.setField(x0, "FACET_SORT_COUNT", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "docSummaryMap", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    x0.taskExecutor = threadPoolTaskExecutor;
    final List x1 = null;
    final List x2 = null;
    final String x3 = null;
    final GraphSet graphSet = PowerMockito.mock(GraphSet.class);
    PowerMockito.whenNew(GraphSet.class).withNoArguments().thenReturn(graphSet);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$500",
            Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final GraphSet retval = (GraphSet) methodUnderTest.invoke(null, x0, x1, x2, x3);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(VisualizationServiceImpl.class)
  @Test
  public void addBucketInput0NullZeroOutputVoid() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    final AccelerometerServiceRepository accelerometerServiceRepository =
        (AccelerometerServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.AccelerometerServiceRepository");
    Reflector.setField(
        objectUnderTest, "accelerometerServiceRepository", accelerometerServiceRepository);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final ArrayList<NodeBucket> list = new ArrayList<NodeBucket>();
    final Node n = null;
    final int parentId = 0;
    final NodeBucket nodeBucket = PowerMockito.mock(NodeBucket.class);
    Reflector.setField(nodeBucket, "count", -2);
    Reflector.setField(nodeBucket, "parentId", 0);
    final ArrayList arrayList = new ArrayList();
    Reflector.setField(nodeBucket, "nodes", arrayList);
    PowerMockito.whenNew(NodeBucket.class)
        .withParameterTypes(int.class)
        .withArguments(anyInt())
        .thenReturn(nodeBucket);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "addBucket",
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"),
            Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    methodUnderTest.invoke(objectUnderTest, list, n, parentId);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(VisualizationServiceImpl.class)
  @Test
  public void addBucketInput1NullZeroOutputVoid() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    final AccelerometerServiceRepository accelerometerServiceRepository =
        (AccelerometerServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.AccelerometerServiceRepository");
    Reflector.setField(
        objectUnderTest, "accelerometerServiceRepository", accelerometerServiceRepository);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final ArrayList<NodeBucket> list = new ArrayList<NodeBucket>();
    final NodeBucket nodeBucket = PowerMockito.mock(NodeBucket.class);
    Reflector.setField(nodeBucket, "count", 0);
    Reflector.setField(nodeBucket, "parentId", 1);
    Reflector.setField(nodeBucket, "nodes", null);
    list.add(nodeBucket);
    final Node n = null;
    final int parentId = 0;
    final NodeBucket nodeBucket1 = PowerMockito.mock(NodeBucket.class);
    Reflector.setField(nodeBucket1, "count", 0);
    Reflector.setField(nodeBucket1, "parentId", 0);
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    Reflector.setField(nodeBucket1, "nodes", arrayList);
    PowerMockito.whenNew(NodeBucket.class)
        .withParameterTypes(int.class)
        .withArguments(anyInt())
        .thenReturn(nodeBucket1);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "addBucket",
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"),
            Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    methodUnderTest.invoke(objectUnderTest, list, n, parentId);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void addToTrendingentityMapInputNullNotNullOutputIndexOutOfBoundsException()
      throws Throwable {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    final AccelerometerServiceRepository accelerometerServiceRepository =
        (AccelerometerServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.AccelerometerServiceRepository");
    Reflector.setField(
        objectUnderTest, "accelerometerServiceRepository", accelerometerServiceRepository);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final Map<String, TrendingEntity> relTopicMap = null;
    final QueryEntry queryEntry =
        (QueryEntry) Reflector.getInstance("com.firstrain.solr.client.QueryEntry");
    final ArrayList arrayList = new ArrayList();
    Reflector.setField(queryEntry, "searchTokens", arrayList);

    // Act
    thrown.expect(IndexOutOfBoundsException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "addToTrendingentityMap",
              Reflector.forName("java.util.Map"),
              Reflector.forName("com.firstrain.solr.client.QueryEntry"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, relTopicMap, queryEntry);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({GraphSet.class, VisualizationServiceImpl.class, PerfMonitor.class})
  @Test
  public void callOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$12");
    Reflector.setField(objectUnderTest, "val$qList", null);
    Reflector.setField(objectUnderTest, "val$itemList", null);
    Reflector.setField(objectUnderTest, "val$nodeCount", 0);
    Reflector.setField(objectUnderTest, "val$chartId", null);
    final VisualizationServiceImpl visualizationServiceImpl = new VisualizationServiceImpl();
    Reflector.setField(visualizationServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(visualizationServiceImpl, "LOG", null);
    Reflector.setField(visualizationServiceImpl, "monitorServiceRepository", null);
    Reflector.setField(visualizationServiceImpl, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(visualizationServiceImpl, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(visualizationServiceImpl, "accelerometerServiceRepository", null);
    Reflector.setField(visualizationServiceImpl, "regionExcelUtilImpl", null);
    Reflector.setField(visualizationServiceImpl, "TRENDING_COUNT", 0);
    Reflector.setField(visualizationServiceImpl, "companyEndingWords", null);
    Reflector.setField(visualizationServiceImpl, "treeMapMinNode", 0);
    Reflector.setField(visualizationServiceImpl, "FACET_SORT_COUNT", null);
    visualizationServiceImpl.executorTimeout = 0L;
    Reflector.setField(visualizationServiceImpl, "docSummaryMap", null);
    visualizationServiceImpl.taskExecutor = null;
    Reflector.setField(objectUnderTest, "this$0", visualizationServiceImpl);
    Reflector.setField(objectUnderTest, "val$scopeList", null);
    final GraphSet graphSet = PowerMockito.mock(GraphSet.class);
    PowerMockito.whenNew(GraphSet.class).withNoArguments().thenReturn(graphSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$12");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final GraphSet retval = (GraphSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({GraphSet.class, VisualizationServiceImpl.class, PerfMonitor.class})
  @Test
  public void callOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$13");
    final VisualizationServiceImpl visualizationServiceImpl = new VisualizationServiceImpl();
    Reflector.setField(visualizationServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(visualizationServiceImpl, "LOG", null);
    Reflector.setField(visualizationServiceImpl, "monitorServiceRepository", null);
    Reflector.setField(visualizationServiceImpl, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(visualizationServiceImpl, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(visualizationServiceImpl, "accelerometerServiceRepository", null);
    Reflector.setField(visualizationServiceImpl, "regionExcelUtilImpl", null);
    Reflector.setField(visualizationServiceImpl, "TRENDING_COUNT", 0);
    Reflector.setField(visualizationServiceImpl, "companyEndingWords", null);
    Reflector.setField(visualizationServiceImpl, "treeMapMinNode", 0);
    Reflector.setField(visualizationServiceImpl, "FACET_SORT_COUNT", null);
    visualizationServiceImpl.executorTimeout = 0L;
    Reflector.setField(visualizationServiceImpl, "docSummaryMap", null);
    visualizationServiceImpl.taskExecutor = null;
    Reflector.setField(objectUnderTest, "this$0", visualizationServiceImpl);
    Reflector.setField(objectUnderTest, "val$chartId", null);
    Reflector.setField(objectUnderTest, "val$scopeList", null);
    Reflector.setField(objectUnderTest, "val$qList", null);
    final GraphSet graphSet = PowerMockito.mock(GraphSet.class);
    PowerMockito.whenNew(GraphSet.class).withNoArguments().thenReturn(graphSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$13");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final GraphSet retval = (GraphSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputNegative() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    PowerMockito.doReturn(1).when(o1, getDocCountMethod).withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputNegative2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1).doReturn(0).doReturn(1))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    PowerMockito.doReturn(1).when(o2, getEntityCountMethod1).withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1).doReturn(0))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputNegative3() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(1).doReturn(1))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(0))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(0).doReturn(0))
        .when(o2, getEntityCountMethod1)
        .withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(0))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputNegative4() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1).doReturn(0).doReturn(1))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    PowerMockito.doReturn(0).when(o2, getEntityCountMethod1).withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(0))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputNegative5() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(-2_147_483_647).doReturn(1))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    PowerMockito.doReturn(0).when(o2, getEntityCountMethod1).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputNegative6() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1).doReturn(1).doReturn(2))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    PowerMockito.doReturn(0).when(o2, getEntityCountMethod1).withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(-2_147_483_647).doReturn(1))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputNegative7() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(0).doReturn(1).doReturn(1).doReturn(0).doReturn(16))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(0).doReturn(1).doReturn(-2_147_483_647).doReturn(0))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1).doReturn(0))
        .when(o2, getEntityCountMethod1)
        .withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(1).doReturn(-2_147_483_647).doReturn(-2_147_483_647))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputPositive() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    final Node o1 =
        (Node) Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$Node");
    Reflector.setField(o1, "intensity", 131_072);
    Reflector.setField(o1, "query", null);
    Reflector.setField(o1, "itemId", null);
    Reflector.setField(o1, "label", null);
    Reflector.setField(o1, "imageName", null);
    Reflector.setField(o1, "parents", null);
    Reflector.setField(o1, "smartText", null);
    Reflector.setField(o1, "subtree", null);
    Reflector.setField(o1, "parentToken", null);
    Reflector.setField(o1, "value", 0.0f);
    Reflector.setField(o1, "searchToken", null);
    Reflector.setField(o1, "smartText0", null);
    Reflector.setField(o1, "name", null);
    Reflector.setField(o1, "cc", null);
    Reflector.setField(o1, "parent", null);
    final Node o2 =
        (Node) Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$Node");
    Reflector.setField(o2, "intensity", 262_144);
    Reflector.setField(o2, "query", null);
    Reflector.setField(o2, "itemId", null);
    Reflector.setField(o2, "label", null);
    Reflector.setField(o2, "imageName", null);
    Reflector.setField(o2, "parents", null);
    Reflector.setField(o2, "smartText", null);
    Reflector.setField(o2, "subtree", null);
    Reflector.setField(o2, "parentToken", null);
    Reflector.setField(o2, "value", 0.0f);
    Reflector.setField(o2, "searchToken", null);
    Reflector.setField(o2, "smartText0", null);
    Reflector.setField(o2, "name", null);
    Reflector.setField(o2, "cc", null);
    Reflector.setField(o2, "parent", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"),
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputPositive3() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$3");
    Reflector.setField(objectUnderTest, "this$0", null);
    final Node o1 =
        (Node) Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$Node");
    Reflector.setField(o1, "intensity", 131_072);
    Reflector.setField(o1, "query", null);
    Reflector.setField(o1, "itemId", null);
    Reflector.setField(o1, "label", null);
    Reflector.setField(o1, "imageName", null);
    Reflector.setField(o1, "parents", null);
    Reflector.setField(o1, "smartText", null);
    Reflector.setField(o1, "subtree", null);
    Reflector.setField(o1, "parentToken", null);
    Reflector.setField(o1, "value", 0.0f);
    Reflector.setField(o1, "searchToken", null);
    Reflector.setField(o1, "smartText0", null);
    Reflector.setField(o1, "name", null);
    Reflector.setField(o1, "cc", null);
    Reflector.setField(o1, "parent", null);
    final Node o2 =
        (Node) Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$Node");
    Reflector.setField(o2, "intensity", 262_144);
    Reflector.setField(o2, "query", null);
    Reflector.setField(o2, "itemId", null);
    Reflector.setField(o2, "label", null);
    Reflector.setField(o2, "imageName", null);
    Reflector.setField(o2, "parents", null);
    Reflector.setField(o2, "smartText", null);
    Reflector.setField(o2, "subtree", null);
    Reflector.setField(o2, "parentToken", null);
    Reflector.setField(o2, "value", 0.0f);
    Reflector.setField(o2, "searchToken", null);
    Reflector.setField(o2, "smartText0", null);
    Reflector.setField(o2, "name", null);
    Reflector.setField(o2, "cc", null);
    Reflector.setField(o2, "parent", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"),
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputPositive5() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(0))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    PowerMockito.doReturn(1).when(o2, getEntityCountMethod1).withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    PowerMockito.doReturn(1).when(o2, getDocCountMethod).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputPositive6() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    PowerMockito.doReturn(0).when(o1, getDocCountMethod).withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    PowerMockito.doReturn(1).when(o2, getEntityCountMethod1).withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    PowerMockito.doReturn(1).when(o2, getDocCountMethod1).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputPositive7() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(0).doReturn(0))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(0))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(0).doReturn(1))
        .when(o2, getEntityCountMethod1)
        .withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(0).doReturn(1))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputPositive8() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(0).doReturn(1).doReturn(-2_147_483_647).doReturn(0))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    PowerMockito.doReturn(0).when(o2, getEntityCountMethod1).withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(1).doReturn(-2_147_483_647).doReturn(1_073_741_825))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputPositive9() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1).doReturn(1).doReturn(0))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(0).doReturn(1).doReturn(-2_147_483_647).doReturn(0))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(0).doReturn(16))
        .when(o2, getEntityCountMethod1)
        .withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(1).doReturn(-2_147_483_647).doReturn(-1_073_741_823))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputPositive10() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(0).doReturn(1).doReturn(1).doReturn(1).doReturn(-1_610_588_080))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(0).doReturn(1).doReturn(-2_147_483_647).doReturn(0))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(0).doReturn(1_073_741_824).doReturn(0).doReturn(-1_610_350_528))
        .when(o2, getEntityCountMethod1)
        .withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(1).doReturn(-2_147_483_647).doReturn(-1_073_741_823))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$1");
    Reflector.setField(objectUnderTest, "this$0", null);
    final Node o1 =
        (Node) Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$Node");
    Reflector.setField(o1, "parentToken", null);
    Reflector.setField(o1, "subtree", null);
    Reflector.setField(o1, "imageName", null);
    Reflector.setField(o1, "smartText", null);
    Reflector.setField(o1, "parents", null);
    Reflector.setField(o1, "query", null);
    Reflector.setField(o1, "itemId", null);
    Reflector.setField(o1, "label", null);
    Reflector.setField(o1, "value", 0.0f);
    Reflector.setField(o1, "searchToken", null);
    Reflector.setField(o1, "intensity", 0);
    Reflector.setField(o1, "smartText0", null);
    Reflector.setField(o1, "name", null);
    Reflector.setField(o1, "cc", null);
    Reflector.setField(o1, "parent", null);
    final Node o2 =
        (Node) Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$Node");
    Reflector.setField(o2, "parentToken", null);
    Reflector.setField(o2, "subtree", null);
    Reflector.setField(o2, "imageName", null);
    Reflector.setField(o2, "smartText", null);
    Reflector.setField(o2, "parents", null);
    Reflector.setField(o2, "query", null);
    Reflector.setField(o2, "itemId", null);
    Reflector.setField(o2, "label", null);
    Reflector.setField(o2, "value", 0.0f);
    Reflector.setField(o2, "searchToken", null);
    Reflector.setField(o2, "intensity", 0);
    Reflector.setField(o2, "smartText0", null);
    Reflector.setField(o2, "name", null);
    Reflector.setField(o2, "cc", null);
    Reflector.setField(o2, "parent", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$1");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"),
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputZero2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$4");
    Reflector.setField(objectUnderTest, "this$0", null);
    final NodeBucket o1 =
        (NodeBucket)
            Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$NodeBucket");
    Reflector.setField(o1, "nodes", null);
    Reflector.setField(o1, "count", 0);
    Reflector.setField(o1, "parentId", 0);
    final NodeBucket o2 =
        (NodeBucket)
            Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$NodeBucket");
    Reflector.setField(o2, "nodes", null);
    Reflector.setField(o2, "count", 0);
    Reflector.setField(o2, "parentId", 0);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$4");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$NodeBucket"),
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$NodeBucket"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputZero3() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    PowerMockito.doReturn(1).when(o1, getEntityCountMethod).withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(1).doReturn(0))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    PowerMockito.doReturn(1).when(o2, getEntityCountMethod1).withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(0).doReturn(0))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputZero4() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1).doReturn(0).doReturn(0))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(0).doReturn(1).doReturn(-2_147_483_647).doReturn(0))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(0))
        .when(o2, getEntityCountMethod1)
        .withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(1).doReturn(-2_147_483_647).doReturn(-2_147_483_647))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TrendingEntity.class)
  @Test
  public void compareInputNotNullNotNullOutputZero5() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final TrendingEntity o1 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1).doReturn(1).doReturn(0).doReturn(0))
        .when(o1, getEntityCountMethod)
        .withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(0).doReturn(1).doReturn(-2_147_483_647).doReturn(0))
        .when(o1, getDocCountMethod)
        .withNoArguments();
    final TrendingEntity o2 = PowerMockito.mock(TrendingEntity.class);
    final Method getEntityCountMethod1 =
        DTUMemberMatcher.method(TrendingEntity.class, "getEntityCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(1).doReturn(0).doReturn(0))
        .when(o2, getEntityCountMethod1)
        .withNoArguments();
    final Method getDocCountMethod1 = DTUMemberMatcher.method(TrendingEntity.class, "getDocCount");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(1).doReturn(-2_147_483_647).doReturn(-2_147_483_647))
        .when(o2, getDocCountMethod1)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"),
            Reflector.forName("com.firstrain.frapi.domain.TrendingEntity"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputZero6() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$9");
    Reflector.setField(objectUnderTest, "this$0", null);
    final Node o1 =
        (Node) Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$Node");
    Reflector.setField(o1, "parentToken", null);
    Reflector.setField(o1, "subtree", null);
    Reflector.setField(o1, "imageName", null);
    Reflector.setField(o1, "smartText", null);
    Reflector.setField(o1, "parents", null);
    Reflector.setField(o1, "query", null);
    Reflector.setField(o1, "itemId", null);
    Reflector.setField(o1, "label", null);
    Reflector.setField(o1, "value", 0.0f);
    Reflector.setField(o1, "searchToken", null);
    Reflector.setField(o1, "intensity", 0);
    Reflector.setField(o1, "smartText0", null);
    Reflector.setField(o1, "name", null);
    Reflector.setField(o1, "cc", null);
    Reflector.setField(o1, "parent", null);
    final Node o2 =
        (Node) Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$Node");
    Reflector.setField(o2, "parentToken", null);
    Reflector.setField(o2, "subtree", null);
    Reflector.setField(o2, "imageName", null);
    Reflector.setField(o2, "smartText", null);
    Reflector.setField(o2, "parents", null);
    Reflector.setField(o2, "query", null);
    Reflector.setField(o2, "itemId", null);
    Reflector.setField(o2, "label", null);
    Reflector.setField(o2, "value", 0.0f);
    Reflector.setField(o2, "searchToken", null);
    Reflector.setField(o2, "intensity", 0);
    Reflector.setField(o2, "smartText0", null);
    Reflector.setField(o2, "name", null);
    Reflector.setField(o2, "cc", null);
    Reflector.setField(o2, "parent", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$9");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"),
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$Node"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNullOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.VisualizationServiceImpl$6");
    Reflector.setField(objectUnderTest, "this$0", null);
    final ArrayList arrayList = new ArrayList();
    arrayList.add(1_073_741_824);
    Reflector.setField(objectUnderTest, "val$chartTypes", arrayList);
    final ChartType o1 =
        (ChartType) Reflector.getInstance("com.firstrain.frapi.domain.VisualizationData$ChartType");
    final ChartType o2 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl$6");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$ChartType"),
            Reflector.forName("com.firstrain.frapi.domain.VisualizationData$ChartType"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TrendingEntity.class, VisualizationServiceImpl.class})
  @Test
  public void createTrendingEntityObjInputNullOutputNotNull() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final String id = null;
    final TrendingEntity trendingEntity = PowerMockito.mock(TrendingEntity.class);
    PowerMockito.whenNew(TrendingEntity.class).withNoArguments().thenReturn(trendingEntity);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "createTrendingEntityObj", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TrendingEntity retval = (TrendingEntity) methodUnderTest.invoke(objectUnderTest, id);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getAccelerometerGraphIndustryAsyncInputNullNullFalseFalseOutputNotNull()
      throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    final AccelerometerServiceRepository accelerometerServiceRepository =
        (AccelerometerServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.AccelerometerServiceRepository");
    Reflector.setField(
        objectUnderTest, "accelerometerServiceRepository", accelerometerServiceRepository);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final List<ChartCountSummary> entityList = null;
    final String chartId = null;
    final boolean ipad = false;
    final boolean isHtmlSmartText = false;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getAccelerometerGraphIndustryAsync",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("boolean"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(objectUnderTest, entityList, chartId, ipad, isHtmlSmartText);

    // Assert
    assertNotNull(retval);
    assertEquals(false, Reflector.getInstanceField(retval, "val$ipad"));
    assertNull(Reflector.getInstanceField(retval, "val$entityList"));
    assertNull(Reflector.getInstanceField(retval, "val$chartId"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNotNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "MAX_RELATED_ENTITY"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "SEARCHTOKEN_COUNT"));
    assertNotNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "accelerometerServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "regionExcelUtilImpl"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "TRENDING_COUNT"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyEndingWords"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "treeMapMinNode"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "FACET_SORT_COUNT"));
    assertEquals(
        0L,
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "docSummaryMap"));
    assertNull(
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertEquals(false, Reflector.getInstanceField(retval, "val$isHtmlSmartText"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getChartDataforACCAsyncInputNullNullFalseOutputNotNull() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final Set<String> catIds = null;
    final String chartId = null;
    final boolean isHtmlSmartText = false;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getChartDataforACCAsync",
            Reflector.forName("java.util.Set"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(objectUnderTest, catIds, chartId, isHtmlSmartText);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNotNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "MAX_RELATED_ENTITY"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "SEARCHTOKEN_COUNT"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "accelerometerServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "regionExcelUtilImpl"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "TRENDING_COUNT"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyEndingWords"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "treeMapMinNode"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "FACET_SORT_COUNT"));
    assertEquals(
        0L,
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "docSummaryMap"));
    assertNull(
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(Reflector.getInstanceField(retval, "val$chartId"));
    assertEquals(false, Reflector.getInstanceField(retval, "val$isHtmlSmartText"));
    assertNull(Reflector.getInstanceField(retval, "val$catIds"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getChartDataforBIandMDAsyncInputNotNullNull1NullNullOutputNotNull() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    final AccelerometerServiceRepository accelerometerServiceRepository =
        (AccelerometerServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.AccelerometerServiceRepository");
    Reflector.setField(
        objectUnderTest, "accelerometerServiceRepository", accelerometerServiceRepository);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    final HashMap<String, ChartCountSummary> hashMap = new HashMap<String, ChartCountSummary>();
    Reflector.setField(objectUnderTest, "docSummaryMap", hashMap);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final ChartSpec spec =
        (ChartSpec) Reflector.getInstance("com.firstrain.frapi.domain.ChartSpec");
    final List<String> qList = null;
    final ArrayList<Integer> scopeList = new ArrayList<Integer>();
    scopeList.add(null);
    final Set<String> catIds = null;
    final String chartId = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getChartDataforBIandMDAsync",
            Reflector.forName("com.firstrain.frapi.domain.ChartSpec"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.Set"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(objectUnderTest, spec, qList, scopeList, catIds, chartId);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "val$spec"));
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    assertEquals(arrayList, Reflector.getInstanceField(retval, "val$scopeList"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNotNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "MAX_RELATED_ENTITY"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "SEARCHTOKEN_COUNT"));
    assertNotNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "accelerometerServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "regionExcelUtilImpl"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "TRENDING_COUNT"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyEndingWords"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "treeMapMinNode"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "FACET_SORT_COUNT"));
    assertEquals(
        0L,
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    final HashMap<String, ChartCountSummary> hashMap1 = new HashMap<String, ChartCountSummary>();
    assertEquals(
        hashMap1,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "docSummaryMap"));
    assertNotNull(
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(Reflector.getInstanceField(retval, "val$chartId"));
    assertNull(Reflector.getInstanceField(retval, "val$catIds"));
    assertNull(Reflector.getInstanceField(retval, "val$qList"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getChartDataforGEOAsyncInputNullNullNullOutputNotNull() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    final AccelerometerServiceRepository accelerometerServiceRepository =
        (AccelerometerServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.AccelerometerServiceRepository");
    Reflector.setField(
        objectUnderTest, "accelerometerServiceRepository", accelerometerServiceRepository);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final List<String> qList = null;
    final List<Integer> scopeList = null;
    final String chartId = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getChartDataforGEOAsync",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>) methodUnderTest.invoke(objectUnderTest, qList, scopeList, chartId);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNotNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "MAX_RELATED_ENTITY"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "SEARCHTOKEN_COUNT"));
    assertNotNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "accelerometerServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "regionExcelUtilImpl"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "TRENDING_COUNT"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyEndingWords"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "treeMapMinNode"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "FACET_SORT_COUNT"));
    assertEquals(
        0L,
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "docSummaryMap"));
    assertNotNull(
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(Reflector.getInstanceField(retval, "val$chartId"));
    assertNull(Reflector.getInstanceField(retval, "val$scopeList"));
    assertNull(Reflector.getInstanceField(retval, "val$qList"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({GraphSet.class, VisualizationServiceImpl.class, PerfMonitor.class})
  @Test
  public void getChartDataforGEOInput0NullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    final HashMap<String, ChartCountSummary> hashMap = new HashMap<String, ChartCountSummary>();
    Reflector.setField(objectUnderTest, "docSummaryMap", hashMap);
    objectUnderTest.taskExecutor = null;
    final ArrayList<String> qList = new ArrayList<String>();
    final List<Integer> scopeList = null;
    final String chartId = null;
    final GraphSet graphSet = PowerMockito.mock(GraphSet.class);
    PowerMockito.whenNew(GraphSet.class).withNoArguments().thenReturn(graphSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getChartDataforGEO",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final GraphSet retval =
        (GraphSet) methodUnderTest.invoke(objectUnderTest, qList, scopeList, chartId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({GraphSet.class, VisualizationServiceImpl.class, PerfMonitor.class})
  @Test
  public void getChartDataforGEOInputNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    final HashMap<String, ChartCountSummary> hashMap = new HashMap<String, ChartCountSummary>();
    Reflector.setField(objectUnderTest, "docSummaryMap", hashMap);
    objectUnderTest.taskExecutor = null;
    final List<String> qList = null;
    final List<Integer> scopeList = null;
    final String chartId = null;
    final GraphSet graphSet = PowerMockito.mock(GraphSet.class);
    PowerMockito.whenNew(GraphSet.class).withNoArguments().thenReturn(graphSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getChartDataforGEO",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final GraphSet retval =
        (GraphSet) methodUnderTest.invoke(objectUnderTest, qList, scopeList, chartId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getChartDataforMonitorGEOandTTAsyncInput1NullNullZeroNullOutputNotNull()
      throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    final AccelerometerServiceRepository accelerometerServiceRepository =
        (AccelerometerServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.AccelerometerServiceRepository");
    Reflector.setField(
        objectUnderTest, "accelerometerServiceRepository", accelerometerServiceRepository);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final ArrayList<Items> itemList = new ArrayList<Items>();
    itemList.add(null);
    final List<String> qList = null;
    final List<Integer> scopeList = null;
    final int nodeCount = 0;
    final String chartId = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getChartDataforMonitorGEOandTTAsync",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(objectUnderTest, itemList, qList, scopeList, nodeCount, chartId);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$qList"));
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    assertEquals(arrayList, Reflector.getInstanceField(retval, "val$itemList"));
    assertEquals(0, Reflector.getInstanceField(retval, "val$nodeCount"));
    assertNull(Reflector.getInstanceField(retval, "val$chartId"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNotNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "MAX_RELATED_ENTITY"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "SEARCHTOKEN_COUNT"));
    assertNotNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "accelerometerServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "regionExcelUtilImpl"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "TRENDING_COUNT"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyEndingWords"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "treeMapMinNode"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "FACET_SORT_COUNT"));
    assertEquals(
        0L,
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "docSummaryMap"));
    assertNull(
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(Reflector.getInstanceField(retval, "val$scopeList"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({GraphSet.class, VisualizationServiceImpl.class, PerfMonitor.class})
  @Test
  public void getChartDataforMonitorGEOandTTInputNull0NullZeroNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final List<Items> itemList = null;
    final ArrayList<String> qList = new ArrayList<String>();
    final List<Integer> scopeList = null;
    final int nodeCount = 0;
    final String chartId = null;
    final GraphSet graphSet = PowerMockito.mock(GraphSet.class);
    PowerMockito.whenNew(GraphSet.class).withNoArguments().thenReturn(graphSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getChartDataforMonitorGEOandTT",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final GraphSet retval =
        (GraphSet)
            methodUnderTest.invoke(objectUnderTest, itemList, qList, scopeList, nodeCount, chartId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({GraphSet.class, VisualizationServiceImpl.class, PerfMonitor.class})
  @Test
  public void getChartDataforMonitorGEOandTTInputNullNullNullZeroNullOutputNotNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final List<Items> itemList = null;
    final List<String> qList = null;
    final List<Integer> scopeList = null;
    final int nodeCount = 0;
    final String chartId = null;
    final GraphSet graphSet = PowerMockito.mock(GraphSet.class);
    PowerMockito.whenNew(GraphSet.class).withNoArguments().thenReturn(graphSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getChartDataforMonitorGEOandTT",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final GraphSet retval =
        (GraphSet)
            methodUnderTest.invoke(objectUnderTest, itemList, qList, scopeList, nodeCount, chartId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(ChartCountSummary.class)
  @Test
  public void getItemForTreemMapGraphInput0NotNullOutputNull() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final HashMap<Long, Items> itemMap = new HashMap<Long, Items>();
    final ChartCountSummary ccsObj = PowerMockito.mock(ChartCountSummary.class);
    final Method getSearchIdMethod =
        DTUMemberMatcher.method(ChartCountSummary.class, "getSearchId");
    PowerMockito.doReturn(2_147_483_648L).when(ccsObj, getSearchIdMethod).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getItemForTreemMapGraph",
            Reflector.forName("java.util.Map"),
            Reflector.forName("com.firstrain.frapi.domain.ChartCountSummary"));
    methodUnderTest.setAccessible(true);
    final Items retval = (Items) methodUnderTest.invoke(objectUnderTest, itemMap, ccsObj);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Items.class, VisualizationServiceImpl.class, ChartCountSummary.class,
    IEntityInfoCache.class, EntityBaseServiceRepository.class, IEntityInfo.class
  })
  @Test
  public void getItemForTreemMapGraphInputNullNotNullOutputNotNull() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getNameMethod = DTUMemberMatcher.method(IEntityInfo.class, "getName");
    PowerMockito.doReturn(null).when(iEntityInfo, getNameMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSearchToken");
    PowerMockito.doReturn("\"").when(iEntityInfo, getSearchTokenMethod).withNoArguments();
    final Method getScopeMethod = DTUMemberMatcher.method(IEntityInfo.class, "getScope");
    PowerMockito.doReturn(5).when(iEntityInfo, getScopeMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    final RegionExcelUtilImpl regionExcelUtilImpl = new RegionExcelUtilImpl();
    Reflector.setField(regionExcelUtilImpl, "regionNameVsSearchToken", null);
    final EntityBaseServiceRepository entityBaseServiceRepository1 =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    Reflector.setField(
        regionExcelUtilImpl, "entityBaseServiceRepository", entityBaseServiceRepository1);
    Reflector.setField(regionExcelUtilImpl, "regionVsParentRegion", null);
    Reflector.setField(regionExcelUtilImpl, "regionVsCountryCode", null);
    final ArrayList<RegionExcelUtilImpl.Region> arrayList =
        new ArrayList<RegionExcelUtilImpl.Region>();
    Reflector.setField(regionExcelUtilImpl, "regions", arrayList);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", regionExcelUtilImpl);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final Map<Long, Items> itemMap = null;
    final ChartCountSummary ccsObj = PowerMockito.mock(ChartCountSummary.class);
    final Method getEntityIdMethod =
        DTUMemberMatcher.method(ChartCountSummary.class, "getEntityId");
    PowerMockito.doReturn(null).when(ccsObj, getEntityIdMethod).withNoArguments();
    final Items items = PowerMockito.mock(Items.class);
    PowerMockito.whenNew(Items.class).withNoArguments().thenReturn(items);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getItemForTreemMapGraph",
            Reflector.forName("java.util.Map"),
            Reflector.forName("com.firstrain.frapi.domain.ChartCountSummary"));
    methodUnderTest.setAccessible(true);
    final Items retval = (Items) methodUnderTest.invoke(objectUnderTest, itemMap, ccsObj);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    IEntityInfoCache.class,
    ChartCountSummary.class,
    EntityBaseServiceRepository.class
  })
  @Test
  public void getItemForTreemMapGraphInputNullNotNullOutputNull() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(null)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    final RegionExcelUtilImpl regionExcelUtilImpl = new RegionExcelUtilImpl();
    Reflector.setField(regionExcelUtilImpl, "regionNameVsSearchToken", null);
    final EntityBaseServiceRepository entityBaseServiceRepository1 =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    Reflector.setField(
        regionExcelUtilImpl, "entityBaseServiceRepository", entityBaseServiceRepository1);
    Reflector.setField(regionExcelUtilImpl, "regionVsParentRegion", null);
    Reflector.setField(regionExcelUtilImpl, "regionVsCountryCode", null);
    final ArrayList<RegionExcelUtilImpl.Region> arrayList =
        new ArrayList<RegionExcelUtilImpl.Region>();
    Reflector.setField(regionExcelUtilImpl, "regions", arrayList);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", regionExcelUtilImpl);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final Map<Long, Items> itemMap = null;
    final ChartCountSummary ccsObj = PowerMockito.mock(ChartCountSummary.class);
    final Method getEntityIdMethod =
        DTUMemberMatcher.method(ChartCountSummary.class, "getEntityId");
    PowerMockito.doReturn(null).when(ccsObj, getEntityIdMethod).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getItemForTreemMapGraph",
            Reflector.forName("java.util.Map"),
            Reflector.forName("com.firstrain.frapi.domain.ChartCountSummary"));
    methodUnderTest.setAccessible(true);
    final Items retval = (Items) methodUnderTest.invoke(objectUnderTest, itemMap, ccsObj);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrSearcher.class,
    VisualizationServiceImpl.class,
    SearchSpec.class,
    FR_ArrayUtils.class,
    EntityBaseServiceRepository.class
  })
  @Test
  public void getSearchResultInputNullNullZeroFalseOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FR_ArrayUtils.class);

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    final RegionExcelUtilImpl regionExcelUtilImpl = new RegionExcelUtilImpl();
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", regionExcelUtilImpl);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final List<String> qList = null;
    final List<Integer> scopeList = null;
    final int days = 0;
    final boolean needSearchSuggestion = false;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setStartMethod = DTUMemberMatcher.method(SearchSpec.class, "setStart", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setStartMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "insertTimeMarkers", null);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "needHotListRegion", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "hotlistScope", 0);
    Reflector.setField(searchSpec, "needHotListCompany", false);
    Reflector.setField(searchSpec, "needHotListTopic", false);
    Reflector.setField(searchSpec, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec, "facetInsertTimeMarkers", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "hotListRows", 0);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "insertTimeMarkers", null);
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    Reflector.setField(searchSpec1, "needHotListRegion", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "days", 0);
    Reflector.setField(searchSpec1, "hotlistScope", 0);
    Reflector.setField(searchSpec1, "needHotListCompany", false);
    Reflector.setField(searchSpec1, "needHotListTopic", false);
    Reflector.setField(searchSpec1, "optimalScopeAndDays", false);
    Reflector.setField(searchSpec1, "facetInsertTimeMarkers", null);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "hotListRows", 0);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);
    final Method collectionToIntArrayMethod =
        DTUMemberMatcher.method(FR_ArrayUtils.class, "collectionToIntArray", Collection.class);
    PowerMockito.doReturn(null)
        .when(FR_ArrayUtils.class, collectionToIntArrayMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));
    final Method collectionToStringArrayMethod =
        DTUMemberMatcher.method(FR_ArrayUtils.class, "collectionToStringArray", Collection.class);
    PowerMockito.doReturn(null)
        .when(FR_ArrayUtils.class, collectionToStringArrayMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getSearchResult",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.util.List"),
            Reflector.forName("int"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final SearchResult retval =
        (SearchResult)
            methodUnderTest.invoke(objectUnderTest, qList, scopeList, days, needSearchSuggestion);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTreeChartDataAsyncInputNotNullZeroNullOutputNotNull() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final ChartDetails cd =
        (ChartDetails) Reflector.getInstance("com.firstrain.frapi.domain.ChartDetails");
    final int nodeCount = 0;
    final String chartId = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTreeChartDataAsync",
            Reflector.forName("com.firstrain.frapi.domain.ChartDetails"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>) methodUnderTest.invoke(objectUnderTest, cd, nodeCount, chartId);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "monitorServiceRepository"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "MAX_RELATED_ENTITY"));
    assertEquals(
        0,
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "SEARCHTOKEN_COUNT"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "accelerometerServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "regionExcelUtilImpl"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "TRENDING_COUNT"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyEndingWords"));
    assertEquals(
        0,
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "treeMapMinNode"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "FACET_SORT_COUNT"));
    assertEquals(
        0L,
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "docSummaryMap"));
    assertNull(
        ((VisualizationServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(Reflector.getInstanceField(retval, "val$chartId"));
    assertEquals(0, Reflector.getInstanceField(retval, "val$nodeCount"));
    assertNotNull(Reflector.getInstanceField(retval, "val$cd"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(HotListBucket.class)
  @Test
  public void getTrendingRegionInputNotNullOutput0() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final SearchResult searchResult =
        (SearchResult) Reflector.getInstance("com.firstrain.solr.client.SearchResult");
    final HotListBucket hotListBucket = PowerMockito.mock(HotListBucket.class);
    final ArrayList arrayList = new ArrayList();
    final Method getEntriesMethod = DTUMemberMatcher.method(HotListBucket.class, "getEntries");
    PowerMockito.doReturn(arrayList).when(hotListBucket, getEntriesMethod).withNoArguments();
    final Method sizeMethod = DTUMemberMatcher.method(HotListBucket.class, "size");
    PowerMockito.doReturn(1_073_741_824).when(hotListBucket, sizeMethod).withNoArguments();
    Reflector.setField(searchResult, "facetRegions", hotListBucket);
    Reflector.setField(searchResult, "buckets", null);
    Reflector.setField(searchResult, "suggestedSearchGroups", null);
    final HotListBucket hotListBucket1 = PowerMockito.mock(HotListBucket.class);
    Reflector.setField(searchResult, "facetCompanies", hotListBucket1);
    Reflector.setField(searchResult, "facetTopics", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTrendingRegion", Reflector.forName("com.firstrain.solr.client.SearchResult"));
    methodUnderTest.setAccessible(true);
    final List<ChartCountSummary> retval =
        (List<ChartCountSummary>) methodUnderTest.invoke(objectUnderTest, searchResult);

    // Assert
    final ArrayList<ChartCountSummary> arrayList1 = new ArrayList<ChartCountSummary>();
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTrendingRegionInputNotNullOutputNull() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final SearchResult searchResult =
        (SearchResult) Reflector.getInstance("com.firstrain.solr.client.SearchResult");
    Reflector.setField(searchResult, "facetRegions", null);
    Reflector.setField(searchResult, "buckets", null);
    Reflector.setField(searchResult, "suggestedSearchGroups", null);
    final HotListBucket hotListBucket =
        (HotListBucket) Reflector.getInstance("com.firstrain.solr.client.HotListBucket");
    Reflector.setField(searchResult, "facetCompanies", hotListBucket);
    Reflector.setField(searchResult, "facetTopics", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTrendingRegion", Reflector.forName("com.firstrain.solr.client.SearchResult"));
    methodUnderTest.setAccessible(true);
    final List<ChartCountSummary> retval =
        (List<ChartCountSummary>) methodUnderTest.invoke(objectUnderTest, searchResult);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(HotListBucket.class)
  @Test
  public void getTrendingRegionInputNotNullOutputNull2() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    objectUnderTest.taskExecutor = null;
    final SearchResult searchResult =
        (SearchResult) Reflector.getInstance("com.firstrain.solr.client.SearchResult");
    final HotListBucket hotListBucket = PowerMockito.mock(HotListBucket.class);
    final Method sizeMethod = DTUMemberMatcher.method(HotListBucket.class, "size");
    PowerMockito.doReturn(0).when(hotListBucket, sizeMethod).withNoArguments();
    Reflector.setField(searchResult, "facetRegions", hotListBucket);
    Reflector.setField(searchResult, "buckets", null);
    Reflector.setField(searchResult, "suggestedSearchGroups", null);
    final HotListBucket hotListBucket1 = PowerMockito.mock(HotListBucket.class);
    Reflector.setField(searchResult, "facetCompanies", hotListBucket1);
    Reflector.setField(searchResult, "facetTopics", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTrendingRegion", Reflector.forName("com.firstrain.solr.client.SearchResult"));
    methodUnderTest.setAccessible(true);
    final List<ChartCountSummary> retval =
        (List<ChartCountSummary>) methodUnderTest.invoke(objectUnderTest, searchResult);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void isCycleInRecurssionInputNull0OutputFalse() throws Exception {

    // Arrange
    final VisualizationServiceImpl objectUnderTest = new VisualizationServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_RELATED_ENTITY", 0);
    Reflector.setField(objectUnderTest, "SEARCHTOKEN_COUNT", 0);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "TRENDING_COUNT", 0);
    Reflector.setField(objectUnderTest, "companyEndingWords", null);
    Reflector.setField(objectUnderTest, "treeMapMinNode", 0);
    Reflector.setField(objectUnderTest, "FACET_SORT_COUNT", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "docSummaryMap", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final String parentEntity = null;
    final java.util.HashSet<String> allHirearchyOfEntity = new java.util.HashSet<String>();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.VisualizationServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "isCycleInRecurssion",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.util.Set"));
    methodUnderTest.setAccessible(true);
    final boolean retval =
        (boolean) methodUnderTest.invoke(objectUnderTest, parentEntity, allHirearchyOfEntity);

    // Assert
    assertEquals(false, retval);
  }
}
