/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:19:03 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.anyBoolean;
import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import com.firstrain.frapi.domain.BlendDunsInput;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.repository.DnbRepository;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class DnbServiceImplESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		DnbServiceImpl.main(null);
	}

	@Test(timeout = 4000)
	public void test1() throws Exception {
		DnbServiceImpl dnbServiceImpl0 = new DnbServiceImpl();
		DnbRepository dnbRepository0 = mock(DnbRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(dnbServiceImpl0, com.firstrain.frapi.service.impl.DnbServiceImpl.class, "dnbRepository",
        dnbRepository0);
		Injector.validateBean(dnbServiceImpl0, com.firstrain.frapi.service.impl.DnbServiceImpl.class);
		BlendDunsInput blendDunsInput0 = new BlendDunsInput();
		Entity entity0 = dnbServiceImpl0.getDnbEntity("~", blendDunsInput0);
		assertNull(entity0);
	}

	@Test(timeout = 4000)
	public void test2() throws Exception {
		DnbServiceImpl dnbServiceImpl0 = new DnbServiceImpl();
		DnbRepository dnbRepository0 = mock(DnbRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(dnbRepository0)
				.getFRCompanyFromDnbCompanyId(anyString(), anyBoolean());
		Injector.inject(dnbServiceImpl0, com.firstrain.frapi.service.impl.DnbServiceImpl.class, "dnbRepository",
        dnbRepository0);
		Injector.validateBean(dnbServiceImpl0, com.firstrain.frapi.service.impl.DnbServiceImpl.class);
		BlendDunsInput blendDunsInput0 = new BlendDunsInput();
		Entity entity0 = dnbServiceImpl0.getDnbEntity("x8!", blendDunsInput0);
		assertNull(entity0);
	}

	@Test(timeout = 4000)
	public void test3() throws Exception {
		DnbServiceImpl dnbServiceImpl0 = new DnbServiceImpl();
		DnbRepository dnbRepository0 = mock(DnbRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(dnbRepository0)
				.getFRCompanyFromDnbCompanyId(anyString(), anyBoolean());
		Injector.inject(dnbServiceImpl0, com.firstrain.frapi.service.impl.DnbServiceImpl.class, "dnbRepository",
        dnbRepository0);
		Injector.validateBean(dnbServiceImpl0, com.firstrain.frapi.service.impl.DnbServiceImpl.class);
		List<Entity> list0 = dnbServiceImpl0.getDnbEntities("1h~|s\b~6iU)oWQz]");
		assertNotNull(list0);
		assertEquals(3, list0.size());
	}

	@Test(timeout = 4000)
	public void test4() throws Exception {
		DnbServiceImpl dnbServiceImpl0 = new DnbServiceImpl();
		DnbRepository dnbRepository0 = mock(DnbRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(dnbServiceImpl0, com.firstrain.frapi.service.impl.DnbServiceImpl.class, "dnbRepository",
        dnbRepository0);
		Injector.validateBean(dnbServiceImpl0, com.firstrain.frapi.service.impl.DnbServiceImpl.class);
		List<Entity> list0 = dnbServiceImpl0.getDnbEntities("~");
		assertNull(list0);
	}
}
