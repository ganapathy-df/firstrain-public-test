/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:22:45 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;

import com.firstrain.frapi.domain.Document;
import com.firstrain.frapi.pojo.wrapper.BaseSet;
import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import com.firstrain.frapi.pojo.wrapper.EventSet;
import com.firstrain.frapi.pojo.wrapper.TweetSet;
import com.firstrain.frapi.util.DateBucketUtils;
import java.util.List;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class EntityProcessingServiceImplESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		EntityProcessingServiceImpl entityProcessingServiceImpl0 = new EntityProcessingServiceImpl();
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector.inject(entityProcessingServiceImpl0,
				com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class,
				"dateBucketUtils", dateBucketUtils0);
		Injector
				.validateBean(entityProcessingServiceImpl0,
						com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class);
		TweetSet tweetSet0 = new TweetSet();
		TweetSet tweetSet1 = entityProcessingServiceImpl0.getTweetsWithId(tweetSet0);
		assertSame(tweetSet1, tweetSet0);
	}

	@Test(timeout = 4000)
	public void test1() throws Exception {
		EntityProcessingServiceImpl entityProcessingServiceImpl0 = new EntityProcessingServiceImpl();
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector.inject(entityProcessingServiceImpl0,
				com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class,
				"dateBucketUtils", dateBucketUtils0);
		Injector
				.validateBean(entityProcessingServiceImpl0,
						com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class);
		TweetSet tweetSet0 = entityProcessingServiceImpl0.getTweetsWithId(null);
		assertNull(tweetSet0);
	}

	@Test(timeout = 4000)
	public void test2() throws Exception {
		EntityProcessingServiceImpl entityProcessingServiceImpl0 = new EntityProcessingServiceImpl();
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector.inject(entityProcessingServiceImpl0,
				com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class,
				"dateBucketUtils", dateBucketUtils0);
		Injector
				.validateBean(entityProcessingServiceImpl0,
						com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class);
		EventSet eventSet0 = new EventSet();
		EventSet eventSet1 = entityProcessingServiceImpl0.getEventSetWithId(eventSet0);
		assertNull(eventSet1);
	}

	@Test(timeout = 4000)
	public void test3() throws Exception {
		EntityProcessingServiceImpl entityProcessingServiceImpl0 = new EntityProcessingServiceImpl();
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector.inject(entityProcessingServiceImpl0,
				com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class,
				"dateBucketUtils", dateBucketUtils0);
		Injector
				.validateBean(entityProcessingServiceImpl0,
						com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class);
		EventSet eventSet0 = new EventSet();
		DateBucketUtils.BucketSpec dateBucketUtils_BucketSpec0 = new DateBucketUtils.BucketSpec();
		EventSet eventSet1 = entityProcessingServiceImpl0
				.getEventSetWithDateBucketing(eventSet0, dateBucketUtils_BucketSpec0);
		assertNull(eventSet1.getEventType());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test4() throws Exception {
		EntityProcessingServiceImpl entityProcessingServiceImpl0 = new EntityProcessingServiceImpl();
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector.inject(entityProcessingServiceImpl0,
				com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class,
				"dateBucketUtils", dateBucketUtils0);
		Injector
				.validateBean(entityProcessingServiceImpl0,
						com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class);
		DateBucketUtils.BucketSpec dateBucketUtils_BucketSpec0 = new DateBucketUtils.BucketSpec();
		entityProcessingServiceImpl0
				.getEventSetWithDateBucketing(null, dateBucketUtils_BucketSpec0);
	}

	@Test(timeout = 4000)
	public void test5() throws Exception {
		EntityProcessingServiceImpl entityProcessingServiceImpl0 = new EntityProcessingServiceImpl();
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector.inject(entityProcessingServiceImpl0,
				com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class,
				"dateBucketUtils", dateBucketUtils0);
		Injector
				.validateBean(entityProcessingServiceImpl0,
						com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class);
		BaseSet.SectionType baseSet_SectionType0 = BaseSet.SectionType.IT;
		DocumentSet documentSet0 = new DocumentSet(null, baseSet_SectionType0);
		documentSet0.setFiling(true);
		DocumentSet documentSet1 = entityProcessingServiceImpl0.getDocumentSetWithId(documentSet0);
		assertNull(documentSet1.getCaption());
	}

	@Test(timeout = 4000)
	public void test6() throws Exception {
		EntityProcessingServiceImpl entityProcessingServiceImpl0 = new EntityProcessingServiceImpl();
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector.inject(entityProcessingServiceImpl0,
				com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class,
				"dateBucketUtils", dateBucketUtils0);
		Injector
				.validateBean(entityProcessingServiceImpl0,
						com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class);
		DocumentSet documentSet0 = entityProcessingServiceImpl0
				.getDocumentSetWithId(null);
		assertNull(documentSet0);
	}

	@Test(timeout = 4000)
	public void test7() throws Exception {
		EntityProcessingServiceImpl entityProcessingServiceImpl0 = new EntityProcessingServiceImpl();
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector.inject(entityProcessingServiceImpl0,
				com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class,
				"dateBucketUtils", dateBucketUtils0);
		Injector
				.validateBean(entityProcessingServiceImpl0,
						com.firstrain.frapi.service.impl.EntityProcessingServiceImpl.class);
		BaseSet.SectionType baseSet_SectionType0 = BaseSet.SectionType.IT;
		DocumentSet documentSet0 = new DocumentSet(null, baseSet_SectionType0);
		DocumentSet documentSet1 = entityProcessingServiceImpl0.getDocumentSetWithId(documentSet0);
		assertSame(documentSet1, documentSet0);
	}
}
