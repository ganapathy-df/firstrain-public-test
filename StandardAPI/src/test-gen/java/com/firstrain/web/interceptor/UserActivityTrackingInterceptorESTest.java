/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 18:39:32 GMT 2018
 */

package com.firstrain.web.interceptor;

import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import com.firstrain.web.service.core.UserActivityService;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.SimpleHttpConnectionManager;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

public class UserActivityTrackingInterceptorESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		UserActivityTrackingInterceptor userActivityTrackingInterceptor0 = new UserActivityTrackingInterceptor();
		UserActivityService userActivityService0 = new UserActivityService();
		HttpClient httpClient0 = new HttpClient();
		Injector.inject(userActivityService0, com.firstrain.web.service.core.UserActivityService.class, "httpClient",
				httpClient0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(userActivityService0, com.firstrain.web.service.core.UserActivityService.class, "taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(userActivityService0,
				com.firstrain.web.service.core.UserActivityService.class);
		Injector
				.inject(userActivityTrackingInterceptor0,
						com.firstrain.web.interceptor.UserActivityTrackingInterceptor.class,
						"userActivityService", userActivityService0);
		Injector.validateBean(userActivityTrackingInterceptor0,
				com.firstrain.web.interceptor.UserActivityTrackingInterceptor.class);
		HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class,
				new ViolatedAssumptionAnswer());
		HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(
				httpServletRequest0);
		HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class,
				new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(
				httpServletResponse0);
		boolean boolean0 = userActivityTrackingInterceptor0
				.preHandle(httpServletRequestWrapper0, httpServletResponseWrapper0,
						httpServletRequestWrapper0);
		assertTrue(boolean0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test1() throws Exception {
		UserActivityTrackingInterceptor userActivityTrackingInterceptor0 = new UserActivityTrackingInterceptor();
		UserActivityService userActivityService0 = new UserActivityService();
		SimpleHttpConnectionManager simpleHttpConnectionManager0 = new SimpleHttpConnectionManager();
		HttpClient httpClient0 = new HttpClient(simpleHttpConnectionManager0);
		Injector.inject(userActivityService0, com.firstrain.web.service.core.UserActivityService.class, "httpClient",
				httpClient0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(userActivityService0, com.firstrain.web.service.core.UserActivityService.class, "taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(userActivityService0,
				com.firstrain.web.service.core.UserActivityService.class);
		Injector
				.inject(userActivityTrackingInterceptor0,
						com.firstrain.web.interceptor.UserActivityTrackingInterceptor.class,
						"userActivityService", userActivityService0);
		Injector.validateBean(userActivityTrackingInterceptor0,
				com.firstrain.web.interceptor.UserActivityTrackingInterceptor.class);
		RedirectView redirectView0 = new RedirectView();
		ModelAndView modelAndView0 = new ModelAndView(redirectView0, null);
		userActivityTrackingInterceptor0
				.postHandle(null, null, null,
						modelAndView0);
	}

	@Test(timeout = 4000)
	public void test2() throws Exception {
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		UserActivityTrackingInterceptor userActivityTrackingInterceptor0 = new UserActivityTrackingInterceptor();
		UserActivityService userActivityService0 = new UserActivityService();
		HttpClient httpClient0 = new HttpClient();
		Injector.inject(userActivityService0, com.firstrain.web.service.core.UserActivityService.class, "httpClient",
				httpClient0);
		Injector.inject(userActivityService0, com.firstrain.web.service.core.UserActivityService.class, "taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(userActivityService0,
				com.firstrain.web.service.core.UserActivityService.class);
		Injector
				.inject(userActivityTrackingInterceptor0,
						com.firstrain.web.interceptor.UserActivityTrackingInterceptor.class,
						"userActivityService", userActivityService0);
		Injector.validateBean(userActivityTrackingInterceptor0,
				com.firstrain.web.interceptor.UserActivityTrackingInterceptor.class);
		HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class,
				new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(
				httpServletResponse0);
		ModelAndView modelAndView0 = new ModelAndView("http.protocol.unambiguous-statusline");
		HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(httpServletRequest0).getAttribute(anyString());
		doReturn(null, (String) null).when(httpServletRequest0).getParameter(anyString());
		HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(
				httpServletRequest0);
		userActivityTrackingInterceptor0
				.postHandle(httpServletRequestWrapper0, httpServletResponseWrapper0, "?", modelAndView0);
		assertEquals("http.protocol.unambiguous-statusline", modelAndView0.getViewName());
	}
}
