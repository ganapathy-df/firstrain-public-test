package com.firstrain.web.controller.core;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.service.EmailService;
import com.firstrain.web.service.core.ResponseDecoratorService;
import java.lang.reflect.Method;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class EmailControllerDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EmailController */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void getEmailBriefInputNotNullNullNullNotNullOutputNullPointerException()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EmailController objectUnderTest =
        (EmailController)
            Reflector.getInstance("com.firstrain.web.controller.core.EmailController");
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final ResponseDecoratorService responseDecoratorService =
        (ResponseDecoratorService)
            Reflector.getInstance("com.firstrain.web.service.core.ResponseDecoratorService");
    Reflector.setField(objectUnderTest, "responseDecoratorService", responseDecoratorService);
    final EmailService emailService =
        (EmailService) Reflector.getInstance("com.firstrain.frapi.service.EmailService");
    Reflector.setField(objectUnderTest, "emailService", emailService);
    Reflector.setField(objectUnderTest, "ftlService", null);
    final HttpServletRequest request =
        (HttpServletRequest) Reflector.getInstance("javax.servlet.http.HttpServletRequest");
    final HttpServletResponse response = null;
    final String emailId = null;
    final String resultsCSV = "";
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getEmailBrief(request, response, emailId, resultsCSV);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void getEmailBriefInputNullNullNullNotNullOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EmailController objectUnderTest =
        (EmailController)
            Reflector.getInstance("com.firstrain.web.controller.core.EmailController");
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final ResponseDecoratorService responseDecoratorService =
        (ResponseDecoratorService)
            Reflector.getInstance("com.firstrain.web.service.core.ResponseDecoratorService");
    Reflector.setField(objectUnderTest, "responseDecoratorService", responseDecoratorService);
    Reflector.setField(objectUnderTest, "emailService", null);
    Reflector.setField(objectUnderTest, "ftlService", null);
    final HttpServletRequest request = null;
    final HttpServletResponse response = null;
    final String emailId = null;
    final String resultsCSV = "";
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getEmailBrief(request, response, emailId, resultsCSV);

    // Method is not expected to return due to exception thrown
  }
}
