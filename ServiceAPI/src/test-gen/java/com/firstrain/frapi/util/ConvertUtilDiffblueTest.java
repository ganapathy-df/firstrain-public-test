package com.firstrain.frapi.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.Tags;
import com.firstrain.db.obj.UserGroupMap.MembershipType;
import com.firstrain.db.obj.Users;
import com.firstrain.frapi.domain.Document;
import com.firstrain.frapi.domain.Monitor;
import com.firstrain.frapi.domain.User;
import com.firstrain.frapi.events.IEvents;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.pojo.Event;
import com.firstrain.frapi.util.DefaultEnums.DateBucketingMode;
import com.firstrain.frapi.util.DefaultEnums.OwnedByType;
import com.firstrain.frapi.util.DefaultEnums.TagType;
import com.firstrain.solr.client.DocCatEntry;
import com.firstrain.solr.client.DocEntry;
import com.firstrain.solr.client.EntityEntry;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class ConvertUtilDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: ConvertUtil */
  // Test generated by Diffblue Deeptest.

  @Test
  public void convertDbUserToDomainUserInputNullNotNullOutputNull() throws Exception {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final Users dbUser = null;
    final MembershipType type =
        (MembershipType) Reflector.getInstance("com.firstrain.db.obj.UserGroupMap$MembershipType");

    // Act
    final User retval = objectUnderTest.convertDbUserToDomainUser(dbUser, type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ConvertUtil.class, Logger.class})
  @Test
  public void convertDocumentPOJOFromDocEntryObjectInputNullOutputNotNull() throws Exception {

    // Arrange
    final ConvertUtil objectUnderTest =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final DocEntry doc = null;
    final Document document = PowerMockito.mock(Document.class);
    PowerMockito.whenNew(Document.class).withNoArguments().thenReturn(document);

    // Act
    final Document retval = objectUnderTest.convertDocumentPOJOFromDocEntryObject(doc);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void convertEntityFromEntityEntryInputNullZeroZeroOutputNull() {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final EntityEntry entry = null;
    final short band = (short) 0;
    final short relevance = (short) 0;

    // Act
    final Entity retval = objectUnderTest.convertEntityFromEntityEntry(entry, band, relevance);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void convertToBaseDateBucketingModeInputNullOutputNull() {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final DateBucketingMode mode = null;

    // Act
    final DateBucketingMode retval = objectUnderTest.convertToBaseDateBucketingMode(mode);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void convertToBaseMembershipTypeInputNullOutputNull() {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final MembershipType type = null;

    // Act
    final com.firstrain.frapi.util.DefaultEnums.MembershipType retval =
        objectUnderTest.convertToBaseMembershipType(type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void convertToBaseOwnedByTypeInputNullOutputNull() {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final com.firstrain.db.obj.BaseItem.OwnedByType type = null;

    // Act
    final OwnedByType retval = objectUnderTest.convertToBaseOwnedByType(type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void convertToBaseTagTypeInputNullOutputNull() {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final com.firstrain.db.obj.Tags.TagType type = null;

    // Act
    final TagType retval = objectUnderTest.convertToBaseTagType(type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ConvertUtil.class, Logger.class})
  @Test
  public void convertToBaseTypeForGraphInputNullFalseOutputNotNull() throws Exception {

    // Arrange
    final ConvertUtil objectUnderTest =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final IEvents event = null;
    final boolean isSignal = false;
    final Event event2 = PowerMockito.mock(Event.class);
    final Event event1 = PowerMockito.mock(Event.class);
    PowerMockito.whenNew(Event.class).withNoArguments().thenReturn(event1).thenReturn(event2);

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.ConvertUtil");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "convertToBaseTypeForGraph",
            Reflector.forName("com.firstrain.frapi.events.IEvents"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final Event retval = (Event) methodUnderTest.invoke(objectUnderTest, event, isSignal);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void convertToServiceDateBucketingModeInputNullOutputNull() {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final DateBucketingMode mode = null;

    // Act
    final DateBucketingMode retval = objectUnderTest.convertToServiceDateBucketingMode(mode);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void convertToTagsInputNullOutputNull() {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final Tags tag = null;

    // Act
    final Monitor retval = objectUnderTest.convertToTags(tag);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDomainUserFromDBUserInputNullOutputNull() {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final Users user = null;

    // Act
    final User retval = objectUnderTest.getDomainUserFromDBUser(user);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EntityEntry.class, DocCatEntry.class, ContentType.class})
  @Test
  public void getEntityPOJOListInput1NotNullTrueOutput0() throws Exception {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ArrayList<DocCatEntry> docEntryList = new ArrayList<DocCatEntry>();
    final DocCatEntry docCatEntry = PowerMockito.mock(DocCatEntry.class);
    final EntityEntry entityEntry = PowerMockito.mock(EntityEntry.class);
    final Method getIdMethod = DTUMemberMatcher.method(EntityEntry.class, "getId");
    PowerMockito.doReturn("7").when(entityEntry, getIdMethod).withNoArguments();
    final Method getEntityMethod = DTUMemberMatcher.method(DocCatEntry.class, "getEntity");
    PowerMockito.doReturn(entityEntry).when(docCatEntry, getEntityMethod).withNoArguments();
    Reflector.setField(docCatEntry, "relevanceNormalized", (short) 0);
    Reflector.setField(docCatEntry, "band", (short) 0);
    docEntryList.add(docCatEntry);
    final ContentType contentType = PowerMockito.mock(ContentType.class);
    final Method getIdMethod1 = DTUMemberMatcher.method(ContentType.class, "getId");
    PowerMockito.doReturn(6).when(contentType, getIdMethod1).withNoArguments();
    final boolean doCheck = true;

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.ConvertUtil");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntityPOJOList",
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.util.ContentType"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final List<Entity> retval =
        (List<Entity>) methodUnderTest.invoke(objectUnderTest, docEntryList, contentType, doCheck);

    // Assert
    final ArrayList<Entity> arrayList = new ArrayList<Entity>();
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Entity.class,
    DocCatEntry.class,
    ContentType.class,
    ConvertUtil.class,
    EntityEntry.class
  })
  @Test
  public void getEntityPOJOListInput1NotNullTrueOutput1() throws Exception {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ArrayList<DocCatEntry> docEntryList = new ArrayList<DocCatEntry>();
    final DocCatEntry docCatEntry = PowerMockito.mock(DocCatEntry.class);
    final EntityEntry entityEntry = PowerMockito.mock(EntityEntry.class);
    final Method getIdMethod = DTUMemberMatcher.method(EntityEntry.class, "getId");
    ((PowerMockitoStubber) PowerMockito.doReturn("7").doReturn(null))
        .when(entityEntry, getIdMethod)
        .withNoArguments();
    final Method getPrimaryTickerMethod =
        DTUMemberMatcher.method(EntityEntry.class, "getPrimaryTicker");
    PowerMockito.doReturn(null).when(entityEntry, getPrimaryTickerMethod).withNoArguments();
    final Method getNameMethod = DTUMemberMatcher.method(EntityEntry.class, "getName");
    PowerMockito.doReturn(null).when(entityEntry, getNameMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(EntityEntry.class, "getSearchToken");
    PowerMockito.doReturn(null).when(entityEntry, getSearchTokenMethod).withNoArguments();
    final Method getTypeMethod = DTUMemberMatcher.method(EntityEntry.class, "getType");
    PowerMockito.doReturn(768).when(entityEntry, getTypeMethod).withNoArguments();
    final Method getEntityMethod = DTUMemberMatcher.method(DocCatEntry.class, "getEntity");
    PowerMockito.doReturn(entityEntry).when(docCatEntry, getEntityMethod).withNoArguments();
    Reflector.setField(docCatEntry, "relevanceNormalized", (short) 0);
    Reflector.setField(docCatEntry, "band", (short) 0);
    docEntryList.add(docCatEntry);
    final ContentType contentType = PowerMockito.mock(ContentType.class);
    final Method getIdMethod1 = DTUMemberMatcher.method(ContentType.class, "getId");
    PowerMockito.doReturn(7).when(contentType, getIdMethod1).withNoArguments();
    final boolean doCheck = true;
    final Entity entity = PowerMockito.mock(Entity.class);
    PowerMockito.whenNew(Entity.class).withNoArguments().thenReturn(entity);

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.ConvertUtil");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntityPOJOList",
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.util.ContentType"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final List<Entity> retval =
        (List<Entity>) methodUnderTest.invoke(objectUnderTest, docEntryList, contentType, doCheck);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(0));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIdFromAbsoluteIdInputNullOutputNegative() throws Exception {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final String absoluteId = null;

    // Act
    final long retval = objectUnderTest.getIdFromAbsoluteId(absoluteId);

    // Assert
    assertEquals(-1L, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTitleInputNullNullFalseOutputNullPointerException() throws Exception {

    // Arrange
    final ConvertUtil objectUnderTest =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    final IEvents event = null;
    final String titleType = null;
    final boolean isSingleSearch = false;

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getTitle(event, titleType, isSingleSearch);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTrimmedSummaryInputNotNullNotNullOutputNotNull() throws Exception {

    // Arrange
    final ConvertUtil objectUnderTest = new ConvertUtil();
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final String summary = " !\' \" #";
    final DocEntry doc = (DocEntry) Reflector.getInstance("com.firstrain.solr.client.DocEntry");
    Reflector.setField(doc, "catEntries", null);
    Reflector.setField(doc, "title", "AAAAAAAA");
    Reflector.setField(doc, "matchedTopics", null);
    Reflector.setField(doc, "summary", null);
    Reflector.setField(doc, "bodyLength", 1767);
    Reflector.setField(doc, "docScore", 0);
    Reflector.setField(doc, "matchedCompanies", null);

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.ConvertUtil");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTrimmedSummary",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.solr.client.DocEntry"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(objectUnderTest, summary, doc);

    // Assert
    assertEquals(" !\' \" #...", retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void getTrimmedSummaryInputNotNullNotNullOutputNotNull2() throws Exception {

    // Arrange
    final ConvertUtil objectUnderTest =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(objectUnderTest, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(objectUnderTest, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(objectUnderTest, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final String summary = " !/ \" ###";
    final DocEntry doc = (DocEntry) Reflector.getInstance("com.firstrain.solr.client.DocEntry");
    Reflector.setField(doc, "catEntries", null);
    Reflector.setField(doc, "title", "AAAAAAAA");
    Reflector.setField(doc, "matchedTopics", null);
    Reflector.setField(doc, "summary", null);
    Reflector.setField(doc, "bodyLength", 58);
    Reflector.setField(doc, "docScore", 0);
    Reflector.setField(doc, "matchedCompanies", null);

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.ConvertUtil");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTrimmedSummary",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.solr.client.DocEntry"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(objectUnderTest, summary, doc);

    // Assert
    assertEquals(" !/ \"...", retval);
  }
}
