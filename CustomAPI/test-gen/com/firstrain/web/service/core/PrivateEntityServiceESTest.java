/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 15:55:16 GMT 2018
 */

package com.firstrain.web.service.core;

import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertNull;

import com.firstrain.db.obj.PrivateEntityList;
import com.firstrain.frapi.customapirepository.impl.PrivateEntityRepositoryImpl;
import com.firstrain.web.pojo.CreateInputBean;
import java.io.IOException;
import java.util.List;
import org.codehaus.jackson.JsonNode;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

public class PrivateEntityServiceESTest {

	@Test(timeout = 4000, expected = IllegalStateException.class)
	public void test00() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		privateEntityService0.updateState("4#q", "4#q");
	}

	@Test(timeout = 4000, expected = IllegalStateException.class)
	public void test01() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		privateEntityService0.updateDefinition("e", "^56f=M4?T", "^56f=M4?T", "^56f=M4?T");
	}

	@Test(timeout = 4000)
	public void test02() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		List<PrivateEntityList> list0 =
				privateEntityService0.getPrivateEntityListByTaxonomyDirective(null);
		assertNull(list0);
	}

	@Test(timeout = 4000, expected = IllegalStateException.class)
	public void test03() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		CreateInputBean createInputBean0 = arrangeData(privateEntityService0, searchTokenUtil0); 
		privateEntityService0.promote("enOmFHbE)]ZHdpB>a@", createInputBean0);
	}

	@Test(timeout = 4000, expected = IOException.class)
	public void test04() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		privateEntityService0.getJsonNodeRes("%gE4k(\"1");
	}

	@Test(timeout = 4000)
	public void test05() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		JsonNode jsonNode0 = privateEntityService0.getJsonNodeRes("");
		assertNull(jsonNode0);
	}

	@Test(timeout = 4000, expected = IllegalStateException.class)
	public void test06() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		privateEntityService0.getDefinition("");
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test07() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil.ResponseObj searchTokenUtil_ResponseObj0 =
				mock(SearchTokenUtil.ResponseObj.class, new ViolatedAssumptionAnswer());
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		doReturn(searchTokenUtil_ResponseObj0).when(searchTokenUtil0)
				.generateSearchToken(anyString());
		CreateInputBean createInputBean0 = arrangeData(privateEntityService0, searchTokenUtil0); 
		createInputBean0.setType("ACTIVE");
		privateEntityService0.generateSearchToken(createInputBean0);
	}
 
	private CreateInputBean arrangeData(final PrivateEntityService privateEntityService0, final SearchTokenUtil searchTokenUtil0) { 
		Injector.inject( 
				privateEntityService0, 
				com.firstrain.web.service.core.PrivateEntityService.class, 
				"searchTokenUtil", 
				searchTokenUtil0); 
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor(); 
		Injector.inject( 
				privateEntityService0, 
				com.firstrain.web.service.core.PrivateEntityService.class, 
				"taskExecutor", 
				threadPoolTaskExecutor0); 
		Injector.validateBean(privateEntityService0, 
				com.firstrain.web.service.core.PrivateEntityService.class); 
		CreateInputBean createInputBean0 = new CreateInputBean(); 
		return createInputBean0; 
	} 

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test08() {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		// Undeclared exception!
		privateEntityService0.checkUpdateDefinitionChanged("INACTIVE", null);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test09() {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		// Undeclared exception!
		privateEntityService0.checkInActiveEntity("", null);
	}

	@Test(timeout = 4000, expected = IllegalStateException.class)
	public void test10() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		privateEntityService0.backTestSubmit("Hk1_JB&", "Hk1_JB&");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test11() throws Exception {
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		privateEntityService0.backTestCheck((-3858L));
	}
}
