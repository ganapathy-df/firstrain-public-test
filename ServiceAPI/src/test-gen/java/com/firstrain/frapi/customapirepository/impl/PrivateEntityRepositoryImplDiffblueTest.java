package com.firstrain.frapi.customapirepository.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.common.db.jpa.PersistenceProvider;
import com.firstrain.common.db.jpa.Transaction;
import com.firstrain.db.api.AutoIncrementDbAPI;
import com.firstrain.db.api.EntityBacktestDbAPI;
import com.firstrain.db.api.EntityHistoryDbAPI;
import com.firstrain.db.api.PrivateEntityDbAPI;
import com.firstrain.db.obj.AutoIncrement;
import com.firstrain.db.obj.EntityBacktest;
import com.firstrain.db.obj.EntityHistory;
import com.firstrain.db.obj.PrivateEntity;
import com.firstrain.db.obj.PrivateEntityList;
import com.firstrain.web.pojo.Author;
import com.firstrain.web.pojo.CreateInputBean;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.List;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class PrivateEntityRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: PrivateEntityRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(PrivateEntityDbAPI.class)
  @Test
  public void getDefinitionsInputNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    arrangeGetPrivateEntity();

    // Act
    final List<PrivateEntity> retval = objectUnderTest.getDefinitions(searchToken);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EntityBacktestDbAPI.class)
  @Test
  public void getEntityBackTestByIdInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(EntityBacktestDbAPI.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final long jobId = 0L;
    final Method getEntityBacktestByIdMethod =
        DTUMemberMatcher.method(EntityBacktestDbAPI.class, "getEntityBacktestById", long.class);
    PowerMockito.doReturn(null)
        .when(EntityBacktestDbAPI.class, getEntityBacktestByIdMethod)
        .withArguments(anyLong());

    // Act
    final List<EntityBacktest> retval = objectUnderTest.getEntityBackTestById(jobId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EntityBacktestDbAPI.class, StringUtils.class})
  @Test
  public void getEntityBackTestListInputNullFalseOutputNull() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = mockDataAndCreatePrivateEntityRepositoryImpl();
    final String searchToken = null;
    final boolean isDocJson = false;
    final Method getEntityBacktestWithOutDocsJsonMethod =
        DTUMemberMatcher.method(
            EntityBacktestDbAPI.class, "getEntityBacktestWithOutDocsJson", String.class);
    arrangeDataDoGetEntityBackTestListAndAssert(getEntityBacktestWithOutDocsJsonMethod, objectUnderTest, searchToken, isDocJson);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(StringUtils.class)
  @Test
  public void getEntityBackTestListInputNullFalseOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final boolean isDocJson = false;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(true)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<EntityBacktest> retval =
        objectUnderTest.getEntityBackTestList(searchToken, isDocJson);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(StringUtils.class)
  @Test
  public void getEntityBacktestListInputNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(true)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<EntityBacktest> retval = objectUnderTest.getEntityBacktestList(searchToken);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EntityBacktestDbAPI.class, StringUtils.class})
  @Test
  public void getEntityBacktestListInputNullOutputNull2() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = mockDataAndCreatePrivateEntityRepositoryImpl();
    final String searchToken = null;
    final Method getEntityBacktestMethod =
        DTUMemberMatcher.method(EntityBacktestDbAPI.class, "getEntityBacktest", String.class);
    PowerMockito.doReturn(null)
        .when(EntityBacktestDbAPI.class, getEntityBacktestMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<EntityBacktest> retval = objectUnderTest.getEntityBacktestList(searchToken);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EntityBacktestDbAPI.class, StringUtils.class})
  @Test
  public void getEntityBackTestListInputNullTrueOutputNull() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = mockDataAndCreatePrivateEntityRepositoryImpl();
    final String searchToken = null;
    final boolean isDocJson = true;
    final Method getEntityBacktestWithDocsJsonMethod =
        DTUMemberMatcher.method(
            EntityBacktestDbAPI.class, "getEntityBacktestWithDocsJson", String.class);
    arrangeDataDoGetEntityBackTestListAndAssert(getEntityBacktestWithDocsJsonMethod, objectUnderTest, searchToken, isDocJson);
  }

  private void arrangeDataDoGetEntityBackTestListAndAssert(final Method getEntityBacktestWithDocsJsonMethod, final PrivateEntityRepositoryImpl objectUnderTest, final String searchToken, final boolean isDocJson) throws Exception {
    PowerMockito.doReturn(null)
        .when(EntityBacktestDbAPI.class, getEntityBacktestWithDocsJsonMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    final List<EntityBacktest> retval =
        objectUnderTest.getEntityBackTestList(searchToken, isDocJson);
    
    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EntityHistoryDbAPI.class, StringUtils.class})
  @Test
  public void getEntityHistoryListInputNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);
    PowerMockito.mockStatic(EntityHistoryDbAPI.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final Method getEntityHistoryBySearchTokenMethod =
        DTUMemberMatcher.method(
            EntityHistoryDbAPI.class, "getEntityHistoryBySearchToken", String.class);
    PowerMockito.doReturn(null)
        .when(EntityHistoryDbAPI.class, getEntityHistoryBySearchTokenMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<EntityHistory> retval = objectUnderTest.getEntityHistoryList(searchToken);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(StringUtils.class)
  @Test
  public void getEntityHistoryListInputNullOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(true)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<EntityHistory> retval = objectUnderTest.getEntityHistoryList(searchToken);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({PrivateEntityDbAPI.class, CollectionUtils.class})
  @Test
  public void getPrivateEntityListByTaxonomyDirectiveInputNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(CollectionUtils.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final List<String> taxonomyDirectiveLst = null;
    final Method getPrivateEntityListBybrandMethod =
        DTUMemberMatcher.method(
            PrivateEntityDbAPI.class, "getPrivateEntityListBybrand", List.class);
    PowerMockito.doReturn(null)
        .when(PrivateEntityDbAPI.class, getPrivateEntityListBybrandMethod)
        .withArguments(or(isA(List.class), isNull(List.class)));
    final Method isEmptyMethod =
        DTUMemberMatcher.method(CollectionUtils.class, "isEmpty", Collection.class);
    PowerMockito.doReturn(false)
        .when(CollectionUtils.class, isEmptyMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final List<PrivateEntityList> retval =
        objectUnderTest.getPrivateEntityListByTaxonomyDirective(taxonomyDirectiveLst);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({StringUtils.class, PrivateEntityDbAPI.class})
  @Test
  public void getPrivateEntityListInputNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    arrangeGetPrivateEntity();

    // Act
    final List<PrivateEntity> retval = objectUnderTest.getPrivateEntityList(searchToken);

    // Assert
    assertNull(retval);
  }

  private void arrangeGetPrivateEntity() throws Exception {
    final Method getPrivateEntityMethod =
        DTUMemberMatcher.method(PrivateEntityDbAPI.class, "getPrivateEntity", String.class);
    PowerMockito.doReturn(null)
        .when(PrivateEntityDbAPI.class, getPrivateEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(StringUtils.class)
  @Test
  public void getPrivateEntityListInputNullOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(true)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<PrivateEntity> retval = objectUnderTest.getPrivateEntityList(searchToken);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBacktestDbAPI.class,
    StringUtils.class,
    Logger.class,
    PersistenceProvider.class,
    PrivateEntityRepositoryImpl.class,
    PrivateEntity.class,
    EntityBacktest.class
  })
  @Test
  public void insertIntoEntityBacktestInputNullNotNullOutputNullPointerException()
      throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangeData();
    final String docs = null;
    final PrivateEntity pe = arrangeAndGetPrivateEntity();
    arrangeAndDoInsert(docs, objectUnderTest, pe);

    // Method is not expected to return due to exception thrown
  }

  private PrivateEntity arrangeAndGetPrivateEntity() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn(null).when(pe, getDefinition_devMethod).withNoArguments();
    final Method getId_devMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_dev");
    PowerMockito.doReturn(0L).when(pe, getId_devMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getSearchToken");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(pe, getSearchTokenMethod)
        .withNoArguments();
    return arrangeTestData(pe);
  }

  private void arrangeAndDoInsert(final String docs, final PrivateEntityRepositoryImpl objectUnderTest, final PrivateEntity pe) throws Exception {
    arrangeAndDoInsert2(docs, objectUnderTest, pe);
  }

  private PrivateEntityRepositoryImpl arrangeData() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(StringUtils.class);
    PowerMockito.mockStatic(EntityBacktestDbAPI.class);
    return mockLoggerAndCreatePrivateEntityRepositoryImpl();
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBacktestDbAPI.class,
    StringUtils.class,
    Logger.class,
    PersistenceProvider.class,
    PrivateEntityRepositoryImpl.class,
    PrivateEntity.class,
    EntityBacktest.class
  })
  @Test
  public void insertIntoEntityBacktestInputNullNotNullOutputNullPointerException2()
      throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangeData2();
    final String docs = null;
    final PrivateEntity pe = arrangeAndGetPrivateEntity2();
    arrangeAndDoInsert2(docs, objectUnderTest, pe);

    // Method is not expected to return due to exception thrown
  }

  private PrivateEntity arrangeAndGetPrivateEntity2() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn(null).when(pe, getDefinition_devMethod).withNoArguments();
    final Method getId_devMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_dev");
    PowerMockito.doReturn(0L).when(pe, getId_devMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getSearchToken");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(""))
        .when(pe, getSearchTokenMethod)
        .withNoArguments();
    return arrangeTestData(pe);
  }

  private PrivateEntity arrangeTestData(final PrivateEntity pe) throws Exception {
    final EntityBacktest entityBacktest = PowerMockito.mock(EntityBacktest.class);
    final Method getIdMethod = DTUMemberMatcher.method(EntityBacktest.class, "getId");
    PowerMockito.doReturn(458_752L).when(entityBacktest, getIdMethod).withNoArguments();
    PowerMockito.whenNew(EntityBacktest.class).withNoArguments().thenReturn(entityBacktest);
    return pe;
  }

  private void arrangeAndDoInsert2(final String docs, final PrivateEntityRepositoryImpl objectUnderTest, final PrivateEntity pe) throws Exception {
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isNotEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.insertIntoEntityBacktest(docs, pe);
  }

  private PrivateEntityRepositoryImpl arrangeData2() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(StringUtils.class);
    PowerMockito.mockStatic(EntityBacktestDbAPI.class);
    return mockLoggerAndCreatePrivateEntityRepositoryImpl();
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBacktestDbAPI.class, StringUtils.class, EntityBacktest.class,
    PrivateEntityRepositoryImpl.class, PersistenceProvider.class, Logger.class,
    PrivateEntity.class
  })
  @Test
  public void insertIntoEntityBacktestInputNullNotNullOutputNullPointerException3()
      throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangePrivateEntityRepositoryImpl();
    final String docs = null;
    final PrivateEntity pe = createPrivateEntity();
    final Method newTxnMethod = getNewTxnMethod();
    arrangeDoInsert3(docs, newTxnMethod, objectUnderTest, pe);

    // Method is not expected to return due to exception thrown
  }

  private Method getNewTxnMethod() throws Exception {
    final EntityBacktest entityBacktest = PowerMockito.mock(EntityBacktest.class);
    final Method getIdMethod = DTUMemberMatcher.method(EntityBacktest.class, "getId");
    PowerMockito.doReturn(-1L).when(entityBacktest, getIdMethod).withNoArguments();
    PowerMockito.whenNew(EntityBacktest.class).withNoArguments().thenReturn(entityBacktest);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isNotEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    return newTxnMethod;
  }

  private PrivateEntity createPrivateEntity() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn(null).when(pe, getDefinition_devMethod).withNoArguments();
    final Method getId_devMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_dev");
    PowerMockito.doReturn(0L).when(pe, getId_devMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getSearchToken");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(pe, getSearchTokenMethod)
        .withNoArguments();
    return pe;
  }

  private PrivateEntityRepositoryImpl arrangePrivateEntityRepositoryImpl() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(StringUtils.class);
    PowerMockito.mockStatic(EntityBacktestDbAPI.class);
    return mockLoggerAndCreatePrivateEntityRepositoryImpl();
  }

  private void arrangeDoInsert3(final String docs, final Method newTxnMethod, final PrivateEntityRepositoryImpl objectUnderTest, final PrivateEntity pe) throws Exception {
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.insertIntoEntityBacktest(docs, pe);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    StringUtils.class, EntityBacktest.class, PersistenceProvider.class,
    EntityBacktestDbAPI.class, Transaction.class, PrivateEntityRepositoryImpl.class,
    PrivateEntity.class
  })
  @Test
  public void insertIntoEntityBacktestInputNullNotNullOutputZero() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangePrivateEntityRepositoryImpl3();
    final String docs = null;
    final PrivateEntity pe = arrangeAndCreatePrivateEntity3();
    arrangeDoInsertAndAssert(docs, objectUnderTest, pe);
  }

  private void arrangeDoInsertAndAssert(final String docs, final PrivateEntityRepositoryImpl objectUnderTest, final PrivateEntity pe) throws Exception {
    final EntityBacktest entityBacktest = PowerMockito.mock(EntityBacktest.class);
    final Method getIdMethod = DTUMemberMatcher.method(EntityBacktest.class, "getId");
    PowerMockito.doReturn(0L).when(entityBacktest, getIdMethod).withNoArguments();
    PowerMockito.whenNew(EntityBacktest.class).withNoArguments().thenReturn(entityBacktest);
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isNotEmpty", String.class);
    PowerMockito.doReturn(true)
        .when(StringUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    final long retval = objectUnderTest.insertIntoEntityBacktest(docs, pe);
    
    // Assert
    assertEquals(0L, retval);
  }

  private PrivateEntity arrangeAndCreatePrivateEntity3() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn(null).when(pe, getDefinition_devMethod).withNoArguments();
    final Method getId_devMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_dev");
    PowerMockito.doReturn(0L).when(pe, getId_devMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getSearchToken");
    PowerMockito.doReturn(null).when(pe, getSearchTokenMethod).withNoArguments();
    return pe;
  }

  private PrivateEntityRepositoryImpl arrangePrivateEntityRepositoryImpl3() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    final PrivateEntityRepositoryImpl objectUnderTest = mockDataAndCreatePrivateEntityRepositoryImpl();
    return objectUnderTest;
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    StringUtils.class, EntityBacktest.class, PersistenceProvider.class,
    EntityBacktestDbAPI.class, Transaction.class, PrivateEntityRepositoryImpl.class,
    PrivateEntity.class
  })
  @Test
  public void insertIntoEntityBacktestInputNullNotNullOutputZero2() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = createPrivateEntityRepositoryImpl();
    final String docs = null;
    final PrivateEntity pe = setupPrivateEntity();
    setupDoInsertAndAssert(docs, objectUnderTest, pe);
  }

  private void setupDoInsertAndAssert(final String docs, final PrivateEntityRepositoryImpl objectUnderTest, final PrivateEntity pe) throws Exception {
    final EntityBacktest entityBacktest = PowerMockito.mock(EntityBacktest.class);
    final Method getIdMethod = DTUMemberMatcher.method(EntityBacktest.class, "getId");
    PowerMockito.doReturn(0L).when(entityBacktest, getIdMethod).withNoArguments();
    PowerMockito.whenNew(EntityBacktest.class).withNoArguments().thenReturn(entityBacktest);
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isNotEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    final long retval = objectUnderTest.insertIntoEntityBacktest(docs, pe);
    
    // Assert
    assertEquals(0L, retval);
  }

  private PrivateEntity setupPrivateEntity() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn(null).when(pe, getDefinition_devMethod).withNoArguments();
    final Method getId_devMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_dev");
    PowerMockito.doReturn(0L).when(pe, getId_devMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getSearchToken");
    PowerMockito.doReturn(null).when(pe, getSearchTokenMethod).withNoArguments();
    return pe;
  }

  private PrivateEntityRepositoryImpl createPrivateEntityRepositoryImpl() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    final PrivateEntityRepositoryImpl objectUnderTest = mockDataAndCreatePrivateEntityRepositoryImpl();
    return objectUnderTest;
  }

  private PrivateEntityRepositoryImpl mockDataAndCreatePrivateEntityRepositoryImpl() {
    PowerMockito.mockStatic(StringUtils.class);
    PowerMockito.mockStatic(EntityBacktestDbAPI.class);
    
    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    return objectUnderTest;
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Logger.class,
    PrivateEntityRepositoryImpl.class,
    Transaction.class,
    PersistenceProvider.class
  })
  @Test
  public void insertIntoEntityBacktestInputNullNullOutputNullPointerException() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = mockPersistenceAndLoggerAndCreateObject();
    final String docs = null;
    final PrivateEntity pe = null;
    final EntityBacktest entityBacktest = PowerMockito.mock(EntityBacktest.class);
    PowerMockito.whenNew(EntityBacktest.class).withNoArguments().thenReturn(entityBacktest);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.insertIntoEntityBacktest(docs, pe);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Author.class,
    CreateInputBean.class,
    Logger.class,
    PrivateEntityDbAPI.class,
    PersistenceProvider.class,
    PrivateEntityRepositoryImpl.class,
    AutoIncrement.class,
    AutoIncrementDbAPI.class,
    PrivateEntity.class
  })
  @Test
  public void insertIntoPrivateEntityTableInputNotNullNotNullNullNullOutputNullPointerException()
      throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangePrivateEntityRepositoryImpl4();
    final String searchToken = "";
    final CreateInputBean inputbean = setupCreateInputBean();
    final String enterprise_id = null;
    final String definition = null;
    arrangeData5();
    arrangeAndDoInsert(definition, enterprise_id, inputbean, objectUnderTest, searchToken);

    // Method is not expected to return due to exception thrown
  }

  private CreateInputBean setupCreateInputBean() throws Exception {
    final CreateInputBean inputbean = PowerMockito.mock(CreateInputBean.class);
    final Author author1 = PowerMockito.mock(Author.class);
    final Method getNameMethod = DTUMemberMatcher.method(Author.class, "getName");
    PowerMockito.doReturn("").when(author1, getNameMethod).withNoArguments();
    final Author author = PowerMockito.mock(Author.class);
    final Method getEmailMethod = DTUMemberMatcher.method(Author.class, "getEmail");
    PowerMockito.doReturn("").when(author, getEmailMethod).withNoArguments();
    final Method getAuthorMethod = DTUMemberMatcher.method(CreateInputBean.class, "getAuthor");
    ((PowerMockitoStubber) PowerMockito.doReturn(author).doReturn(author1))
        .when(inputbean, getAuthorMethod)
        .withNoArguments();
    final Method getTaxonomyDirectiveMethod =
        DTUMemberMatcher.method(CreateInputBean.class, "getTaxonomyDirective");
    PowerMockito.doReturn("").when(inputbean, getTaxonomyDirectiveMethod).withNoArguments();
    final Method getNameMethod1 = DTUMemberMatcher.method(CreateInputBean.class, "getName");
    PowerMockito.doReturn("").when(inputbean, getNameMethod1).withNoArguments();
    return inputbean;
  }

  private void arrangeData5() throws Exception {
    final PrivateEntity privateEntity = PowerMockito.mock(PrivateEntity.class);
    PowerMockito.whenNew(PrivateEntity.class).withNoArguments().thenReturn(privateEntity);
    final AutoIncrement autoIncrement1 = PowerMockito.mock(AutoIncrement.class);
    final Method getIdMethod1 = DTUMemberMatcher.method(AutoIncrement.class, "getId");
    PowerMockito.doReturn(0L).when(autoIncrement1, getIdMethod1).withNoArguments();
    final AutoIncrement autoIncrement = PowerMockito.mock(AutoIncrement.class);
    final Method getIdMethod = DTUMemberMatcher.method(AutoIncrement.class, "getId");
    PowerMockito.doReturn(0L).when(autoIncrement, getIdMethod).withNoArguments();
    PowerMockito.whenNew(AutoIncrement.class)
        .withNoArguments()
        .thenReturn(autoIncrement)
        .thenReturn(autoIncrement1);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
  }

  private void arrangeAndDoInsert(final String definition, final String enterprise_id, final CreateInputBean inputbean, final PrivateEntityRepositoryImpl objectUnderTest, final String searchToken) throws Exception {
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.insertIntoPrivateEntityTable(searchToken, inputbean, enterprise_id, definition);
  }

  private PrivateEntityRepositoryImpl arrangePrivateEntityRepositoryImpl4() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(AutoIncrementDbAPI.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    return mockLoggerAndCreatePrivateEntityRepositoryImpl();
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Transaction.class,
    Logger.class,
    PersistenceProvider.class,
    PrivateEntityRepositoryImpl.class,
    AutoIncrementDbAPI.class,
    PrivateEntity.class
  })
  @Test
  public void insertIntoPrivateEntityTableInputNullNullNullNullOutputNullPointerException()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(AutoIncrementDbAPI.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final CreateInputBean inputbean = null;
    final String enterprise_id = null;
    final String definition = null;
    final PrivateEntity privateEntity = PowerMockito.mock(PrivateEntity.class);
    PowerMockito.whenNew(PrivateEntity.class).withNoArguments().thenReturn(privateEntity);
    final AutoIncrement autoIncrement1 = PowerMockito.mock(AutoIncrement.class);
    final AutoIncrement autoIncrement = PowerMockito.mock(AutoIncrement.class);
    PowerMockito.whenNew(AutoIncrement.class)
        .withNoArguments()
        .thenReturn(autoIncrement)
        .thenReturn(autoIncrement1);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.insertIntoPrivateEntityTable(searchToken, inputbean, enterprise_id, definition);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Logger.class,
    PersistenceProvider.class,
    PrivateEntityRepositoryImpl.class,
    AutoIncrementDbAPI.class,
    PrivateEntity.class
  })
  @Test
  public void insertIntoPrivateEntityTableInputNullNullNullNullOutputNullPointerException2()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(AutoIncrementDbAPI.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final CreateInputBean inputbean = null;
    final String enterprise_id = null;
    final String definition = null;
    final PrivateEntity privateEntity = PowerMockito.mock(PrivateEntity.class);
    PowerMockito.whenNew(PrivateEntity.class).withNoArguments().thenReturn(privateEntity);
    final AutoIncrement autoIncrement1 = PowerMockito.mock(AutoIncrement.class);
    final AutoIncrement autoIncrement = PowerMockito.mock(AutoIncrement.class);
    PowerMockito.whenNew(AutoIncrement.class)
        .withNoArguments()
        .thenReturn(autoIncrement)
        .thenReturn(autoIncrement1);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    arrangeAndDoInsert(definition, enterprise_id, inputbean, objectUnderTest, searchToken);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Transaction.class,
    PrivateEntity.class,
    Logger.class,
    PersistenceProvider.class,
    PrivateEntityDbAPI.class
  })
  @Test
  public void promoteInputNotNullNotNullNullNullOutputNullPointerException() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangePrivateEntityRepositoryImpl5();
    final String searchToken = "";
    final PrivateEntity pe = arrangePrivateEntity5();
    final String name = null;
    final String email = arrangeDataAndGetEmail();
    objectUnderTest.promote(searchToken, pe, name, email);

    // Method is not expected to return due to exception thrown
  }

  private String arrangeDataAndGetEmail() throws Exception {
    final String email = null;
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method updatePrivateEntityMethod =
        DTUMemberMatcher.method(
            PrivateEntityDbAPI.class, "updatePrivateEntity", Transaction.class, long.class);
    PowerMockito.doReturn(null)
        .when(PrivateEntityDbAPI.class, updatePrivateEntityMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
    return email;
  }

  private PrivateEntity arrangePrivateEntity5() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getIdMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId");
    PowerMockito.doReturn(0L).when(pe, getIdMethod).withNoArguments();
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn(null).when(pe, getDefinition_devMethod).withNoArguments();
    return pe;
  }

  private PrivateEntityRepositoryImpl arrangePrivateEntityRepositoryImpl5() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    return mockLoggerAndCreatePrivateEntityRepositoryImpl();
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Transaction.class,
    PrivateEntityDbAPI.class,
    PersistenceProvider.class,
    Logger.class,
    PrivateEntity.class
  })
  @Test
  public void promoteInputNotNullNotNullNullNullOutputNullPointerException2() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangePrivateEntityRepositoryImpl6();
    final String searchToken = "";
    final PrivateEntity pe = arrangePrivateEntity6();
    final String name = null;
    final String email = null;
    arrangeDataforPromote();
    objectUnderTest.promote(searchToken, pe, name, email);

    // Method is not expected to return due to exception thrown
  }

  private void arrangeDataforPromote() throws Exception {
    final Logger logger = PowerMockito.mock(Logger.class);
    setupData(logger);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
  }

  private PrivateEntity arrangePrivateEntity6() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getIdMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId");
    PowerMockito.doReturn(0L).when(pe, getIdMethod).withNoArguments();
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn(null).when(pe, getDefinition_devMethod).withNoArguments();
    return pe;
  }

  private PrivateEntityRepositoryImpl arrangePrivateEntityRepositoryImpl6() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    return mockLoggerAndCreatePrivateEntityRepositoryImpl();
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Transaction.class,
    PrivateEntity.class,
    Logger.class,
    PersistenceProvider.class,
    PrivateEntityDbAPI.class
  })
  @Test
  public void promoteInputNullNotNullNullNullOutputNullPointerException() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangePrivateEntityRepositoryImpl7();
    final String searchToken = null;
    final PrivateEntity pe = arrangePrivateEntity7();
    final String name = null;
    final String email = arrangeAndGetEmail2();
    objectUnderTest.promote(searchToken, pe, name, email);

    // Method is not expected to return due to exception thrown
  }

  private String arrangeAndGetEmail2() throws Exception {
    final String email = null;
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method updatePrivateEntityMethod =
        DTUMemberMatcher.method(
            PrivateEntityDbAPI.class, "updatePrivateEntity", Transaction.class, long.class);
    PowerMockito.doReturn(null)
        .when(PrivateEntityDbAPI.class, updatePrivateEntityMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
    return email;
  }

  private PrivateEntity arrangePrivateEntity7() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getIdMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId");
    PowerMockito.doReturn(0L).when(pe, getIdMethod).withNoArguments();
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn(null).when(pe, getDefinition_devMethod).withNoArguments();
    return pe;
  }

  private PrivateEntityRepositoryImpl arrangePrivateEntityRepositoryImpl7() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    return mockLoggerAndCreatePrivateEntityRepositoryImpl();
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityHistoryDbAPI.class, EntityHistory.class, PrivateEntityRepositoryImpl.class,
    Transaction.class, PrivateEntityDbAPI.class, PersistenceProvider.class,
    Logger.class, PrivateEntity.class
  })
  @Test
  public void updateDefinitionInputNotNullNullNotNullNullNullOutputNullPointerException()
      throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangePrivateEntityRepositoryImpl9();
    final String searchToken = "";
    final String definition_dev = null;
    final PrivateEntity pe = arrangePrivateEntity8();
    final String user = arrangeDataAndGetUser(pe);
    final String email = null;
    final EntityHistory entityHistory = PowerMockito.mock(EntityHistory.class);
    PowerMockito.whenNew(EntityHistory.class).withNoArguments().thenReturn(entityHistory);
    arrangeData8();
    objectUnderTest.updateDefinition(searchToken, definition_dev, pe, user, email);

    // Method is not expected to return due to exception thrown
  }

  private PrivateEntity arrangePrivateEntity8() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getDefinition_liveMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_live");
    PowerMockito.doReturn("").when(pe, getDefinition_liveMethod).withNoArguments();
    final Method getId_devMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_dev");
    PowerMockito.doReturn(0L).when(pe, getId_devMethod).withNoArguments();
    final Method getIdMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId");
    PowerMockito.doReturn(0L).when(pe, getIdMethod).withNoArguments();
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn("").when(pe, getDefinition_devMethod).withNoArguments();
    final Method getStatusMethod = DTUMemberMatcher.method(PrivateEntity.class, "getStatus");
    PowerMockito.doReturn("").when(pe, getStatusMethod).withNoArguments();
    return pe;
  }

  private void arrangeData8() throws Exception {
    final Logger logger = PowerMockito.mock(Logger.class);
    setupData(logger);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
  }

  private String arrangeDataAndGetUser(final PrivateEntity pe) throws Exception {
    final Method getNameMethod = DTUMemberMatcher.method(PrivateEntity.class, "getName");
    PowerMockito.doReturn("").when(pe, getNameMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getSearchToken");
    PowerMockito.doReturn("").when(pe, getSearchTokenMethod).withNoArguments();
    final Method getId_liveMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_live");
    PowerMockito.doReturn(0L).when(pe, getId_liveMethod).withNoArguments();
    final String user = null;
    return user;
  }

  private PrivateEntityRepositoryImpl arrangePrivateEntityRepositoryImpl9() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(EntityHistoryDbAPI.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    return mockLoggerAndCreatePrivateEntityRepositoryImpl();
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityHistoryDbAPI.class, EntityHistory.class, PrivateEntityRepositoryImpl.class,
    PersistenceProvider.class, Logger.class, PrivateEntityDbAPI.class,
    PrivateEntity.class
  })
  @Test
  public void updateDefinitionInputNotNullNullNotNullNullNullOutputNullPointerException2()
      throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangePrivateEntityRepositoryImpl11();
    final String searchToken = "";
    final String definition_dev = null;
    final PrivateEntity pe = arrangePrivateEntity10();
    final String user = arrangeDataAndGetUser2(pe);
    final String email = null;
    final EntityHistory entityHistory = PowerMockito.mock(EntityHistory.class);
    PowerMockito.whenNew(EntityHistory.class).withNoArguments().thenReturn(entityHistory);
    final Logger logger = PowerMockito.mock(Logger.class);
    arrangeDataAndDoUpdateDefinition(definition_dev, email, logger, objectUnderTest, pe, searchToken, user);

    // Method is not expected to return due to exception thrown
  }

  private PrivateEntity arrangePrivateEntity10() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getDefinition_liveMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_live");
    PowerMockito.doReturn("").when(pe, getDefinition_liveMethod).withNoArguments();
    final Method getId_devMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_dev");
    PowerMockito.doReturn(0L).when(pe, getId_devMethod).withNoArguments();
    final Method getIdMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId");
    PowerMockito.doReturn(0L).when(pe, getIdMethod).withNoArguments();
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn("").when(pe, getDefinition_devMethod).withNoArguments();
    final Method getStatusMethod = DTUMemberMatcher.method(PrivateEntity.class, "getStatus");
    PowerMockito.doReturn("").when(pe, getStatusMethod).withNoArguments();
    return pe;
  }

  private void arrangeDataAndDoUpdateDefinition(final String definition_dev, final String email, final Logger logger, final PrivateEntityRepositoryImpl objectUnderTest, final PrivateEntity pe, final String searchToken, final String user) throws Exception {
    setupData(logger);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.updateDefinition(searchToken, definition_dev, pe, user, email);
  }

  private String arrangeDataAndGetUser2(final PrivateEntity pe) throws Exception {
    final Method getNameMethod = DTUMemberMatcher.method(PrivateEntity.class, "getName");
    PowerMockito.doReturn("").when(pe, getNameMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getSearchToken");
    PowerMockito.doReturn("").when(pe, getSearchTokenMethod).withNoArguments();
    final Method getId_liveMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_live");
    PowerMockito.doReturn(0L).when(pe, getId_liveMethod).withNoArguments();
    final String user = null;
    return user;
  }

  private PrivateEntityRepositoryImpl arrangePrivateEntityRepositoryImpl11() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(EntityHistoryDbAPI.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    return mockLoggerAndCreatePrivateEntityRepositoryImpl();
  }

  private PrivateEntityRepositoryImpl mockLoggerAndCreatePrivateEntityRepositoryImpl() {
    PowerMockito.mockStatic(Logger.class);
    
    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    return objectUnderTest;
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Logger.class,
    PrivateEntityRepositoryImpl.class,
    Transaction.class,
    PersistenceProvider.class
  })
  @Test
  public void updateDefinitionInputNotNullNullNullNullNullOutputNullPointerException()
      throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = mockPersistenceAndLoggerAndCreateObject();
    final String searchToken = "";
    final String definition_dev = null;
    final PrivateEntity pe = null;
    final String user = null;
    final String email = null;
    final EntityHistory entityHistory = PowerMockito.mock(EntityHistory.class);
    PowerMockito.whenNew(EntityHistory.class).withNoArguments().thenReturn(entityHistory);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.updateDefinition(searchToken, definition_dev, pe, user, email);

    // Method is not expected to return due to exception thrown
  }

  private PrivateEntityRepositoryImpl mockPersistenceAndLoggerAndCreateObject() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(Logger.class);
    
    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    return objectUnderTest;
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityHistoryDbAPI.class, EntityHistory.class, PrivateEntityRepositoryImpl.class,
    Transaction.class, PrivateEntity.class, PersistenceProvider.class,
    PrivateEntityDbAPI.class
  })
  @Test
  public void updateDefinitionInputNullNullNotNullNullNullOutputNegative() throws Exception {

    // Setup mocks
    final PrivateEntityRepositoryImpl objectUnderTest = arrangePrivateEntityRepositoryImpl12();
    final String searchToken = null;
    final String definition_dev = null;
    final PrivateEntity pe = arrangeAndCreatePrivateEntity12();
    arrangePrivateEntity12(pe);
    final String user = null;
    final String email = null;
    arrangeData12(definition_dev, email, objectUnderTest, pe, searchToken, user);
  }

  private void arrangePrivateEntity12(final PrivateEntity pe) throws Exception {
    final Method getNameMethod = DTUMemberMatcher.method(PrivateEntity.class, "getName");
    PowerMockito.doReturn(null).when(pe, getNameMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getSearchToken");
    PowerMockito.doReturn(null).when(pe, getSearchTokenMethod).withNoArguments();
    final Method getId_liveMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_live");
    PowerMockito.doReturn(0L).when(pe, getId_liveMethod).withNoArguments();
    final Method getId_devMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId_dev");
    PowerMockito.doReturn(0L).when(pe, getId_devMethod).withNoArguments();
    final Method getIdMethod = DTUMemberMatcher.method(PrivateEntity.class, "getId");
    PowerMockito.doReturn(0L).when(pe, getIdMethod).withNoArguments();
    final Method getStatusMethod = DTUMemberMatcher.method(PrivateEntity.class, "getStatus");
    PowerMockito.doReturn(null).when(pe, getStatusMethod).withNoArguments();
  }

  private void arrangeData12(final String definition_dev, final String email, final PrivateEntityRepositoryImpl objectUnderTest, final PrivateEntity pe, final String searchToken, final String user) throws Exception {
    final EntityHistory entityHistory = PowerMockito.mock(EntityHistory.class);
    PowerMockito.whenNew(EntityHistory.class).withNoArguments().thenReturn(entityHistory);
    final PrivateEntity privateEntity = PowerMockito.mock(PrivateEntity.class);
    final Method updatePrivateEntityMethod =
        DTUMemberMatcher.method(
            PrivateEntityDbAPI.class, "updatePrivateEntity", Transaction.class, long.class);
    PowerMockito.doReturn(privateEntity)
        .when(PrivateEntityDbAPI.class, updatePrivateEntityMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    final int retval =
        objectUnderTest.updateDefinition(searchToken, definition_dev, pe, user, email);
    
    // Assert
    assertEquals(-1, retval);
  }

  private PrivateEntity arrangeAndCreatePrivateEntity12() throws Exception {
    final PrivateEntity pe = PowerMockito.mock(PrivateEntity.class);
    final Method getDefinition_liveMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_live");
    PowerMockito.doReturn(null).when(pe, getDefinition_liveMethod).withNoArguments();
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn(null).when(pe, getDefinition_devMethod).withNoArguments();
    return pe;
  }

  private PrivateEntityRepositoryImpl arrangePrivateEntityRepositoryImpl12() {
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    PowerMockito.mockStatic(EntityHistoryDbAPI.class);
    
    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    return objectUnderTest;
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, PrivateEntityDbAPI.class, PersistenceProvider.class})
  @Test
  public void updateStateInputNotNullNullZeroOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = "";
    final String state = null;
    final long id = 0L;
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method updatePrivateEntityMethod =
        DTUMemberMatcher.method(
            PrivateEntityDbAPI.class, "updatePrivateEntity", Transaction.class, long.class);
    PowerMockito.doReturn(null)
        .when(PrivateEntityDbAPI.class, updatePrivateEntityMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.updateState(searchToken, state, id);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({PrivateEntityDbAPI.class, Logger.class, PersistenceProvider.class})
  @Test
  public void updateStateInputNotNullNullZeroOutputNullPointerException2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = "";
    final String state = null;
    final long id = 0L;
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method updatePrivateEntityMethod =
        DTUMemberMatcher.method(
            PrivateEntityDbAPI.class, "updatePrivateEntity", Transaction.class, long.class);
    PowerMockito.doReturn(null)
        .when(PrivateEntityDbAPI.class, updatePrivateEntityMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.updateState(searchToken, state, id);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    PrivateEntityDbAPI.class,
    Logger.class,
    Transaction.class,
    PersistenceProvider.class
  })
  @Test
  public void updateStateInputNotNullNullZeroOutputNullPointerException3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = "";
    final String state = null;
    final long id = 0L;
    final Logger logger = PowerMockito.mock(Logger.class);
    setupData(logger);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.updateState(searchToken, state, id);

    // Method is not expected to return due to exception thrown
  }

  private void setupData(final Logger logger) throws Exception {
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method updatePrivateEntityMethod =
        DTUMemberMatcher.method(
            PrivateEntityDbAPI.class, "updatePrivateEntity", Transaction.class, long.class);
    PowerMockito.doReturn(null)
        .when(PrivateEntityDbAPI.class, updatePrivateEntityMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    PrivateEntityDbAPI.class,
    PrivateEntity.class,
    Transaction.class,
    PersistenceProvider.class
  })
  @Test
  public void updateStateInputNullNullZeroOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final String state = null;
    final long id = 0L;
    final PrivateEntity privateEntity = PowerMockito.mock(PrivateEntity.class);
    final Method updatePrivateEntityMethod =
        DTUMemberMatcher.method(
            PrivateEntityDbAPI.class, "updatePrivateEntity", Transaction.class, long.class);
    PowerMockito.doReturn(privateEntity)
        .when(PrivateEntityDbAPI.class, updatePrivateEntityMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final PrivateEntity retval = objectUnderTest.updateState(searchToken, state, id);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, PrivateEntityDbAPI.class, PersistenceProvider.class})
  @Test
  public void updateStateInputNullNullZeroOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(PrivateEntityDbAPI.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final PrivateEntityRepositoryImpl objectUnderTest = new PrivateEntityRepositoryImpl();
    final String searchToken = null;
    final String state = null;
    final long id = 0L;
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method updatePrivateEntityMethod =
        DTUMemberMatcher.method(
            PrivateEntityDbAPI.class, "updatePrivateEntity", Transaction.class, long.class);
    PowerMockito.doReturn(null)
        .when(PrivateEntityDbAPI.class, updatePrivateEntityMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.updateState(searchToken, state, id);

    // Method is not expected to return due to exception thrown
  }
}
