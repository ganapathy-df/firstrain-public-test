/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 15:51:42 GMT 2018
 */

package com.firstrain.web.interceptor;

import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertTrue;

import com.firstrain.frapi.customapirepository.impl.DocCategorizeRepositoryImpl;
import com.firstrain.web.service.core.UserActivityService;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.params.DefaultHttpParams;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.web.servlet.ModelAndView;

public class UserActivityTrackingInterceptorESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		UserActivityTrackingInterceptor userActivityTrackingInterceptor0 =
				new UserActivityTrackingInterceptor();
		DocCategorizeRepositoryImpl docCategorizeRepositoryImpl0 = new DocCategorizeRepositoryImpl();
		UserActivityService userActivityService0 = arrangeData(userActivityTrackingInterceptor0, docCategorizeRepositoryImpl0); 
		HttpClient httpClient0 = new HttpClient();
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = arrangeData(userActivityService0, httpClient0, userActivityTrackingInterceptor0);
		HttpServletRequest httpServletRequest0 =
				mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
		HttpServletRequestWrapper httpServletRequestWrapper0 =
				new HttpServletRequestWrapper(httpServletRequest0);
		HttpServletResponse httpServletResponse0 =
				mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 =
				new HttpServletResponseWrapper(httpServletResponse0);
		boolean boolean0 =
				userActivityTrackingInterceptor0.preHandle(
						httpServletRequestWrapper0, httpServletResponseWrapper0, userActivityService0);
		assertTrue(boolean0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test1() throws Exception {
		UserActivityTrackingInterceptor userActivityTrackingInterceptor0 =
				new UserActivityTrackingInterceptor();
		DocCategorizeRepositoryImpl docCategorizeRepositoryImpl0 = new DocCategorizeRepositoryImpl();
		UserActivityService userActivityService0 = arrangeData(userActivityTrackingInterceptor0, docCategorizeRepositoryImpl0); 
		DefaultHttpParams defaultHttpParams0 = new DefaultHttpParams();
		HttpClientParams httpClientParams0 = new HttpClientParams(defaultHttpParams0);
		MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager0 =
				new MultiThreadedHttpConnectionManager();
		HttpClient httpClient0 = new HttpClient(httpClientParams0,
				multiThreadedHttpConnectionManager0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = arrangeData(userActivityService0, httpClient0, userActivityTrackingInterceptor0);
		HttpServletResponse httpServletResponse0 =
				mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 =
				new HttpServletResponseWrapper(httpServletResponse0);
		ModelAndView modelAndView0 = new ModelAndView();
		userActivityTrackingInterceptor0.postHandle(
				null,
				httpServletResponseWrapper0,
				docCategorizeRepositoryImpl0,
				modelAndView0);
	}

	@Test(timeout = 4000)
	public void test2() throws Exception {
		UserActivityTrackingInterceptor userActivityTrackingInterceptor0 =
				new UserActivityTrackingInterceptor();
		DocCategorizeRepositoryImpl docCategorizeRepositoryImpl0 = new DocCategorizeRepositoryImpl();
		UserActivityService userActivityService0 = arrangeData(userActivityTrackingInterceptor0, docCategorizeRepositoryImpl0); 
		HttpClientParams httpClientParams0 = new HttpClientParams();
		HttpClient httpClient0 = new HttpClient(httpClientParams0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = arrangeData(userActivityService0, httpClient0, userActivityTrackingInterceptor0);
		HttpServletRequest httpServletRequest0 =
				mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
		doReturn(threadPoolTaskExecutor0).when(httpServletRequest0).getAttribute(anyString());
		HttpServletRequestWrapper httpServletRequestWrapper0 =
				new HttpServletRequestWrapper(httpServletRequest0);
		HttpServletResponse httpServletResponse0 =
				mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 =
				new HttpServletResponseWrapper(httpServletResponse0);
		userActivityTrackingInterceptor0.postHandle(
				httpServletRequestWrapper0,
				httpServletResponseWrapper0,
				null,
				null);
	}

	private ThreadPoolTaskExecutor arrangeData(final UserActivityService userActivityService0, final HttpClient httpClient0, final UserActivityTrackingInterceptor userActivityTrackingInterceptor0) {
		Injector.inject(
				userActivityService0,
				com.firstrain.web.service.core.UserActivityService.class,
				"httpClient",
				httpClient0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				userActivityService0,
				com.firstrain.web.service.core.UserActivityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(userActivityService0,
				com.firstrain.web.service.core.UserActivityService.class);
		Injector.inject(
				userActivityTrackingInterceptor0,
				com.firstrain.web.interceptor.UserActivityTrackingInterceptor.class,
				"userActivityService",
				userActivityService0);
		Injector.validateBean(
				userActivityTrackingInterceptor0,
				com.firstrain.web.interceptor.UserActivityTrackingInterceptor.class);
		return threadPoolTaskExecutor0;
	}
 
	private UserActivityService arrangeData(final UserActivityTrackingInterceptor userActivityTrackingInterceptor0, final DocCategorizeRepositoryImpl docCategorizeRepositoryImpl0) { 
		Injector.inject( 
				userActivityTrackingInterceptor0, 
				com.firstrain.web.interceptor.UserActivityTrackingInterceptor.class, 
				"docCategorizeRepositoryImpl", 
				docCategorizeRepositoryImpl0); 
		UserActivityService userActivityService0 = new UserActivityService(); 
		return userActivityService0; 
	} 
}
