package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.common.db.jpa.PersistenceProvider;
import com.firstrain.common.db.jpa.Transaction;
import com.firstrain.content.similarity.DocumentSimilarityUtil;
import com.firstrain.db.api.EmailScheduleDbAPI;
import com.firstrain.db.api.ItemsDbAPI;
import com.firstrain.db.api.MailLogDbAPI;
import com.firstrain.db.api.TemplateDbAPI;
import com.firstrain.db.obj.EmailSchedule;
import com.firstrain.db.obj.Items;
import com.firstrain.db.obj.MailLog;
import com.firstrain.db.obj.Template;
import com.firstrain.frapi.config.ServiceConfig;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.SolrSearcher;
import java.lang.reflect.Method;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.SolrServer;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class EmailServiceRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EmailServiceRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, PersistenceProvider.class})
  @Test
  public void getEmailLogByIdInputPositiveOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long emailId = 8L;
    final MailLog mailLog = (MailLog) Reflector.getInstance("com.firstrain.db.obj.MailLog");
    final Method fetchUserEmailLogByIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class, "fetchUserEmailLogById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(mailLog))
        .when(MailLogDbAPI.class, fetchUserEmailLogByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getEmailLogById(emailId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getEmailLogByIdInputPositiveOutputNullPointerException2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long emailId = 8L;
    final MailLog mailLog = (MailLog) Reflector.getInstance("com.firstrain.db.obj.MailLog");
    final Method fetchUserEmailLogByIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class, "fetchUserEmailLogById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(mailLog))
        .when(MailLogDbAPI.class, fetchUserEmailLogByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(transaction))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getEmailLogById(emailId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, PersistenceProvider.class})
  @Test
  public void getEmailLogByIdInputZeroOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest = new EmailServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long emailId = 0L;
    final MailLog mailLog = (MailLog) Reflector.getInstance("com.firstrain.db.obj.MailLog");
    final Method fetchUserEmailLogByIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class, "fetchUserEmailLogById", Transaction.class, long.class);
    PowerMockito.doReturn(mailLog)
        .when(MailLogDbAPI.class, fetchUserEmailLogByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final MailLog retval = objectUnderTest.getEmailLogById(emailId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getEmailLogByIdInputZeroOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest = new EmailServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long emailId = 0L;
    final MailLog mailLog = (MailLog) Reflector.getInstance("com.firstrain.db.obj.MailLog");
    final Method fetchUserEmailLogByIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class, "fetchUserEmailLogById", Transaction.class, long.class);
    PowerMockito.doReturn(mailLog)
        .when(MailLogDbAPI.class, fetchUserEmailLogByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final MailLog retval = objectUnderTest.getEmailLogById(emailId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, Logger.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getEmailLogByIdInputZeroOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long emailId = 0L;
    final MailLog mailLog = (MailLog) Reflector.getInstance("com.firstrain.db.obj.MailLog");
    final Method fetchUserEmailLogByIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class, "fetchUserEmailLogById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(mailLog))
        .when(MailLogDbAPI.class, fetchUserEmailLogByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(transaction))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final MailLog retval = objectUnderTest.getEmailLogById(emailId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, Logger.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getEmailLogByIdInputZeroOutputNotNull4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long emailId = 0L;
    final MailLog mailLog = (MailLog) Reflector.getInstance("com.firstrain.db.obj.MailLog");
    final Method fetchUserEmailLogByIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class, "fetchUserEmailLogById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(mailLog))
        .when(MailLogDbAPI.class, fetchUserEmailLogByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final MailLog retval = objectUnderTest.getEmailLogById(emailId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, Logger.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getEmailLogByIdInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long emailId = 0L;
    final Method fetchUserEmailLogByIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class, "fetchUserEmailLogById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(MailLogDbAPI.class, fetchUserEmailLogByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final MailLog retval = objectUnderTest.getEmailLogById(emailId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EmailScheduleDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getEmailScheduleInputPositiveOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(EmailScheduleDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EmailServiceRepositoryImpl emailServiceRepositoryImpl =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(emailServiceRepositoryImpl, "servicesAPIUtil", null);
    Reflector.setField(emailServiceRepositoryImpl, "LOG", null);
    Reflector.setField(emailServiceRepositoryImpl, "entitySolrServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "searcher", null);
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "quoteSolrServer", solrServer);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "entitySolrServer", solrServer1);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    hashMap.put(null, null);
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(emailServiceRepositoryImpl, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        emailServiceRepositoryImpl,
        "LOG",
        null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(emailServiceRepositoryImpl, "docImageServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(emailServiceRepositoryImpl, "entityInfoCache", null);
    Reflector.setField(emailServiceRepositoryImpl, "docSolrServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "twitterGroupServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "twitterServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", emailServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig1 =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig1, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig1, "entitySolrServerUrl", "");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(serviceConfig1, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig1, "companyModelServer", solrServer2);
    Reflector.setField(serviceConfig1, "eventSolrServerUrl", "");
    final HashMap<String, String> hashMap1 = new HashMap<String, String>();
    Reflector.setField(serviceConfig1, "props", hashMap1);
    Reflector.setField(serviceConfig1, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig1, "secSolrServer", null);
    Reflector.setField(serviceConfig1, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig1, "docSolrServer", null);
    Reflector.setField(serviceConfig1, "personDocServer", null);
    Reflector.setField(serviceConfig1, "companyModelServerURL", null);
    Reflector.setField(serviceConfig1, "quoteSolrServer", null);
    Reflector.setField(serviceConfig1, "distributedSearchFile", null);
    Reflector.setField(serviceConfig1, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig1, "eventSolrServer", null);
    Reflector.setField(serviceConfig1, "docImageSolrServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig1, "peopleSolrServer", solrServer3);
    Reflector.setField(serviceConfig1, "personDocServerURL", null);
    Reflector.setField(serviceConfig1, "twitterSolrServer", null);
    Reflector.setField(serviceConfig1, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig1, "entitySolrServer", solrServer4);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig1, "userSearchesSolrServer", solrServer5);
    Reflector.setField(serviceConfig1, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig1, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig1, "faviconSolrServer", null);
    Reflector.setField(serviceConfig1, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "solrVsPingQ", null);
    Reflector.setField(serviceConfig1, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "tweetGroupSolrServerURL", "");
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig1);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long scheduleId = 3L;
    final EmailSchedule emailSchedule =
        (EmailSchedule) Reflector.getInstance("com.firstrain.db.obj.EmailSchedule");
    final Method fetchEmailScheduleByIdMethod =
        DTUMemberMatcher.method(
            EmailScheduleDbAPI.class, "fetchEmailScheduleById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(emailSchedule))
        .when(EmailScheduleDbAPI.class, fetchEmailScheduleByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getEmailSchedule(scheduleId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EmailScheduleDbAPI.class, PersistenceProvider.class})
  @Test
  public void getEmailScheduleInputZeroOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(EmailScheduleDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest = new EmailServiceRepositoryImpl();
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    final EmailServiceRepositoryImpl emailServiceRepositoryImpl = new EmailServiceRepositoryImpl();
    Reflector.setField(emailServiceRepositoryImpl, "servicesAPIUtil", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(emailServiceRepositoryImpl, "LOG", logger);
    Reflector.setField(emailServiceRepositoryImpl, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(emailServiceRepositoryImpl, "searcher", solrSearcher);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setSecSolrServer(solrServer);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setEntitySolrServer(solrServer1);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(emailServiceRepositoryImpl, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        emailServiceRepositoryImpl,
        "LOG",
        null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "docImageServer", solrServer2);
    Reflector.setField(emailServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(emailServiceRepositoryImpl, "entityInfoCache", null);
    emailServiceRepositoryImpl.setDocSolrServer(null);
    Reflector.setField(emailServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "twitterGroupServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "twitterServer", solrServer3);
    Reflector.setField(emailServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", emailServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long scheduleId = 0L;
    final EmailSchedule emailSchedule =
        (EmailSchedule) Reflector.getInstance("com.firstrain.db.obj.EmailSchedule");
    final Method fetchEmailScheduleByIdMethod =
        DTUMemberMatcher.method(
            EmailScheduleDbAPI.class, "fetchEmailScheduleById", Transaction.class, long.class);
    PowerMockito.doReturn(emailSchedule)
        .when(EmailScheduleDbAPI.class, fetchEmailScheduleByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final EmailSchedule retval = objectUnderTest.getEmailSchedule(scheduleId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EmailScheduleDbAPI.class, Logger.class, PersistenceProvider.class})
  @Test
  public void getEmailScheduleInputZeroOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(EmailScheduleDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EmailServiceRepositoryImpl emailServiceRepositoryImpl =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(emailServiceRepositoryImpl, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(emailServiceRepositoryImpl, "LOG", logger);
    Reflector.setField(emailServiceRepositoryImpl, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(emailServiceRepositoryImpl, "searcher", solrSearcher);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setSecSolrServer(solrServer);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setEntitySolrServer(solrServer1);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(emailServiceRepositoryImpl, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        emailServiceRepositoryImpl,
        "LOG",
        null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "docImageServer", solrServer2);
    Reflector.setField(emailServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(emailServiceRepositoryImpl, "entityInfoCache", null);
    emailServiceRepositoryImpl.setDocSolrServer(null);
    Reflector.setField(emailServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "twitterGroupServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "twitterServer", solrServer3);
    Reflector.setField(emailServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", emailServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long scheduleId = 0L;
    final EmailSchedule emailSchedule =
        (EmailSchedule) Reflector.getInstance("com.firstrain.db.obj.EmailSchedule");
    final Method fetchEmailScheduleByIdMethod =
        DTUMemberMatcher.method(
            EmailScheduleDbAPI.class, "fetchEmailScheduleById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(emailSchedule))
        .when(EmailScheduleDbAPI.class, fetchEmailScheduleByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final EmailSchedule retval = objectUnderTest.getEmailSchedule(scheduleId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EmailScheduleDbAPI.class,
    Logger.class,
    Transaction.class,
    PersistenceProvider.class
  })
  @Test
  public void getEmailScheduleInputZeroOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(EmailScheduleDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EmailServiceRepositoryImpl emailServiceRepositoryImpl =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(emailServiceRepositoryImpl, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(emailServiceRepositoryImpl, "LOG", logger);
    Reflector.setField(emailServiceRepositoryImpl, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(emailServiceRepositoryImpl, "searcher", solrSearcher);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setSecSolrServer(solrServer);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setEntitySolrServer(solrServer1);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(emailServiceRepositoryImpl, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        emailServiceRepositoryImpl,
        "LOG",
        null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "docImageServer", solrServer2);
    Reflector.setField(emailServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(emailServiceRepositoryImpl, "entityInfoCache", null);
    emailServiceRepositoryImpl.setDocSolrServer(null);
    Reflector.setField(emailServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "twitterGroupServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "twitterServer", solrServer3);
    Reflector.setField(emailServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", emailServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long scheduleId = 0L;
    final EmailSchedule emailSchedule =
        (EmailSchedule) Reflector.getInstance("com.firstrain.db.obj.EmailSchedule");
    final Method fetchEmailScheduleByIdMethod =
        DTUMemberMatcher.method(
            EmailScheduleDbAPI.class, "fetchEmailScheduleById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(emailSchedule))
        .when(EmailScheduleDbAPI.class, fetchEmailScheduleByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(null))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final EmailSchedule retval = objectUnderTest.getEmailSchedule(scheduleId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EmailScheduleDbAPI.class,
    Logger.class,
    Transaction.class,
    PersistenceProvider.class
  })
  @Test
  public void getEmailScheduleInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(EmailScheduleDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EmailServiceRepositoryImpl emailServiceRepositoryImpl =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(emailServiceRepositoryImpl, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(emailServiceRepositoryImpl, "LOG", logger);
    Reflector.setField(emailServiceRepositoryImpl, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(emailServiceRepositoryImpl, "searcher", solrSearcher);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setSecSolrServer(solrServer);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setEntitySolrServer(solrServer1);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(emailServiceRepositoryImpl, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        emailServiceRepositoryImpl,
        "LOG",
        null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "docImageServer", solrServer2);
    Reflector.setField(emailServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(emailServiceRepositoryImpl, "entityInfoCache", null);
    emailServiceRepositoryImpl.setDocSolrServer(null);
    Reflector.setField(emailServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "twitterGroupServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "twitterServer", solrServer3);
    Reflector.setField(emailServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", emailServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long scheduleId = 0L;
    final Method fetchEmailScheduleByIdMethod =
        DTUMemberMatcher.method(
            EmailScheduleDbAPI.class, "fetchEmailScheduleById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(EmailScheduleDbAPI.class, fetchEmailScheduleByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(null))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final EmailSchedule retval = objectUnderTest.getEmailSchedule(scheduleId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EmailScheduleDbAPI.class,
    Logger.class,
    Transaction.class,
    PersistenceProvider.class
  })
  @Test
  public void getEmailScheduleInputZeroOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(EmailScheduleDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EmailServiceRepositoryImpl emailServiceRepositoryImpl =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(emailServiceRepositoryImpl, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(emailServiceRepositoryImpl, "LOG", logger);
    Reflector.setField(emailServiceRepositoryImpl, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(emailServiceRepositoryImpl, "searcher", solrSearcher);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setSecSolrServer(solrServer);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setEntitySolrServer(solrServer1);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(emailServiceRepositoryImpl, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        emailServiceRepositoryImpl,
        "LOG",
        null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "docImageServer", solrServer2);
    Reflector.setField(emailServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(emailServiceRepositoryImpl, "entityInfoCache", null);
    emailServiceRepositoryImpl.setDocSolrServer(null);
    Reflector.setField(emailServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(emailServiceRepositoryImpl, "twitterGroupServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(emailServiceRepositoryImpl, "twitterServer", solrServer3);
    Reflector.setField(emailServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", emailServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long scheduleId = 0L;
    final Method fetchEmailScheduleByIdMethod =
        DTUMemberMatcher.method(
            EmailScheduleDbAPI.class, "fetchEmailScheduleById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(EmailScheduleDbAPI.class, fetchEmailScheduleByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final EmailSchedule retval = objectUnderTest.getEmailSchedule(scheduleId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, Logger.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getMailLogInputPositiveNotNullZeroOutput0() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(servicesAPIUtil, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final Logger logger2 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger2);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final long scheduleId = 4L;
    final Timestamp sentTime = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    final int sentStatus = 0;
    final ArrayList arrayList = new ArrayList();
    final Method fetchUserEmailLogByScheduleIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class,
            "fetchUserEmailLogByScheduleId",
            long.class,
            Timestamp.class,
            int.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(arrayList))
        .when(MailLogDbAPI.class, fetchUserEmailLogByScheduleIdMethod)
        .withArguments(anyLong(), or(isA(Timestamp.class), isNull(Timestamp.class)), anyInt());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<MailLog> retval = objectUnderTest.getMailLog(scheduleId, sentTime, sentStatus);

    // Assert
    final ArrayList<MailLog> arrayList1 = new ArrayList<MailLog>();
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, Logger.class, PersistenceProvider.class})
  @Test
  public void getMailLogInputPositiveNotNullZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(servicesAPIUtil, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final Logger logger2 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger2);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final long scheduleId = 4L;
    final Timestamp sentTime = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    final int sentStatus = 0;
    final Method fetchUserEmailLogByScheduleIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class,
            "fetchUserEmailLogByScheduleId",
            long.class,
            Timestamp.class,
            int.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(MailLogDbAPI.class, fetchUserEmailLogByScheduleIdMethod)
        .withArguments(anyLong(), or(isA(Timestamp.class), isNull(Timestamp.class)), anyInt());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<MailLog> retval = objectUnderTest.getMailLog(scheduleId, sentTime, sentStatus);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, Logger.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getMailLogInputPositiveNotNullZeroOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(servicesAPIUtil, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final Logger logger2 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger2);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final long scheduleId = 4L;
    final Timestamp sentTime = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    final int sentStatus = 0;
    final Method fetchUserEmailLogByScheduleIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class,
            "fetchUserEmailLogByScheduleId",
            long.class,
            Timestamp.class,
            int.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(MailLogDbAPI.class, fetchUserEmailLogByScheduleIdMethod)
        .withArguments(anyLong(), or(isA(Timestamp.class), isNull(Timestamp.class)), anyInt());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(null))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<MailLog> retval = objectUnderTest.getMailLog(scheduleId, sentTime, sentStatus);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MailLogDbAPI.class, Logger.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getMailLogInputPositiveNotNullZeroOutputNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(MailLogDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(servicesAPIUtil, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final Logger logger2 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger2);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final long scheduleId = 4L;
    final Timestamp sentTime = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    final int sentStatus = 0;
    final Method fetchUserEmailLogByScheduleIdMethod =
        DTUMemberMatcher.method(
            MailLogDbAPI.class,
            "fetchUserEmailLogByScheduleId",
            long.class,
            Timestamp.class,
            int.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(MailLogDbAPI.class, fetchUserEmailLogByScheduleIdMethod)
        .withArguments(anyLong(), or(isA(Timestamp.class), isNull(Timestamp.class)), anyInt());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final List<MailLog> retval = objectUnderTest.getMailLog(scheduleId, sentTime, sentStatus);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, PersistenceProvider.class})
  @Test
  public void getSearchByIdInputZeroOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest = new EmailServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long searchId = 0L;
    final Items items = (Items) Reflector.getInstance("com.firstrain.db.obj.Items");
    final Method getItemByIdMethod =
        DTUMemberMatcher.method(ItemsDbAPI.class, "getItemById", Transaction.class, long.class);
    PowerMockito.doReturn(items)
        .when(ItemsDbAPI.class, getItemByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Items retval = objectUnderTest.getSearchById(searchId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getSearchByIdInputZeroOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest = new EmailServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long searchId = 0L;
    final Items items = (Items) Reflector.getInstance("com.firstrain.db.obj.Items");
    final Method getItemByIdMethod =
        DTUMemberMatcher.method(ItemsDbAPI.class, "getItemById", Transaction.class, long.class);
    PowerMockito.doReturn(items)
        .when(ItemsDbAPI.class, getItemByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Items retval = objectUnderTest.getSearchById(searchId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Logger.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getSearchByIdInputZeroOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long searchId = 0L;
    final Items items = (Items) Reflector.getInstance("com.firstrain.db.obj.Items");
    final Method getItemByIdMethod =
        DTUMemberMatcher.method(ItemsDbAPI.class, "getItemById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(items))
        .when(ItemsDbAPI.class, getItemByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Items retval = objectUnderTest.getSearchById(searchId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Logger.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getSearchByIdInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long searchId = 0L;
    final Method getItemByIdMethod =
        DTUMemberMatcher.method(ItemsDbAPI.class, "getItemById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(ItemsDbAPI.class, getItemByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Items retval = objectUnderTest.getSearchById(searchId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Logger.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getSearchByIdInputZeroOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long searchId = 0L;
    final Method getItemByIdMethod =
        DTUMemberMatcher.method(ItemsDbAPI.class, "getItemById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(ItemsDbAPI.class, getItemByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(transaction))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Items retval = objectUnderTest.getSearchById(searchId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getSearchByIdInputZeroOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long searchId = 0L;
    final Method getItemByIdMethod =
        DTUMemberMatcher.method(ItemsDbAPI.class, "getItemById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(ItemsDbAPI.class, getItemByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(null))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getSearchById(searchId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getSearchByIdInputZeroOutputNullPointerException2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long searchId = 0L;
    final Method getItemByIdMethod =
        DTUMemberMatcher.method(ItemsDbAPI.class, "getItemById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(ItemsDbAPI.class, getItemByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getSearchById(searchId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TemplateDbAPI.class, PersistenceProvider.class})
  @Test
  public void getTemplateInputZeroOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TemplateDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest = new EmailServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long templateID = 0L;
    final Template template = (Template) Reflector.getInstance("com.firstrain.db.obj.Template");
    final Method getTemplateByTemplateIDMethod =
        DTUMemberMatcher.method(TemplateDbAPI.class, "getTemplateByTemplateID", long.class);
    PowerMockito.doReturn(template)
        .when(TemplateDbAPI.class, getTemplateByTemplateIDMethod)
        .withArguments(anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Template retval = objectUnderTest.getTemplate(templateID);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TemplateDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTemplateInputZeroOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TemplateDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest = new EmailServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long templateID = 0L;
    final Template template = (Template) Reflector.getInstance("com.firstrain.db.obj.Template");
    final Method getTemplateByTemplateIDMethod =
        DTUMemberMatcher.method(TemplateDbAPI.class, "getTemplateByTemplateID", long.class);
    PowerMockito.doReturn(template)
        .when(TemplateDbAPI.class, getTemplateByTemplateIDMethod)
        .withArguments(anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Template retval = objectUnderTest.getTemplate(templateID);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, TemplateDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTemplateInputZeroOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TemplateDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long templateID = 0L;
    final Template template = (Template) Reflector.getInstance("com.firstrain.db.obj.Template");
    final Method getTemplateByTemplateIDMethod =
        DTUMemberMatcher.method(TemplateDbAPI.class, "getTemplateByTemplateID", long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(template))
        .when(TemplateDbAPI.class, getTemplateByTemplateIDMethod)
        .withArguments(anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Template retval = objectUnderTest.getTemplate(templateID);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, TemplateDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTemplateInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TemplateDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long templateID = 0L;
    final Method getTemplateByTemplateIDMethod =
        DTUMemberMatcher.method(TemplateDbAPI.class, "getTemplateByTemplateID", long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(TemplateDbAPI.class, getTemplateByTemplateIDMethod)
        .withArguments(anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Template retval = objectUnderTest.getTemplate(templateID);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TemplateDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTemplateInputZeroOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TemplateDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", "");
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", "");
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", "");
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "peopleSolrServer", solrServer);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "twitterSolrServer", solrServer1);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "entitySolrServer", solrServer2);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", solrServer3);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", "");
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long templateID = 0L;
    final Template template = (Template) Reflector.getInstance("com.firstrain.db.obj.Template");
    final Method getTemplateByTemplateIDMethod =
        DTUMemberMatcher.method(TemplateDbAPI.class, "getTemplateByTemplateID", long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(template))
        .when(TemplateDbAPI.class, getTemplateByTemplateIDMethod)
        .withArguments(anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(null))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getTemplate(templateID);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TemplateDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTemplateInputZeroOutputNullPointerException2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TemplateDbAPI.class);

    // Arrange
    final EmailServiceRepositoryImpl objectUnderTest =
        (EmailServiceRepositoryImpl)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.EmailServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", "");
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", "");
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", "");
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "peopleSolrServer", solrServer);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "twitterSolrServer", solrServer1);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "entitySolrServer", solrServer2);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", solrServer3);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", "");
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long templateID = 0L;
    final Template template = (Template) Reflector.getInstance("com.firstrain.db.obj.Template");
    final Method getTemplateByTemplateIDMethod =
        DTUMemberMatcher.method(TemplateDbAPI.class, "getTemplateByTemplateID", long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(template))
        .when(TemplateDbAPI.class, getTemplateByTemplateIDMethod)
        .withArguments(anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getTemplate(templateID);

    // Method is not expected to return due to exception thrown
  }
}
