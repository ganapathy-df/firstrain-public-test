/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:22:01 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertNull;

import com.firstrain.frapi.repository.AccelerometerServiceRepository;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.MonitorServiceRepository;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.EntityInfoCache;
import java.util.Set;
import org.apache.solr.client.solrj.SolrServer;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.collection.PersistentIdentifierBag;
import org.hibernate.collection.PersistentMap;
import org.hibernate.collection.PersistentSortedMap;
import org.hibernate.collection.PersistentSortedSet;
import org.hibernate.engine.SessionImplementor;
import org.junit.Test;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

public class VisualizationServiceImplESTest {

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test0() throws Exception {
		VisualizationServiceImpl visualizationServiceImpl0 = new VisualizationServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		CompanyEndingWords companyEndingWords0 = new CompanyEndingWords();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"companyEndingWords", companyEndingWords0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getDocSolrServer();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		MonitorServiceRepository monitorServiceRepository0 = mock(MonitorServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"monitorServiceRepository", monitorServiceRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"taskExecutor", threadPoolTaskExecutor0);
		Injector.validateBean(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class);
		Injector.executePostConstruct(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class);
		PersistentMap persistentMap0 = new PersistentMap();
		// Undeclared exception!
		visualizationServiceImpl0.removeSubsidariesforIndustryVisualization(persistentMap0);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test1() throws Exception {
		VisualizationServiceImpl visualizationServiceImpl0 = new VisualizationServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		CompanyEndingWords companyEndingWords0 = new CompanyEndingWords();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"companyEndingWords", companyEndingWords0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getDocSolrServer();
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		MonitorServiceRepository monitorServiceRepository0 = mock(MonitorServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"monitorServiceRepository", monitorServiceRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"taskExecutor", threadPoolTaskExecutor0);
		Injector.validateBean(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class);
		Injector.executePostConstruct(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class);
		PersistentSortedMap persistentSortedMap0 = new PersistentSortedMap();
		PersistentSortedSet persistentSortedSet0 = new PersistentSortedSet();
		// Undeclared exception!
		visualizationServiceImpl0.removeSubsidaries(persistentSortedMap0, persistentSortedSet0);
	}

	@Test(timeout = 4000)
	public void test2() throws Exception {
		VisualizationServiceImpl visualizationServiceImpl0 = new VisualizationServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		CompanyEndingWords companyEndingWords0 = new CompanyEndingWords();
		Set<String> set0 = companyEndingWords0.getCompanyEndingWords();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"companyEndingWords", companyEndingWords0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getDocSolrServer();
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		MonitorServiceRepository monitorServiceRepository0 = mock(MonitorServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"monitorServiceRepository", monitorServiceRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"taskExecutor", threadPoolTaskExecutor0);
		Injector.validateBean(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class);
		Injector.executePostConstruct(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class);
		SessionImplementor sessionImplementor0 = mock(SessionImplementor.class,
				new ViolatedAssumptionAnswer());
		PersistentMap persistentMap0 = new PersistentMap(sessionImplementor0);
		visualizationServiceImpl0
				.removeSelfAndParentSubsidaryEntity(persistentMap0, persistentMap0, set0);
		assertNull(persistentMap0.getRole());
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test3() throws Exception {
		VisualizationServiceImpl visualizationServiceImpl0 = new VisualizationServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		CompanyEndingWords companyEndingWords0 = new CompanyEndingWords();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"companyEndingWords", companyEndingWords0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getDocSolrServer();
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		MonitorServiceRepository monitorServiceRepository0 = mock(MonitorServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"monitorServiceRepository", monitorServiceRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class,
				"taskExecutor", threadPoolTaskExecutor0);
		Injector.validateBean(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class);
		Injector.executePostConstruct(visualizationServiceImpl0,
				com.firstrain.frapi.service.impl.VisualizationServiceImpl.class);
		SessionImplementor sessionImplementor0 = mock(SessionImplementor.class,
				new ViolatedAssumptionAnswer());
		doReturn(false, false).when(sessionImplementor0).isOpen();
		PersistentMap persistentMap0 = new PersistentMap(sessionImplementor0);
		Set<String> set0 = EntityInfoCache.categoryTypes;
		// Undeclared exception!
		visualizationServiceImpl0
				.removeSelfAndParentSubsidaryEntity(persistentMap0, persistentMap0, set0);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test4() throws Exception {
		PersistentIdentifierBag persistentIdentifierBag0 = new PersistentIdentifierBag();
		// Undeclared exception!
		VisualizationServiceImpl.TrendingEntityComparator(persistentIdentifierBag0);
	}
}
