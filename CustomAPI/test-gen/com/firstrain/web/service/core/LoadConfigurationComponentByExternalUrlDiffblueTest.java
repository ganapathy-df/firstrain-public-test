package com.firstrain.web.service.core;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.web.util.LoadConfiguration;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.core.io.Resource;

@RunWith(PowerMockRunner.class)
public class LoadConfigurationComponentByExternalUrlDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: LoadConfigurationComponentByExternalUrl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DefaultResourceLoader.class,
    org.springframework.util.Assert.class,
    Resource.class
  })
  @Test
  public void loadIfModifiedInputNotNullOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(org.springframework.util.Assert.class);

    // Arrange
    final LoadConfigurationComponentByExternalUrl objectUnderTest =
        (LoadConfigurationComponentByExternalUrl)
            Reflector.getInstance(
                "com.firstrain.web.service.core.LoadConfigurationComponentByExternalUrl");
    Reflector.setField(objectUnderTest, "configurationQueue", null);
    final FRResourceUtils fRResourceUtils =
        (FRResourceUtils) Reflector.getInstance("com.firstrain.web.service.core.FRResourceUtils");
    final DefaultResourceLoader defaultResourceLoader =
        PowerMockito.mock(DefaultResourceLoader.class);
    final Resource resource = PowerMockito.mock(Resource.class);
    final Method getURIMethod = DTUMemberMatcher.method(Resource.class, "getURI");
    PowerMockito.doReturn(null).when(resource, getURIMethod).withNoArguments();
    final Method getResourceMethod =
        DTUMemberMatcher.method(DefaultResourceLoader.class, "getResource", String.class);
    PowerMockito.doReturn(resource)
        .when(defaultResourceLoader, getResourceMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(fRResourceUtils, "loader", defaultResourceLoader);
    Reflector.setField(objectUnderTest, "frResourceUtils", fRResourceUtils);
    final LoadConfiguration lc =
        (LoadConfiguration) Reflector.getInstance("com.firstrain.web.util.LoadConfiguration");
    Reflector.setField(lc, "filePath", "");
    Reflector.setField(lc, "lastModifiedTime", 0L);

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName(
              "com.firstrain.web.service.core.LoadConfigurationComponentByExternalUrl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "loadIfModified", Reflector.forName("com.firstrain.web.util.LoadConfiguration"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, lc);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }
}
