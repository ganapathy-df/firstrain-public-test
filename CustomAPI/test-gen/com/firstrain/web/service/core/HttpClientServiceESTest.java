/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 15:55:42 GMT 2018
 */

package com.firstrain.web.service.core;

import static org.evosuite.shaded.org.mockito.Mockito.mock;

import com.fasterxml.jackson.core.type.TypeReference;
import java.time.ZoneId;
import java.util.AbstractMap;
import java.util.Map;
import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.SimpleHttpConnectionManager;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;

public class HttpClientServiceESTest {

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test0() throws Exception {
		HttpClientService httpClientService0 = new HttpClientService();
		SimpleHttpConnectionManager simpleHttpConnectionManager0 = new SimpleHttpConnectionManager();
		HttpClient httpClient0 = new HttpClient(simpleHttpConnectionManager0);
		Injector.inject(
				httpClientService0, com.firstrain.web.service.core.HttpClientService.class,
				"httpClient",
				httpClient0);
		Injector.validateBean(httpClientService0,
				com.firstrain.web.service.core.HttpClientService.class);
		Class<String> class0 = String.class;
		Header[] headerArray0 = new Header[9];
		httpClientService0.postDataInReqBody(
				"com.firstrain.web.service.core.HttpClientService",
				"com.firstrain.web.service.core.HttpClientService",
				"com.firstrain.web.service.core.HttpClientService",
				class0,
				headerArray0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test1() throws Exception {
		HttpClientService httpClientService0 = new HttpClientService();
		HttpClientParams httpClientParams0 = new HttpClientParams();
		HttpClient httpClient0 = new HttpClient(httpClientParams0);
		Map<String, String> map0 = arrangeData(httpClientService0, httpClient0); 
		httpClientService0.getData("http.connection-manager.class", "", map0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test2() throws Exception {
		HttpClientService httpClientService0 = new HttpClientService();
		HttpClientParams httpClientParams0 = new HttpClientParams();
		MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager0 =
				new MultiThreadedHttpConnectionManager();
		HttpClient httpClient0 = new HttpClient(httpClientParams0,
				multiThreadedHttpConnectionManager0);
		Injector.inject(
				httpClientService0, com.firstrain.web.service.core.HttpClientService.class,
				"httpClient",
				httpClient0);
		Injector.validateBean(httpClientService0,
				com.firstrain.web.service.core.HttpClientService.class);
		TypeReference<AbstractMap.SimpleImmutableEntry<Integer, Object>> typeReference0 =
				(TypeReference<AbstractMap.SimpleImmutableEntry<Integer, Object>>)
						mock(TypeReference.class, new ViolatedAssumptionAnswer());
		httpClientService0.getData("", "application/json", typeReference0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test3() throws Exception {
		HttpClientService httpClientService0 = new HttpClientService();
		HttpClient httpClient0 = new HttpClient();
		Map<String, String> map0 = arrangeData(httpClientService0, httpClient0); 
		TypeReference<Object> typeReference0 =
				(TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
		httpClientService0.getData("wF", "wF", map0, typeReference0);
	}
 
	private Map<String, String> arrangeData(final HttpClientService httpClientService0, final HttpClient httpClient0) { 
		Injector.inject( 
				httpClientService0, com.firstrain.web.service.core.HttpClientService.class, 
				"httpClient", 
				httpClient0); 
		Injector.validateBean(httpClientService0, 
				com.firstrain.web.service.core.HttpClientService.class); 
		Map<String, String> map0 = ZoneId.SHORT_IDS; 
		return map0; 
	} 
}
