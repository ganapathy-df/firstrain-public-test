package com.firstrain.web.service.core;

import static org.junit.Assert.assertEquals;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.Document;
import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.apache.commons.collections.CollectionUtils;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class StorageServiceDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: StorageService */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({DocumentSet.class, CollectionUtils.class})
  @Test
  public void getListOfIdsfromDocumentSetInputNotNullOutput0() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(CollectionUtils.class);

    // Arrange
    final StorageService objectUnderTest = new StorageService();
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "storageServiceUrl", "");
    final HttpClientService httpClientService =
        (HttpClientService)
            Reflector.getInstance("com.firstrain.web.service.core.HttpClientService");
    Reflector.setField(objectUnderTest, "httpClientService", httpClientService);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    final ArrayList arrayList = new ArrayList();
    final Method getDocumentsMethod = DTUMemberMatcher.method(DocumentSet.class, "getDocuments");
    PowerMockito.doReturn(arrayList).when(documentSet, getDocumentsMethod).withNoArguments();
    final Method isEmptyMethod =
        DTUMemberMatcher.method(CollectionUtils.class, "isEmpty", Collection.class);
    PowerMockito.doReturn(false)
        .when(CollectionUtils.class, isEmptyMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final List<String> retval = objectUnderTest.getListOfIdsfromDocumentSet(documentSet);

    // Assert
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Document.class, DocumentSet.class, CollectionUtils.class})
  @Test
  public void getListOfIdsfromDocumentSetInputNotNullOutput1() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(CollectionUtils.class);

    // Arrange
    final StorageService objectUnderTest = new StorageService();
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "storageServiceUrl", "");
    final HttpClientService httpClientService =
        (HttpClientService)
            Reflector.getInstance("com.firstrain.web.service.core.HttpClientService");
    Reflector.setField(objectUnderTest, "httpClientService", httpClientService);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    final ArrayList arrayList = new ArrayList();
    final Document document = PowerMockito.mock(Document.class);
    final Method getIdMethod = DTUMemberMatcher.method(Document.class, "getId");
    PowerMockito.doReturn(null).when(document, getIdMethod).withNoArguments();
    arrayList.add(document);
    final Method getDocumentsMethod = DTUMemberMatcher.method(DocumentSet.class, "getDocuments");
    PowerMockito.doReturn(arrayList).when(documentSet, getDocumentsMethod).withNoArguments();
    final Method isEmptyMethod =
        DTUMemberMatcher.method(CollectionUtils.class, "isEmpty", Collection.class);
    PowerMockito.doReturn(false)
        .when(CollectionUtils.class, isEmptyMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final List<String> retval = objectUnderTest.getListOfIdsfromDocumentSet(documentSet);

    // Assert
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    arrayList1.add(null);
    assertEquals(arrayList1, retval);
  }
}
