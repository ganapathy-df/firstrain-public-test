package com.firstrain.web.service.staticdata;

import com.diffblue.deeptestutils.Reflector;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

public class ConstantDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: Constant */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getAppNameOutputNullPointerException() {

    // Act
    thrown.expect(NullPointerException.class);
    Constant.getAppName();

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getImgCssURLOutputNullPointerException() {

    // Act
    thrown.expect(NullPointerException.class);
    Constant.getImgCssURL();

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getJsURLOutputNullPointerException() {

    // Act
    thrown.expect(NullPointerException.class);
    Constant.getJsURL();

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getVersionOutputNullPointerException() {

    // Act
    thrown.expect(NullPointerException.class);
    Constant.getVersion();

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void initOutputNullPointerException() throws Throwable {

    // Arrange
    final Constant objectUnderTest =
        (Constant) Reflector.getInstance("com.firstrain.web.service.staticdata.Constant");
    Reflector.setField(objectUnderTest, "appName", null);
    Reflector.setField(objectUnderTest, "jsURL", null);
    Reflector.setField(objectUnderTest, "version", null);
    Reflector.setField(objectUnderTest, "imgCssURL", null);
    Reflector.setField(objectUnderTest, "servletContext", null);

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.web.service.staticdata.Constant");
      final Method methodUnderTest = classUnderTest.getDeclaredMethod("init");
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }
}
