package com.firstrain.web.service.core;

import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.firstrain.web.util.LoadConfiguration;
import com.firstrain.web.util.ProjectConfig.EnterpriseConfig;
import java.util.ArrayList;
import java.util.HashMap;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.springframework.oxm.Marshaller;
import org.springframework.oxm.Unmarshaller;

public class EnterpriseConfigLoaderDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EnterpriseConfigLoader */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getEnterpriseConfigInputNullOutputNull() throws Exception {

    // Arrange
    final EnterpriseConfigLoader objectUnderTest = new EnterpriseConfigLoader();
    final HashMap<String, EnterpriseConfig> hashMap = new HashMap<String, EnterpriseConfig>();
    Reflector.setField(objectUnderTest, "configMap", hashMap);
    final Unmarshaller unmarshaller =
        (Unmarshaller) Reflector.getInstance("org.springframework.oxm.Unmarshaller");
    objectUnderTest.setUnmarshaller(unmarshaller);
    final LoadConfigurationComponent loadConfigurationComponent = new LoadConfigurationComponent();
    final ArrayList<LoadConfiguration> arrayList = new ArrayList<LoadConfiguration>();
    Reflector.setField(loadConfigurationComponent, "configurationQueue", arrayList);
    Reflector.setField(objectUnderTest, "loadConfigurationComponent", loadConfigurationComponent);
    final Marshaller marshaller =
        (Marshaller) Reflector.getInstance("org.springframework.oxm.Marshaller");
    objectUnderTest.setMarshaller(marshaller);
    objectUnderTest.setFilePath(null);
    objectUnderTest.setLastModifiedTime(0L);
    final String accessToken = null;

    // Act
    final EnterpriseConfig retval = objectUnderTest.getEnterpriseConfig(accessToken);

    // Assert
    assertNull(retval);
  }
}
