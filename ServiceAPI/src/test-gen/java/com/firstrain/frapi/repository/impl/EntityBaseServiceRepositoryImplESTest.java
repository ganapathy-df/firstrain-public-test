/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:47:51 GMT 2018
 */

package com.firstrain.frapi.repository.impl;

import com.firstrain.frapi.config.ServiceConfig;
import com.firstrain.solr.client.EntityInfoCacheLucene;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class EntityBaseServiceRepositoryImplESTest {

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test00() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		entityBaseServiceRepositoryImpl0.setDocSolrServer(null);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test01() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		SolrDocumentList solrDocumentList0 = new SolrDocumentList();
		Class<EntityInfoCacheLucene.EntityInfo> class0 = EntityInfoCacheLucene.EntityInfo.class;
		BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
		SolrDocument solrDocument0 = new SolrDocument();
		solrDocumentList0.add(solrDocument0);
		Namespace namespace0 = Namespace.NO_NAMESPACE;
		BeanElement beanElement0 = new BeanElement("ServiceConfig.xml", namespace0, beanMetaData0);
		BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
		entityBaseServiceRepositoryImpl0
				.populateCompanyTopicsFromSolrDocs(solrDocumentList0, beanAttributeList0,
						beanAttributeList0, beanAttributeList0);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test02() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		SolrDocumentList solrDocumentList0 = new SolrDocumentList();
		Class<EntityInfoCacheLucene.EntityInfo> class0 = EntityInfoCacheLucene.EntityInfo.class;
		BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
		Namespace namespace0 = Namespace.NO_NAMESPACE;
		BeanElement beanElement0 = new BeanElement("ServiceConfig.xml", namespace0, beanMetaData0);
		BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
		entityBaseServiceRepositoryImpl0
				.populateCompanyTopicsFromSolrDocs(solrDocumentList0, beanAttributeList0,
						beanAttributeList0, beanAttributeList0);
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = Exception.class)
	public void test03() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		entityBaseServiceRepositoryImpl0.init();
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test04() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		entityBaseServiceRepositoryImpl0.getTwitterServer();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test05() throws Exception {
		ServiceConfig serviceConfig0 = new ServiceConfig();
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		entityBaseServiceRepositoryImpl0.getTwitterGroupServer();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = ClassCastException.class)
	public void test06() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		Namespace namespace0 = new Namespace("8G}", "8G}");
		QName qName0 = new QName("ServiceConfig.xml", namespace0, "8G}");
		BeanElement beanElement0 = new BeanElement(qName0, "8G}");
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
		String[] stringArray0 = new String[3];
		entityBaseServiceRepositoryImpl0
				.getSolrDocFromIndustryAndBizlineCatIds(beanAttributeList0, beanAttributeList0,
						stringArray0, false, false);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test07() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		entityBaseServiceRepositoryImpl0.getSolrDocForSourceSearchToken("");
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test08() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		entityBaseServiceRepositoryImpl0.getSearcher();
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test09() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		entityBaseServiceRepositoryImpl0.getPeopleServer();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test10() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		entityBaseServiceRepositoryImpl0.getFavIconServer();
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test11() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		entityBaseServiceRepositoryImpl0.getEventServer();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test12() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		entityBaseServiceRepositoryImpl0
				.getSolrDocForSourceSearchToken("java:comp/env/FR/PortalServices/ServiceConfig");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test13() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		entityBaseServiceRepositoryImpl0.getEntityInfoCache();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test14() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		// Undeclared exception!
		entityBaseServiceRepositoryImpl0.getDocumentSimilarityUtil();
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test15() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		entityBaseServiceRepositoryImpl0.getDocSolrServer();
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test16() throws Exception {
		EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl0 = new EntityBaseServiceRepositoryImpl();
		entityBaseServiceRepositoryImpl0.getDocImageServer();
		ServiceConfig serviceConfig0 = new ServiceConfig();
		Injector
				.inject(entityBaseServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
						"serviceConfig", serviceConfig0);
		Injector.validateBean(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		// Undeclared exception!
		Injector.executePostConstruct(entityBaseServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
	}
}
