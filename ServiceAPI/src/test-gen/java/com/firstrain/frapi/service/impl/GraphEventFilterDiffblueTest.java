package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.firstrain.frapi.events.IEvents;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

public class GraphEventFilterDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: GraphEventFilter */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getEventTypeIdInputNullOutputNullPointerException() throws Throwable {

    // Arrange
    final GraphEventFilter objectUnderTest = new GraphEventFilter();
    final IEvents event = null;

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.GraphEventFilter");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getEventTypeId", Reflector.forName("com.firstrain.frapi.events.IEvents"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, event);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getQualifiedEventForGraphInput0OutputIndexOutOfBoundsException() throws Throwable {

    // Arrange
    final GraphEventFilter objectUnderTest = new GraphEventFilter();
    final ArrayList<IEvents> dailyEvents = new ArrayList<IEvents>();

    // Act
    thrown.expect(IndexOutOfBoundsException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.GraphEventFilter");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getQualifiedEventForGraph", Reflector.forName("java.util.List"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, dailyEvents);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getQualifiedEventForGraphInput1OutputNull() throws Exception {

    // Arrange
    final GraphEventFilter objectUnderTest = new GraphEventFilter();
    final ArrayList<IEvents> dailyEvents = new ArrayList<IEvents>();
    dailyEvents.add(null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.GraphEventFilter");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getQualifiedEventForGraph", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final IEvents retval = (IEvents) methodUnderTest.invoke(objectUnderTest, dailyEvents);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getStockPriceChangeInputNullOutputNullPointerException() throws Throwable {

    // Arrange
    final GraphEventFilter objectUnderTest = new GraphEventFilter();
    final IEvents e = null;

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.GraphEventFilter");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getStockPriceChange", Reflector.forName("com.firstrain.frapi.events.IEvents"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, e);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }
}
