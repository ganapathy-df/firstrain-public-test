/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 28 17:13:42 GMT 2018
 */

package com.firstrain.frapi.pojo;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import com.firstrain.frapi.domain.MetaShare;
import com.firstrain.frapi.domain.MgmtTurnoverMeta;
import com.firstrain.frapi.domain.SecEventMeta;
import com.firstrain.frapi.domain.StockPriceMeta;
import com.firstrain.frapi.domain.WebVolumeEventMeta;
import com.firstrain.frapi.util.DefaultEnums;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.Test;


public class EventESTest {

	@Test(timeout = 4000)
	public void test00() throws Exception {
		Event event0 = new Event();
		event0.setWvMeta(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test01() throws Exception {
		Event event0 = new Event();
		event0.setVisibility(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test02() throws Exception {
		Event event0 = new Event();
		event0.setUrl(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test03() throws Exception {
		Event event0 = new Event();
		event0.setTrigger(true);
		assertTrue(event0.isTrigger());
	}

	@Test(timeout = 4000)
	public void test04() throws Exception {
		Event event0 = new Event();
		event0.setTitle("");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test05() throws Exception {
		Event event0 = new Event();
		event0.setStockPriceMeta(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test06() throws Exception {
		Event event0 = new Event();
		event0.setSecMeta(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test07() throws Exception {
		Event event0 = new Event();
		event0.setSecFormType("");
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test08() throws Exception {
		Event event0 = new Event();
		event0.setScore(279.167480543);
		assertEquals(279.167480543, event0.getScore(), 0.01);
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		Event event0 = new Event();
		MockDate mockDate0 = new MockDate(3037, 3037, 0, 0, 0);
		event0.setReportDate(mockDate0);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test10() throws Exception {
		Event event0 = new Event();
		event0.setRank(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test11() throws Exception {
		Event event0 = new Event();
		event0.setProperties(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test12() throws Exception {
		Event event0 = new Event();
		event0.setPrimaryEvidenceEntityIds(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test13() throws Exception {
		Event event0 = new Event();
		event0.setPersonImage("");
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test14() throws Exception {
		Event event0 = new Event();
		event0.setPerson(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test15() throws Exception {
		Event event0 = new Event();
		event0.setOldRegion("9'l");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test16() throws Exception {
		Event event0 = new Event();
		event0.setOldDivision("");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test17() throws Exception {
		Event event0 = new Event();
		event0.setOldDesignationCode(20);
		assertEquals(20, event0.getOldDesignationCode());
	}

	@Test(timeout = 4000)
	public void test18() throws Exception {
		Event event0 = new Event();
		event0.setOldDesignation("Events");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test19() throws Exception {
		Event event0 = new Event();
		event0.setOldCompany(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test20() throws Exception {
		Event event0 = new Event();
		event0.setNewRegion(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test21() throws Exception {
		Event event0 = new Event();
		event0.setNewDivision(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test22() throws Exception {
		Event event0 = new Event();
		event0.setNewDesignationCode(1);
		assertEquals(1, event0.getNewDesignationCode());
	}

	@Test(timeout = 4000)
	public void test23() throws Exception {
		Event event0 = new Event();
		event0.setNewDesignation("");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test24() throws Exception {
		Event event0 = new Event();
		event0.setNewCompany(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test25() throws Exception {
		Event event0 = new Event();
		event0.setMtMeta(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test26() throws Exception {
		Event event0 = new Event();
		event0.setMatchedTopics(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test27() throws Exception {
		Event event0 = new Event();
		event0.setMatchedCompanies(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test28() throws Exception {
		Event event0 = new Event();
		event0.setLinkable(true);
		assertTrue(event0.isLinkable());
	}

	@Test(timeout = 4000)
	public void test29() throws Exception {
		Event event0 = new Event();
		event0.setLink("START_HERE_KNOWN");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test30() throws Exception {
		Event event0 = new Event();
		event0.setLastName(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test31() throws Exception {
		Event event0 = new Event();
		event0.setItemId(0L);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test32() throws Exception {
		Event event0 = new Event();
		event0.setHasExpired(false);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
		assertFalse(event0.isHasExpired());
	}

	@Test(timeout = 4000)
	public void test33() throws Exception {
		Event event0 = new Event();
		event0.setFutureEvent(true);
		assertTrue(event0.isFutureEvent());
	}

	@Test(timeout = 4000)
	public void test34() throws Exception {
		Event event0 = new Event();
		event0.setFlag(0);
		assertEquals((-1), event0.getDayId());
		assertEquals(0, event0.getFlag());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test35() throws Exception {
		Event event0 = new Event();
		event0.setFirstName("sMT\"SyW:8t&DP");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test36() throws Exception {
		Event event0 = new Event();
		event0.setEventTypeId(0);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
		assertEquals(0, event0.getEventTypeId());
	}

	@Test(timeout = 4000)
	public void test37() throws Exception {
		Event event0 = new Event();
		event0.setEventType("#8?c;L4");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test38() throws Exception {
		Event event0 = new Event();
		DefaultEnums.EventInformationEnum defaultEnums_EventInformationEnum0 = DefaultEnums.EventInformationEnum.MT_MOVE;
		event0.setEventInformationEnum(defaultEnums_EventInformationEnum0);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test39() throws Exception {
		Event event0 = new Event();
		event0.setEventId("w~(n");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test40() throws Exception {
		Event event0 = new Event();
		event0.setEntityInfo(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test41() throws Exception {
		Event event0 = new Event();
		event0.setEntityId(1L);
		assertEquals(1L, event0.getEntityId());
	}

	@Test(timeout = 4000)
	public void test42() throws Exception {
		Event event0 = new Event();
		event0.setDummyImage(null);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test43() throws Exception {
		Event event0 = new Event();
		event0.setDescription("");
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test44() throws Exception {
		Event event0 = new Event();
		assertEquals((-1), event0.getDayId());

		event0.setDayId(0);
		assertEquals(0, event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test45() throws Exception {
		Event event0 = new Event();
		event0.setDate(null);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test46() throws Exception {
		Event event0 = new Event();
		event0.setCaption("");
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test47() throws Exception {
		Event event0 = new Event();
		event0.setBookmarked(false);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test48() throws Exception {
		Event event0 = new Event();
		event0.isTrigger();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test49() throws Exception {
		Event event0 = new Event();
		event0.isLinkable();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test50() throws Exception {
		Event event0 = new Event();
		event0.isHasExpired();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test51() throws Exception {
		Event event0 = new Event();
		event0.isFutureEvent();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test52() throws Exception {
		Event event0 = new Event();
		boolean boolean0 = event0.isBookmarked();
		assertEquals((-1), event0.getDayId());
		assertFalse(boolean0);
	}

	@Test(timeout = 4000)
	public void test53() throws Exception {
		Event event0 = new Event();
		event0.getWvMeta();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test54() throws Exception {
		Event event0 = new Event();
		event0.getVisibility();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test55() throws Exception {
		Event event0 = new Event();
		event0.getUrl();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test56() throws Exception {
		Event event0 = new Event();
		event0.getTitle();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test57() throws Exception {
		Event event0 = new Event();
		event0.getStockPriceMeta();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test58() throws Exception {
		Event event0 = new Event();
		event0.getSecMeta();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test59() throws Exception {
		Event event0 = new Event();
		event0.getSecFormType();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test60() throws Exception {
		Event event0 = new Event();
		double double0 = event0.getScore();
		assertEquals(0.0, double0, 0.01);
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test61() throws Exception {
		Event event0 = new Event();
		event0.getReportDate();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test62() throws Exception {
		Event event0 = new Event();
		event0.getRank();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test63() throws Exception {
		Event event0 = new Event();
		event0.getProperties();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test64() throws Exception {
		Event event0 = new Event();
		event0.getPrimaryEvidenceEntityIds();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test65() throws Exception {
		Event event0 = new Event();
		event0.getPersonImage();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test66() throws Exception {
		Event event0 = new Event();
		event0.getPerson();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test67() throws Exception {
		Event event0 = new Event();
		event0.getOldRegion();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test68() throws Exception {
		Event event0 = new Event();
		event0.getOldDivision();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test69() throws Exception {
		Event event0 = new Event();
		int int0 = event0.getOldDesignationCode();
		assertEquals((-1), event0.getDayId());
		assertEquals(0, int0);
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test70() throws Exception {
		Event event0 = new Event();
		event0.getOldDesignation();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test71() throws Exception {
		Event event0 = new Event();
		event0.getOldCompany();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test72() throws Exception {
		Event event0 = new Event();
		event0.getNewRegion();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test73() throws Exception {
		Event event0 = new Event();
		event0.getNewDivision();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test74() throws Exception {
		Event event0 = new Event();
		int int0 = event0.getNewDesignationCode();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
		assertEquals(0, int0);
	}

	@Test(timeout = 4000)
	public void test75() throws Exception {
		Event event0 = new Event();
		event0.getNewDesignation();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test76() throws Exception {
		Event event0 = new Event();
		event0.getNewCompany();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test77() throws Exception {
		Event event0 = new Event();
		event0.getMtMeta();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test78() throws Exception {
		Event event0 = new Event();
		event0.getMatchedTopics();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test79() throws Exception {
		Event event0 = new Event();
		event0.getMatchedCompanies();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test80() throws Exception {
		Event event0 = new Event();
		event0.getLink();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test81() throws Exception {
		Event event0 = new Event();
		event0.getLastName();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test82() throws Exception {
		Event event0 = new Event();
		event0.getItemId();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test83() throws Exception {
		Event event0 = new Event();
		int int0 = event0.getFlag();
		assertEquals(0, int0);
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test84() throws Exception {
		Event event0 = new Event();
		event0.getFirstName();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test85() throws Exception {
		Event event0 = new Event();
		int int0 = event0.getEventTypeId();
		assertEquals((-1), event0.getDayId());
		assertEquals(0, int0);
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test86() throws Exception {
		Event event0 = new Event();
		event0.getEventType();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test87() throws Exception {
		Event event0 = new Event();
		event0.getEventInformationEnum();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test88() throws Exception {
		Event event0 = new Event();
		event0.getEventId();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test89() throws Exception {
		Event event0 = new Event();
		event0.getEntityInfo();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test90() throws Exception {
		Event event0 = new Event();
		event0.getEntityId();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test91() throws Exception {
		Event event0 = new Event();
		event0.getDummyImage();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}

	@Test(timeout = 4000)
	public void test92() throws Exception {
		Event event0 = new Event();
		event0.getDescription();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test93() throws Exception {
		Event event0 = new Event();
		int int0 = event0.getDayId();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), int0);
	}

	@Test(timeout = 4000)
	public void test94() throws Exception {
		Event event0 = new Event();
		event0.getDate();
		assertEquals((-1), event0.getDayId());
		assertFalse(event0.isBookmarked());
	}

	@Test(timeout = 4000)
	public void test95() throws Exception {
		Event event0 = new Event();
		event0.getCaption();
		assertFalse(event0.isBookmarked());
		assertEquals((-1), event0.getDayId());
	}
}
