package com.firstrain.frapi.pojo;

import java.lang.reflect.InvocationTargetException; 

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.firstrain.frapi.util.DefaultEnums.EventInformationEnum;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

public class GraphDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: Graph */
  // Test generated by Diffblue Deeptest.

  @Test
  public void access$000InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$000", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"));
    arrangeDoInvokeAndAssertString(methodUnderTest, x0); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$002InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final String x1 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$002",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("java.lang.String"));
    invokeAccessAndTest(methodUnderTest, x0, x1);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$100InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$100", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"));
    methodUnderTest.setAccessible(true);
    final EventInformationEnum retval = (EventInformationEnum) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$102InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final EventInformationEnum x1 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$102",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("com.firstrain.frapi.util.DefaultEnums$EventInformationEnum"));
    methodUnderTest.setAccessible(true);
    final EventInformationEnum retval = (EventInformationEnum) methodUnderTest.invoke(null, x0, x1);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$200InputNotNullOutputFalse() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$200", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(null, x0);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$202InputNotNullFalseOutputFalse() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final boolean x1 = false;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$202",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(null, x0, x1);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$300InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$300", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"));
    arrangeAccessibleDoInvokeAndAssert(methodUnderTest, x0); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$302InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final List x1 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$302",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("java.util.List"));
    arrangeDoInvokeAndAssert(methodUnderTest, x0, x1); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$400InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$400", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"));
    arrangeAccessibleDoInvokeAndAssert(methodUnderTest, x0); 
  }
 
  private void arrangeAccessibleDoInvokeAndAssert(final Method methodUnderTest, final Object x0) throws IllegalAccessException, InvocationTargetException { 
    methodUnderTest.setAccessible(true); 
    final List retval = (List) methodUnderTest.invoke(null, x0); 
     
    // Assert 
    assertNull(retval); 
  } 

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$402InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final List x1 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$402",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("java.util.List"));
    arrangeDoInvokeAndAssert(methodUnderTest, x0, x1); 
  }
 
  private void arrangeDoInvokeAndAssert(final Method methodUnderTest, final Object x0, final List x1) throws IllegalAccessException, InvocationTargetException { 
    methodUnderTest.setAccessible(true); 
    final List retval = (List) methodUnderTest.invoke(null, x0, x1); 
     
    // Assert 
    assertNull(retval); 
  } 

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$500InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$500", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"));
    arrangeDoInvokeAndAssertString(methodUnderTest, x0); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$502InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final String x1 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$502",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("java.lang.String"));
    invokeAccessAndTest(methodUnderTest, x0, x1);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$600InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$600", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"));
    arrangeDoInvokeAndAssertString(methodUnderTest, x0); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$602InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final String x1 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$602",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("java.lang.String"));
    invokeAccessAndTest(methodUnderTest, x0, x1);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$800InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createAndPopulateCompanyStat();

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$800", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat"));
    arrangeDoInvokeAssertDate(methodUnderTest, x0); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$802InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createAndPopulateCompanyStat();
    final Date x1 = null;

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$802",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat"),
            Reflector.forName("java.util.Date"));
    arrangeDoInvokeAndAssertDate(methodUnderTest, x0, x1); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$900InputNotNullOutputZero() throws Exception {

    // Arrange
    final Object x0 = createAndPopulateCompanyStat();

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$900", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(null, x0);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$902InputNotNullZeroOutputZero() throws Exception {

    // Arrange
    final Object x0 = createAndPopulateCompanyStat();
    final int x1 = 0;

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$902",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat"),
            Reflector.forName("int"));
    arrangeDoInvokeAssertInt(methodUnderTest, x0, x1); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1000InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createAndPopulateCompanyStat();

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1000", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat"));
    arrangeDoInvokeAndAssertString(methodUnderTest, x0); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1002InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createAndPopulateCompanyStat();
    final String x1 = null;

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1002",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat"),
            Reflector.forName("java.lang.String"));
    invokeAccessAndTest(methodUnderTest, x0, x1);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1100InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createAndPopulateCompanyStat();

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1100", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat"));
    arrangeDoInvokeAndAssertString(methodUnderTest, x0); 
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1102InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createAndPopulateCompanyStat();
    final String x1 = null;

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1102",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyStat"),
            Reflector.forName("java.lang.String"));
    invokeAccessAndTest(methodUnderTest, x0, x1);
  }

  private Object createAndPopulateCompanyStat() throws InvocationTargetException {
    final Object x0 = Reflector.getInstance("com.firstrain.frapi.pojo.Graph$CompanyStat");
    Reflector.setField(x0, "volumeALL", null);
    Reflector.setField(x0, "closingPrice", null);
    Reflector.setField(x0, "dtDiff", 0);
    Reflector.setField(x0, "dt", null);
    return x0;
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1200InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1200", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"));
    arrangeDoInvokeAssertDate(methodUnderTest, x0); 
  }
 
  private void arrangeDoInvokeAssertDate(final Method methodUnderTest, final Object x0) throws IllegalAccessException, InvocationTargetException { 
    methodUnderTest.setAccessible(true); 
    final Date retval = (Date) methodUnderTest.invoke(null, x0); 
     
    // Assert 
    assertNull(retval); 
  } 

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1202InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final Date x1 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1202",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("java.util.Date"));
    arrangeDoInvokeAndAssertDate(methodUnderTest, x0, x1); 
  }
 
  private void arrangeDoInvokeAndAssertDate(final Method methodUnderTest, final Object x0, final Date x1) throws IllegalAccessException, InvocationTargetException { 
    methodUnderTest.setAccessible(true); 
    final Date retval = (Date) methodUnderTest.invoke(null, x0, x1); 
     
    // Assert 
    assertNull(retval); 
  } 

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1300InputNotNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1300", Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"));
    arrangeDoInvokeAndAssertString(methodUnderTest, x0); 
  }
 
  private void arrangeDoInvokeAndAssertString(final Method methodUnderTest, final Object x0) throws IllegalAccessException, InvocationTargetException { 
    methodUnderTest.setAccessible(true); 
    final String retval = (String) methodUnderTest.invoke(null, x0); 
     
    // Assert 
    assertNull(retval); 
  } 

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1502InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final String x1 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1502",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("java.lang.String"));
    invokeAccessAndTest(methodUnderTest, x0, x1);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1602InputNotNullZeroOutputZero() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final int x1 = 0;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1602",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("int"));
    arrangeDoInvokeAssertInt(methodUnderTest, x0, x1); 
  }
 
  private void arrangeDoInvokeAssertInt(final Method methodUnderTest, final Object x0, final int x1) throws IllegalAccessException, InvocationTargetException { 
    methodUnderTest.setAccessible(true); 
    final int retval = (int) methodUnderTest.invoke(null, x0, x1); 
     
    // Assert 
    assertEquals(0, retval); 
  } 

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1702InputNotNullNullOutputNull() throws Exception {

    // Arrange
    final Object x0 = createGraphCompanyEvent(); 
    final String x1 = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1702",
            Reflector.forName("com.firstrain.frapi.pojo.Graph$CompanyEvent"),
            Reflector.forName("java.lang.String"));
    invokeAccessAndTest(methodUnderTest, x0, x1);
  }

  private void invokeAccessAndTest(final Method methodUnderTest, final Object x0, final String x1) throws IllegalAccessException, InvocationTargetException {
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(null, x0, x1);
    
    // Assert
    assertNull(retval);
  }
 
  private Object createGraphCompanyEvent() throws InvocationTargetException { 
    final Object x0 = Reflector.getInstance("com.firstrain.frapi.pojo.Graph$CompanyEvent"); 
    Reflector.setField(x0, "dtDiff", 0); 
    Reflector.setField(x0, "headline", null); 
    Reflector.setField(x0, "topics", null); 
    Reflector.setField(x0, "supportLink", null); 
    Reflector.setField(x0, "dt", null); 
    Reflector.setField(x0, "companies", null); 
    Reflector.setField(x0, "expired", false); 
    Reflector.setField(x0, "eventGroup", null); 
    Reflector.setField(x0, "moreLink", null); 
    Reflector.setField(x0, "eventType", null); 
    Reflector.setField(x0, "summary", null); 
    Reflector.setField(x0, "associatedWith", null); 
    return x0; 
  } 

  // Test generated by Diffblue Deeptest.

  @Test
  public void convertToJsonStringInput0OutputNull() {

    // Arrange
    final ArrayList<Entity> entity = new ArrayList<Entity>();

    // Act
    final String retval = Graph.convertToJsonString(entity);

    // Assert
    assertNull(retval);
  }
}
