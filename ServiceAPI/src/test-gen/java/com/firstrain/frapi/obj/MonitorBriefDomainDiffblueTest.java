package com.firstrain.frapi.obj;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.firstrain.frapi.pojo.Items;
import java.util.List;
import java.util.Set;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

public class MonitorBriefDomainDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: MonitorBriefDomain */
  // Test generated by Diffblue Deeptest.

  @Test
  public void constructorOutputVoid() {

    // Act, creating object to test constructor
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getBizlineCatIdCSVOutputNull() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final String retval = objectUnderTest.getBizlineCatIdCSV();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getCompanyCatIdsOutputNull() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final Set<String> retval = objectUnderTest.getCompanyCatIds();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getCompanyIdsArrOutputNull() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final int[] retval = objectUnderTest.getCompanyIdsArr();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIndustryCatIdOutputZero() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final int retval = objectUnderTest.getIndustryCatId();

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getItemListOutputNull() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final List<Items> retval = objectUnderTest.getItemList();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getMonitorEntitiesOutputNull() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final Set<String> retval = objectUnderTest.getMonitorEntities();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getqListOutputNull() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final String[] retval = objectUnderTest.getqList();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getScopeListOutputNull() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final int[] retval = objectUnderTest.getScopeList();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTopicCatIdsOutputNull() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final Set<String> retval = objectUnderTest.getTopicCatIds();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void isIndustryOnlyOutputFalse() {

    // Arrange
    final MonitorBriefDomain objectUnderTest = new MonitorBriefDomain();
    objectUnderTest.setMonitorEntities(null);
    objectUnderTest.setBizlineCatIdCSV(null);
    objectUnderTest.setIndustryCatId(0);
    objectUnderTest.setIndustryOnly(false);
    objectUnderTest.setScopeList(null);
    objectUnderTest.setCompanyCatIds(null);
    Reflector.setField(objectUnderTest, "qList", null);
    objectUnderTest.setItemList(null);
    objectUnderTest.setTopicCatIds(null);
    objectUnderTest.setCompanyIdsArr(null);

    // Act
    final boolean retval = objectUnderTest.isIndustryOnly();

    // Assert
    assertEquals(false, retval);
  }
}
