/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:25:57 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import com.firstrain.frapi.domain.BaseSpec;
import com.firstrain.frapi.events.IEvents;
import com.firstrain.frapi.obj.EventQueryCriteria;
import com.firstrain.frapi.obj.MgmtTurnoverServiceSpec;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.SearchSpec;
import java.util.List;
import java.util.Map;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class EventServiceImplESTest {

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test00() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEventServer();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		SearchSpec searchSpec0 = new SearchSpec();
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec(searchSpec0);
		BaseSpec baseSpec0 = new BaseSpec();
		// Undeclared exception!
		eventServiceImpl0.getMgmtFromSolr(null, mgmtTurnoverServiceSpec0, false,
				null, baseSpec0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test01() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEventServer();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec();
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		BaseSpec baseSpec0 = new BaseSpec();
		int[] intArray0 = new int[8];
		mgmtTurnoverServiceSpec0.eventTypes = intArray0;
		// Undeclared exception!
		eventServiceImpl0.getMgmtFromSolr(null, mgmtTurnoverServiceSpec0, true,
				eventQueryCriteria_EventTypeRange0, baseSpec0);
	}

	@Test(timeout = 4000)
	public void test02() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec();
		mgmtTurnoverServiceSpec0.setDetails(false);
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		BaseSpec baseSpec0 = new BaseSpec();
		SolrDocumentList solrDocumentList0 = eventServiceImpl0
				.getMgmtFromSolr(null, mgmtTurnoverServiceSpec0, false,
						eventQueryCriteria_EventTypeRange0, baseSpec0);
		assertNull(solrDocumentList0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test03() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEventServer();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		SearchSpec searchSpec0 = new SearchSpec();
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec(searchSpec0);
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		BaseSpec baseSpec0 = new BaseSpec();
		// Undeclared exception!
		eventServiceImpl0.getMgmtFromSolr(null, mgmtTurnoverServiceSpec0, true,
				eventQueryCriteria_EventTypeRange0, baseSpec0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test04() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEventServer();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		int[] intArray0 = new int[2];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 0);
		eventQueryCriteria0.setApplyEndDateRange(false);
		// Undeclared exception!
		eventServiceImpl0.getEventsDocsFromSolr(eventQueryCriteria0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test05() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEventServer();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		int[] intArray0 = new int[2];
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
				eventQueryCriteria_EventTypeRange0, 1433, true);
		// Undeclared exception!
		eventServiceImpl0.getEventsDocsFromSolr(eventQueryCriteria0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test06() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEventServer();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		int[] intArray0 = new int[2];
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
				eventQueryCriteria_EventTypeRange0, false);
		eventQueryCriteria0.setExcludedCatIds(intArray0);
		// Undeclared exception!
		eventServiceImpl0.getEventsDocsFromSolr(eventQueryCriteria0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test07() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEventServer();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		int[] intArray0 = new int[9];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
				null);
		eventQueryCriteria0.setEventTypeIds(intArray0);
		// Undeclared exception!
		eventServiceImpl0.getEventsDocsFromSolr(eventQueryCriteria0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test08() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		SolrDocumentList solrDocumentList0 = new SolrDocumentList();
		SolrDocument solrDocument0 = new SolrDocument();
		solrDocumentList0.add(solrDocument0);
		// Undeclared exception!
		eventServiceImpl0.getEntityEventsFromSolr(solrDocumentList0, null);
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		SolrDocumentList solrDocumentList0 = new SolrDocumentList();
		List<IEvents> list0 = eventServiceImpl0
				.getEntityEventsFromSolr(solrDocumentList0, null);
		assertEquals(0, list0.size());
	}

	@Test(timeout = 4000, expected = Exception.class)
	public void test10() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEventServer();
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		eventServiceImpl0.getCompanyEvents((-906), "oldGroup", null);
	}

	@Test(timeout = 4000)
	public void test11() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		List<IEvents> list0 = eventServiceImpl0.applyBSA(null, 0, true);
		List<IEvents> list1 = eventServiceImpl0.applySingleCompanyEventsFilter(list0, 9642, true);
		assertTrue(list1.isEmpty());
	}

	@Test(timeout = 4000)
	public void test12() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		List<IEvents> list0 = eventServiceImpl0.applyGraphEventFilter(null);
		assertTrue(list0.isEmpty());
	}

	@Test(timeout = 4000)
	public void test13() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		List<IEvents> list0 = eventServiceImpl0.applyBSA(null, 0, false);
		assertEquals(0, list0.size());
	}

	@Test(timeout = 4000)
	public void test14() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		List<IEvents> list0 = eventServiceImpl0.applyBC(null, true, 0);
		assertEquals(0, list0.size());
	}

	@Test(timeout = 4000)
	public void test15() throws Exception {
		EventServiceImpl eventServiceImpl0 = new EventServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(eventServiceImpl0, com.firstrain.frapi.service.impl.EventServiceImpl.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(eventServiceImpl0,
				com.firstrain.frapi.service.impl.EventServiceImpl.class);
		List<IEvents> list0 = eventServiceImpl0.applyBSA(null, 0, true);
		List<IEvents> list1 = eventServiceImpl0.applyBC(list0, false, 2284);
		assertTrue(list1.equals(list0));
	}
}
