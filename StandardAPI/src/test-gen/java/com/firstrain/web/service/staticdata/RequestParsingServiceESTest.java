/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 18:48:09 GMT 2018
 */

package com.firstrain.web.service.staticdata;

import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import com.firstrain.frapi.pojo.wrapper.BaseSet;
import com.firstrain.web.pojo.MetaData;
import com.firstrain.web.response.EntityDataResponse;
import com.firstrain.web.wrapper.EntityDataWrapper;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.context.support.ResourceBundleMessageSource;

public class RequestParsingServiceESTest {

	@Test(timeout = 4000)
	public void test00() throws Exception {
		RequestParsingService.defaultSpec requestParsingService_defaultSpec0 = new RequestParsingService.defaultSpec();
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test01() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		EntityDataResponse entityDataResponse0 = new EntityDataResponse();
		// Undeclared exception!
		requestParsingService0
				.setChartDataForHtml(null, entityDataResponse0, "MF{bkDgbm~/");
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test02() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		EntityDataResponse entityDataResponse0 = new EntityDataResponse();
		EntityDataWrapper entityDataWrapper0 = new EntityDataWrapper();
		entityDataResponse0.setResult(entityDataWrapper0);
		// Undeclared exception!
		requestParsingService0
				.handleSectionsForStaticData(null, entityDataResponse0, "z+y");
	}

	@Test(timeout = 4000)
	public void test03() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		String string0 = requestParsingService0
				.getSerializedMetadata(null, null, null, null,
						null);
		assertNull(string0);
	}

	@Test(timeout = 4000)
	public void test04() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		String string0 = requestParsingService0
				.getSerializedMetadata("qFu2zQP|1!c/", "qFu2zQP|1!c/", "duMD ]j%W", "'+r&", "'+r&");
		assertNotNull(string0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test05() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		requestParsingService0.getSectionsPageSpecMap(")\"EWg<(=]6");
	}

	@Test(timeout = 4000)
	public void test06() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class,
				new ViolatedAssumptionAnswer());
		doReturn("http").when(httpServletRequest0).getHeader(anyString());
		HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(
				httpServletRequest0);
		String string0 = requestParsingService0.getRequestScheme(httpServletRequestWrapper0);
		assertEquals("http", string0);
	}

	@Test(timeout = 4000)
	public void test07() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(httpServletRequest0).getHeader(anyString());
		HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(
				httpServletRequest0);
		String string0 = requestParsingService0.getRequestScheme(httpServletRequestWrapper0);
		assertEquals("https", string0);
	}

	@Test(timeout = 4000)
	public void test08() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		String string0 = requestParsingService0.getRefinedReqVal("");
		assertNull(string0);
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		String string0 = requestParsingService0.getRefinedReqVal("little32");
		assertEquals("little32", string0);
	}

	@Test(timeout = 4000)
	public void test10() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		EntityDataResponse entityDataResponse0 = new EntityDataResponse();
		EntityDataWrapper entityDataWrapper0 = new EntityDataWrapper();
		entityDataResponse0.setResult(entityDataWrapper0);
		MetaData metaData0 = requestParsingService0.getMetaDataEntitiyResponse(entityDataResponse0);
		assertNull(metaData0.getVisualisation());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test11() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		// Undeclared exception!
		requestParsingService0.getErrorResponse(0);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test12() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		// Undeclared exception!
		requestParsingService0.getErrorResponse((-3));
	}

	@Test(timeout = 4000)
	public void test13() throws Exception {
		String[] stringArray0 = new String[4];
		RequestParsingService.main(stringArray0);
		assertEquals(4, stringArray0.length);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test14() throws Exception {
		RequestParsingService requestParsingService0 = new RequestParsingService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class, "messageSource",
				resourceBundleMessageSource0);
		Injector.validateBean(requestParsingService0,
				com.firstrain.web.service.staticdata.RequestParsingService.class);
		// Undeclared exception!
		requestParsingService0.getErrorHtmlResponse((-1567));
	}
}
