package com.firstrain.web.controller.core;

import static org.junit.Assert.assertNotNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.service.RehydrateService;
import com.firstrain.frapi.service.RestrictContentService;
import com.firstrain.web.pojo.Document;
import com.firstrain.web.pojo.EntityStandard;
import com.firstrain.web.pojo.ItemData;
import com.firstrain.web.pojo.MetaData;
import com.firstrain.web.pojo.Tweet;
import com.firstrain.web.wrapper.ItemWrapper;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class ItemControllerDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: ItemController */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemData.class, ItemWrapper.class, ItemController.class})
  @Test
  public void getMetaDataInputFalseNotNullOutputNotNull() throws Exception {

    // Arrange
    final ItemController objectUnderTest = new ItemController();
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    Reflector.setField(objectUnderTest, "ftlService", null);
    Reflector.setField(objectUnderTest, "storageService", null);
    final RehydrateService rehydrateService =
        (RehydrateService) Reflector.getInstance("com.firstrain.frapi.service.RehydrateService");
    Reflector.setField(objectUnderTest, "rehydrateService", rehydrateService);
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    final boolean isDocument = false;
    final ItemWrapper itemWrapper = PowerMockito.mock(ItemWrapper.class);
    final ItemData itemData = PowerMockito.mock(ItemData.class);
    final Method getTweetMethod = DTUMemberMatcher.method(ItemData.class, "getTweet");
    PowerMockito.doReturn(null).when(itemData, getTweetMethod).withNoArguments();
    final Method getDataMethod = DTUMemberMatcher.method(ItemWrapper.class, "getData");
    PowerMockito.doReturn(itemData).when(itemWrapper, getDataMethod).withNoArguments();
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.ItemController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMetaData",
            Reflector.forName("boolean"),
            Reflector.forName("com.firstrain.web.wrapper.ItemWrapper"));
    methodUnderTest.setAccessible(true);
    final MetaData retval =
        (MetaData) methodUnderTest.invoke(objectUnderTest, isDocument, itemWrapper);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    MetaData.class,
    Tweet.class,
    ItemController.class,
    ItemWrapper.class,
    EntityStandard.class,
    ItemData.class
  })
  @Test
  public void getMetaDataInputFalseNotNullOutputNotNull2() throws Exception {

    // Arrange
    final ItemController objectUnderTest = new ItemController();
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    Reflector.setField(objectUnderTest, "ftlService", null);
    Reflector.setField(objectUnderTest, "storageService", null);
    final RehydrateService rehydrateService =
        (RehydrateService) Reflector.getInstance("com.firstrain.frapi.service.RehydrateService");
    Reflector.setField(objectUnderTest, "rehydrateService", rehydrateService);
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    final boolean isDocument = false;
    final ItemWrapper itemWrapper = PowerMockito.mock(ItemWrapper.class);
    final ItemData itemData = PowerMockito.mock(ItemData.class);
    final Tweet tweet = PowerMockito.mock(Tweet.class);
    final EntityStandard entityStandard = PowerMockito.mock(EntityStandard.class);
    final Method getNameMethod = DTUMemberMatcher.method(EntityStandard.class, "getName");
    PowerMockito.doReturn(null).when(entityStandard, getNameMethod).withNoArguments();
    final Method getEntityMethod = DTUMemberMatcher.method(Tweet.class, "getEntity");
    PowerMockito.doReturn(entityStandard).when(tweet, getEntityMethod).withNoArguments();
    final Method getTweetMethod = DTUMemberMatcher.method(ItemData.class, "getTweet");
    PowerMockito.doReturn(tweet).when(itemData, getTweetMethod).withNoArguments();
    final Method getDataMethod = DTUMemberMatcher.method(ItemWrapper.class, "getData");
    PowerMockito.doReturn(itemData).when(itemWrapper, getDataMethod).withNoArguments();
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.ItemController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMetaData",
            Reflector.forName("boolean"),
            Reflector.forName("com.firstrain.web.wrapper.ItemWrapper"));
    methodUnderTest.setAccessible(true);
    final MetaData retval =
        (MetaData) methodUnderTest.invoke(objectUnderTest, isDocument, itemWrapper);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemWrapper.class, ItemController.class})
  @Test
  public void getMetaDataInputTrueNotNullOutputNotNull() throws Exception {

    // Arrange
    final ItemController objectUnderTest = new ItemController();
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    Reflector.setField(objectUnderTest, "ftlService", null);
    Reflector.setField(objectUnderTest, "storageService", null);
    final RehydrateService rehydrateService =
        (RehydrateService) Reflector.getInstance("com.firstrain.frapi.service.RehydrateService");
    Reflector.setField(objectUnderTest, "rehydrateService", rehydrateService);
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    final boolean isDocument = true;
    final ItemWrapper itemWrapper = PowerMockito.mock(ItemWrapper.class);
    final Method getDataMethod = DTUMemberMatcher.method(ItemWrapper.class, "getData");
    PowerMockito.doReturn(null).when(itemWrapper, getDataMethod).withNoArguments();
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.ItemController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMetaData",
            Reflector.forName("boolean"),
            Reflector.forName("com.firstrain.web.wrapper.ItemWrapper"));
    methodUnderTest.setAccessible(true);
    final MetaData retval =
        (MetaData) methodUnderTest.invoke(objectUnderTest, isDocument, itemWrapper);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemData.class, ItemWrapper.class, Document.class, ItemController.class})
  @Test
  public void getMetaDataInputTrueNotNullOutputNotNull2() throws Exception {

    // Arrange
    final ItemController objectUnderTest = new ItemController();
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    Reflector.setField(objectUnderTest, "ftlService", null);
    Reflector.setField(objectUnderTest, "storageService", null);
    final RehydrateService rehydrateService =
        (RehydrateService) Reflector.getInstance("com.firstrain.frapi.service.RehydrateService");
    Reflector.setField(objectUnderTest, "rehydrateService", rehydrateService);
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    final boolean isDocument = true;
    final ItemWrapper itemWrapper = PowerMockito.mock(ItemWrapper.class);
    final ItemData itemData = PowerMockito.mock(ItemData.class);
    final Document document = PowerMockito.mock(Document.class);
    final Method getEntityMethod = DTUMemberMatcher.method(Document.class, "getEntity");
    PowerMockito.doReturn(null).when(document, getEntityMethod).withNoArguments();
    final Method getDocumentMethod = DTUMemberMatcher.method(ItemData.class, "getDocument");
    PowerMockito.doReturn(document).when(itemData, getDocumentMethod).withNoArguments();
    final Method getDataMethod = DTUMemberMatcher.method(ItemWrapper.class, "getData");
    PowerMockito.doReturn(itemData).when(itemWrapper, getDataMethod).withNoArguments();
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.ItemController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMetaData",
            Reflector.forName("boolean"),
            Reflector.forName("com.firstrain.web.wrapper.ItemWrapper"));
    methodUnderTest.setAccessible(true);
    final MetaData retval =
        (MetaData) methodUnderTest.invoke(objectUnderTest, isDocument, itemWrapper);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemData.class, ItemWrapper.class, ItemController.class})
  @Test
  public void getMetaDataInputTrueNotNullOutputNotNull3() throws Exception {

    // Arrange
    final ItemController objectUnderTest = new ItemController();
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    Reflector.setField(objectUnderTest, "ftlService", null);
    Reflector.setField(objectUnderTest, "storageService", null);
    final RehydrateService rehydrateService =
        (RehydrateService) Reflector.getInstance("com.firstrain.frapi.service.RehydrateService");
    Reflector.setField(objectUnderTest, "rehydrateService", rehydrateService);
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    final boolean isDocument = true;
    final ItemWrapper itemWrapper = PowerMockito.mock(ItemWrapper.class);
    final ItemData itemData = PowerMockito.mock(ItemData.class);
    final Method getDocumentMethod = DTUMemberMatcher.method(ItemData.class, "getDocument");
    PowerMockito.doReturn(null).when(itemData, getDocumentMethod).withNoArguments();
    final Method getDataMethod = DTUMemberMatcher.method(ItemWrapper.class, "getData");
    PowerMockito.doReturn(itemData).when(itemWrapper, getDataMethod).withNoArguments();
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.ItemController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMetaData",
            Reflector.forName("boolean"),
            Reflector.forName("com.firstrain.web.wrapper.ItemWrapper"));
    methodUnderTest.setAccessible(true);
    final MetaData retval =
        (MetaData) methodUnderTest.invoke(objectUnderTest, isDocument, itemWrapper);

    // Assert
    assertNotNull(retval);
  }
}
