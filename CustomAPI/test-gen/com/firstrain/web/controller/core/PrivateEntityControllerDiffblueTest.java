package com.firstrain.web.controller.core;

import java.lang.reflect.InvocationTargetException; 

import static org.junit.Assert.assertNotNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.utils.JSONUtility;
import com.firstrain.web.pojo.CreateInputBean;
import com.firstrain.web.response.JSONResponse;
import com.firstrain.web.service.core.EntiyBackTestService;
import com.firstrain.web.service.core.RequestParsingService;
import java.lang.reflect.Method;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang.StringUtils;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class PrivateEntityControllerDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: PrivateEntityController */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({CreateInputBean.class, JSONResponse.class, StringUtils.class, JSONUtility.class})
  @Test
  public void errorcaseLogInUsageTrackingInputNotNullNotNullZeroNullNotNullNotNullOutputNotNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);
    final PrivateEntityController objectUnderTest = arrangeData(); 
    final HttpServletRequest request =
        (HttpServletRequest) Reflector.getInstance("javax.servlet.http.HttpServletRequest");
    final JSONResponse res = PowerMockito.mock(JSONResponse.class);
    final Method getMessageMethod = DTUMemberMatcher.method(JSONResponse.class, "getMessage");
    PowerMockito.doReturn(null).when(res, getMessageMethod).withNoArguments();
    final int errorCode = 0;
    final String errorMsg = null;
    final CreateInputBean inputbean = PowerMockito.mock(CreateInputBean.class);
    final String metadata = "";
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(true)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method serializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "serialize", Object.class);
    PowerMockito.doReturn("")
        .when(JSONUtility.class, serializeMethod)
        .withArguments(or(isA(Object.class), isNull(Object.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.PrivateEntityController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "errorcaseLogInUsageTracking",
            Reflector.forName("javax.servlet.http.HttpServletRequest"),
            Reflector.forName("com.firstrain.web.response.JSONResponse"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.web.pojo.CreateInputBean"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final JSONResponse retval =
        (JSONResponse)
            methodUnderTest.invoke(
                objectUnderTest, request, res, errorCode, errorMsg, inputbean, metadata);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(StringUtils.class)
  @Test
  public void errorcaseLogInUsageTrackingInputNotNullNotNullZeroNullNotNullNotNullOutputNotNull2()
      throws Exception {

    // Setup mocks
    final PrivateEntityController objectUnderTest = arrangeData(); 
    final HttpServletRequest request =
        (HttpServletRequest) Reflector.getInstance("javax.servlet.http.HttpServletRequest");
    final JSONResponse res =
        (JSONResponse) Reflector.getInstance("com.firstrain.web.response.JSONResponse");
    final int errorCode = 0;
    final String errorMsg = null;
    final CreateInputBean inputbean =
        (CreateInputBean) Reflector.getInstance("com.firstrain.web.pojo.CreateInputBean");
    final String metadata = "";
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.PrivateEntityController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "errorcaseLogInUsageTracking",
            Reflector.forName("javax.servlet.http.HttpServletRequest"),
            Reflector.forName("com.firstrain.web.response.JSONResponse"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.web.pojo.CreateInputBean"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final JSONResponse retval =
        (JSONResponse)
            methodUnderTest.invoke(
                objectUnderTest, request, res, errorCode, errorMsg, inputbean, metadata);

    // Assert
    assertNotNull(retval);
  }
 
  private PrivateEntityController arrangeData() throws InvocationTargetException { 
      PowerMockito.mockStatic(StringUtils.class); 
       
      // Arrange 
      final PrivateEntityController objectUnderTest = new PrivateEntityController(); 
      final RequestParsingService requestParsingService = 
          (RequestParsingService) 
              Reflector.getInstance("com.firstrain.web.service.core.RequestParsingService"); 
      Reflector.setField(objectUnderTest, "requestParsingService", requestParsingService); 
      Reflector.setField(objectUnderTest, "privateEntityService", null); 
      Reflector.setField(objectUnderTest, "jsonMapper", null); 
      Reflector.setField(objectUnderTest, "responseDecoratorService", null); 
      Reflector.setField(objectUnderTest, "catServiceURL", null); 
      Reflector.setField(objectUnderTest, "httpClientService", null); 
      final EntiyBackTestService entiyBackTestService = new EntiyBackTestService(); 
      Reflector.setField(objectUnderTest, "entityBackTestService", entiyBackTestService); 
      return objectUnderTest; 
  } 
}
