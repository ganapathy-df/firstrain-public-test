package com.firstrain.frapi;

import java.lang.reflect.InvocationTargetException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

public class FRCompletionServiceDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: FRCompletionService */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getSubmissionsOutputZero() throws Exception {

    // Arrange
    final FRCompletionService objectUnderTest =
        (FRCompletionService) Reflector.getInstance("com.firstrain.frapi.FRCompletionService");
    Reflector.setField(objectUnderTest, "completionService", null);
    Reflector.setField(objectUnderTest, "submissions", 0);

    // Act
    final int retval = objectUnderTest.getSubmissions();

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void pollInputZeroNullOutputNull() throws Exception {

    // Arrange
    final FRCompletionService objectUnderTest =
        (FRCompletionService) Reflector.getInstance("com.firstrain.frapi.FRCompletionService");
    Reflector.setField(objectUnderTest, "completionService", null);
    Reflector.setField(objectUnderTest, "submissions", 0);
    final long timeout = 0L;
    final TimeUnit unit = null;

    // Act
    final Future retval = objectUnderTest.poll(timeout, unit);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void pollInputZeroNullOutputNullPointerException() throws Exception {

    // Arrange
    final FRCompletionService objectUnderTest =
        (FRCompletionService) Reflector.getInstance("com.firstrain.frapi.FRCompletionService");
    Reflector.setField(objectUnderTest, "completionService", null);
    Reflector.setField(objectUnderTest, "submissions", 1);
    final long timeout = 0L;
    final TimeUnit unit = null;

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.poll(timeout, unit);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void pollOutputNull() throws Exception {

    // Arrange
    final FRCompletionService objectUnderTest =
        (FRCompletionService) Reflector.getInstance("com.firstrain.frapi.FRCompletionService");
    Reflector.setField(objectUnderTest, "completionService", null);
    Reflector.setField(objectUnderTest, "submissions", 0);

    // Act
    final Future retval = objectUnderTest.poll();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void pollOutputNullPointerException() throws Exception {

    // Arrange
    final FRCompletionService objectUnderTest = createInstanceAndTest();
    objectUnderTest.poll();
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void takeOutputNull() throws Exception {

    // Arrange
    final FRCompletionService objectUnderTest =
        (FRCompletionService) Reflector.getInstance("com.firstrain.frapi.FRCompletionService");
    Reflector.setField(objectUnderTest, "completionService", null);
    Reflector.setField(objectUnderTest, "submissions", 0);

    // Act
    final Future retval = objectUnderTest.take();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void takeOutputNullPointerException() throws Exception {

    // Arrange
    final FRCompletionService objectUnderTest = createInstanceAndTest();
    objectUnderTest.take();
  }

  private FRCompletionService createInstanceAndTest() throws InvocationTargetException {
    final FRCompletionService objectUnderTest =
        (FRCompletionService) Reflector.getInstance("com.firstrain.frapi.FRCompletionService");
    Reflector.setField(objectUnderTest, "completionService", null);
    Reflector.setField(objectUnderTest, "submissions", 1);
    
    // Act
    thrown.expect(NullPointerException.class);
    return objectUnderTest;
  }
}
