package com.firstrain.frapi.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.obj.MonitorObj;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.service.EntityProcessingService;
import com.firstrain.obj.IEntityInfo;
import com.firstrain.obj.IEntityInfoCache;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class MonitorUtilDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: MonitorUtil */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getBusinessLineInputNotNullOutput0() throws Exception {

    // Arrange
    final MonitorUtil objectUnderTest = new MonitorUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final ArrayList arrayList = new ArrayList();
    final Method getBizLineCatIdsMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getBizLineCatIds");
    PowerMockito.doReturn(arrayList).when(iEntityInfo, getBizLineCatIdsMethod).withNoArguments();
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final String token = "!!";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.MonitorUtil");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getBusinessLine", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final List<MonitorObj> retval =
        (List<MonitorObj>) methodUnderTest.invoke(objectUnderTest, token);

    // Assert
    final ArrayList<MonitorObj> arrayList1 = new ArrayList<MonitorObj>();
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getBusinessLineInputNotNullOutput1() throws Exception {

    // Arrange
    final MonitorUtil objectUnderTest = new MonitorUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache1 = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo1 = PowerMockito.mock(IEntityInfo.class);
    final Method getNameMethod = DTUMemberMatcher.method(IEntityInfo.class, "getName");
    PowerMockito.doReturn("@@@@").when(iEntityInfo1, getNameMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSearchToken");
    PowerMockito.doReturn(null).when(iEntityInfo1, getSearchTokenMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo1)
        .when(iEntityInfoCache1, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final ArrayList arrayList = new ArrayList();
    arrayList.add(5);
    final Method getBizLineCatIdsMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getBizLineCatIds");
    PowerMockito.doReturn(arrayList).when(iEntityInfo, getBizLineCatIdsMethod).withNoArguments();
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache)
        .thenReturn(iEntityInfoCache1);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final String token = "!!";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.MonitorUtil");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getBusinessLine", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final List<MonitorObj> retval =
        (List<MonitorObj>) methodUnderTest.invoke(objectUnderTest, token);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(0));
    assertNull(retval.get(0).getDate());
    assertEquals(0, retval.get(0).getDocumentCount());
    assertEquals(true, Reflector.getInstanceField(retval.get(0), "exclude"));
    assertEquals(false, Reflector.getInstanceField(retval.get(0), "include"));
    assertNull(retval.get(0).getId());
    assertEquals(false, Reflector.getInstanceField(retval.get(0), "selected"));
    assertNull(retval.get(0).getType());
    assertEquals(false, Reflector.getInstanceField(retval.get(0), "bizLines"));
    assertNull(retval.get(0).getToken());
    assertNull(retval.get(0).getDefaultURL());
    assertEquals("@@@@", retval.get(0).getTitle());
    assertNull(Reflector.getInstanceField(retval.get(0), "tokenList"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getBusinessLineInputNotNullOutput02() throws Exception {

    // Arrange
    final MonitorUtil objectUnderTest = new MonitorUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getBizLineCatIdsMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getBizLineCatIds");
    PowerMockito.doReturn(null).when(iEntityInfo, getBizLineCatIdsMethod).withNoArguments();
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final String token = "!!";

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.MonitorUtil");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getBusinessLine", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final List<MonitorObj> retval =
        (List<MonitorObj>) methodUnderTest.invoke(objectUnderTest, token);

    // Assert
    final ArrayList<MonitorObj> arrayList = new ArrayList<MonitorObj>();
    assertEquals(arrayList, retval);
  }
}
