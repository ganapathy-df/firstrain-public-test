/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:27:52 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.any;
import static org.evosuite.shaded.org.mockito.Mockito.anyBoolean;
import static org.evosuite.shaded.org.mockito.Mockito.anyInt;
import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import com.firstrain.content.similarity.DocumentSimilarityUtil;
import com.firstrain.frapi.domain.AutoSuggest;
import com.firstrain.frapi.domain.BaseSpec;
import com.firstrain.frapi.domain.BlendDunsInput;
import com.firstrain.frapi.domain.CompanyVolume;
import com.firstrain.frapi.domain.EntityDetailSpec;
import com.firstrain.frapi.domain.TwitterSpec;
import com.firstrain.frapi.obj.GraphQueryCriteria;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.pojo.Graph;
import com.firstrain.frapi.pojo.wrapper.EventSet;
import com.firstrain.frapi.pojo.wrapper.GraphNodeSet;
import com.firstrain.frapi.pojo.wrapper.TweetSet;
import com.firstrain.frapi.repository.AccelerometerServiceRepository;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.ExcelProcessingHelperRepository;
import com.firstrain.frapi.service.AutoSuggestService;
import com.firstrain.frapi.service.EventService;
import com.firstrain.frapi.service.TwitterService;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.DateCount;
import com.firstrain.solr.client.EntityInfoCacheLucene;
import com.firstrain.solr.client.SearchResult;
import com.firstrain.solr.client.SolrSearcher;
import it.unimi.dsi.fastutil.longs.LongArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.solr.client.solrj.SolrServer;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

public class EntityBaseServiceImplESTest {

	@Test(timeout = 4000)
	public void test00() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		String string0 = entityBaseServiceImpl0.trimCompanyEndingWord(null);
		assertNull(string0);
	}

	@Test(timeout = 4000)
	public void test01() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		Set<String> set0 = EntityInfoCacheLucene.categoryTypes;
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		doReturn(set0).when(excelProcessingHelperRepository0).getCompanyEndingWordsRegex();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		String string0 = entityBaseServiceImpl0.trimCompanyEndingWord("=G]>'");
		assertEquals("=G]>'", string0);
	}

	@Test(timeout = 4000)
	public void test02() throws Exception {
		String[] stringArray0 = new String[0];
		EntityBaseServiceImpl.main(stringArray0);
		assertEquals(0, stringArray0.length);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test03() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getSearcher();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		String[] stringArray0 = new String[4];
		int[] intArray0 = new int[5];
		// Undeclared exception!
		entityBaseServiceImpl0.gethighlightsResults(stringArray0, intArray0, (-1653));
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test04() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		SolrSearcher solrSearcher0 = mock(SolrSearcher.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(solrSearcher0)
				.search(any(com.firstrain.solr.client.SearchSpec.class));
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(solrSearcher0).when(entityBaseServiceRepository0).getSearcher();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		GraphQueryCriteria graphQueryCriteria0 = new GraphQueryCriteria();
		// Undeclared exception!
		entityBaseServiceImpl0.getWebVolumeInfoFromSolr(graphQueryCriteria0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test05() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		int[] intArray0 = new int[0];
		BaseSpec baseSpec0 = new BaseSpec();
		Graph.GraphFor graph_GraphFor0 = Graph.GraphFor.SEARCH_PAGE;
		entityBaseServiceImpl0
				.getWebVolumeGraph("5.06", intArray0, intArray0, baseSpec0, graph_GraphFor0, 0, (short) 10,
						intArray0, true);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test06() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		BaseSpec baseSpec0 = new BaseSpec();
		BlendDunsInput blendDunsInput0 = new BlendDunsInput();
		entityBaseServiceImpl0
				.getWebResultsForSearch("^ 4 5^0sGrFx7", "^ 4 5^0sGrFx7", baseSpec0, blendDunsInput0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test07() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0)
				.getDocumentSimilarityUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		TwitterSpec twitterSpec0 = new TwitterSpec();
		entityBaseServiceImpl0.getWebResults(null, twitterSpec0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test08() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		String[] stringArray0 = new String[2];
		TwitterSpec twitterSpec0 = new TwitterSpec();
		entityBaseServiceImpl0.getTweetList(stringArray0, twitterSpec0);
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		String[] stringArray0 = new String[0];
		TwitterSpec twitterSpec0 = new TwitterSpec();
		TweetSet tweetSet0 = entityBaseServiceImpl0.getTweetList(stringArray0, twitterSpec0);
		assertNull(tweetSet0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test10() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		DateCount dateCount0 = new DateCount();
		LongArrayList longArrayList0 = dateCount0.getCounts();
		entityBaseServiceImpl0.getTweetDetails(longArrayList0, null);
	}

	@Test(timeout = 4000)
	public void test11() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(twitterService0)
				.getTweets(any(java.lang.String[].class), anyBoolean(),
						any(com.firstrain.frapi.domain.TwitterSpec.class), any(long[].class));
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		EntityDetailSpec entityDetailSpec0 = new EntityDetailSpec();
		TweetSet tweetSet0 = entityBaseServiceImpl0
				.getTweetDetails(null, entityDetailSpec0);
		assertNull(tweetSet0);
	}

	@Test(timeout = 4000)
	public void test12() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TweetSet tweetSet0 = mock(TweetSet.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(tweetSet0).getTweets();
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		doReturn(tweetSet0).when(twitterService0).getTweets(any(java.lang.String[].class), anyBoolean(),
				any(com.firstrain.frapi.domain.TwitterSpec.class), any(long[].class));
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		DateCount dateCount0 = new DateCount();
		LongArrayList longArrayList0 = dateCount0.getCounts();
		EntityDetailSpec entityDetailSpec0 = new EntityDetailSpec();
		TweetSet tweetSet1 = entityBaseServiceImpl0.getTweetDetails(longArrayList0, entityDetailSpec0);
		assertNull(tweetSet1);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test13() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		BaseSpec baseSpec0 = new BaseSpec();
		entityBaseServiceImpl0.getSearchResultForAnalystComments(null, baseSpec0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test14() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		TwitterSpec twitterSpec0 = new TwitterSpec();
		entityBaseServiceImpl0
				.getSearchResult(null, null, "", twitterSpec0);
	}

	@Test(timeout = 4000)
	public void test15() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		int[] intArray0 = new int[0];
		BaseSpec baseSpec0 = new BaseSpec();
		EventSet eventSet0 = entityBaseServiceImpl0.getEventsTimeline(intArray0, intArray0, baseSpec0);
		assertNull(eventSet0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test16() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		int[] intArray0 = new int[5];
		TwitterSpec twitterSpec0 = new TwitterSpec();
		entityBaseServiceImpl0.getEventsTimeline(intArray0, intArray0, twitterSpec0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test17() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		TwitterSpec twitterSpec0 = new TwitterSpec();
		entityBaseServiceImpl0.getEventSetForMTEvents(null, twitterSpec0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test18() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getSearcher();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		DateCount dateCount0 = new DateCount(0L, (-1L), 3600000L);
		LongArrayList longArrayList0 = dateCount0.getCounts();
		EntityDetailSpec entityDetailSpec0 = new EntityDetailSpec();
		entityBaseServiceImpl0
				.getDocDetails(longArrayList0, entityDetailSpec0, null, (short) 0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test19() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntitySolrServer();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		// Undeclared exception!
		entityBaseServiceImpl0.getCompanyTradingInfoFromIndex((-557));
	}

	@Test(timeout = 4000)
	public void test20() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(accelerometerServiceRepository0).getAccelerometer(anyString());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		GraphNodeSet graphNodeSet0 = entityBaseServiceImpl0.getAccelerometerNode("[f$$", false, true);
		assertNull(graphNodeSet0);
	}

	@Test(timeout = 4000)
	public void test21() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(autoSuggestService0)
				.getAutoCompleteEntries(anyString(), anyString(), anyBoolean(), anyInt(), anyString());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		List<Entity> list0 = entityBaseServiceImpl0
				.autoSuggestForEntity(null, null, 0, null,
						null);
		assertTrue(list0.isEmpty());
	}

	@Test(timeout = 4000)
	public void test22() throws Exception {
		EntityBaseServiceImpl entityBaseServiceImpl0 = new EntityBaseServiceImpl();
		AccelerometerServiceRepository accelerometerServiceRepository0 = mock(
				AccelerometerServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"accelerometerServiceRepository", accelerometerServiceRepository0);
		AutoSuggestService autoSuggestService0 = mock(AutoSuggestService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"autoSuggestService", autoSuggestService0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "eventService",
				eventService0);
		ExcelProcessingHelperRepository excelProcessingHelperRepository0 = mock(
				ExcelProcessingHelperRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"excelProcesingHelperRepository", excelProcessingHelperRepository0);
		RegionExcelUtilImpl regionExcelUtilImpl0 = new RegionExcelUtilImpl();
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository1);
		Injector.validateBean(regionExcelUtilImpl0,
				com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector
				.executePostConstruct(regionExcelUtilImpl0,
						com.firstrain.frapi.service.impl.RegionExcelUtilImpl.class);
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class,
				"regionExcelUtilImpl", regionExcelUtilImpl0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository2 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository2);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "servicesAPIUtil",
						servicesAPIUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "taskExecutor",
				threadPoolTaskExecutor0);
		TwitterService twitterService0 = mock(TwitterService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBaseServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class, "twitterService",
						twitterService0);
		Injector.validateBean(entityBaseServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBaseServiceImpl.class);
		GraphQueryCriteria graphQueryCriteria0 = new GraphQueryCriteria();
		Graph graph0 = entityBaseServiceImpl0
				.generateGraphObject(graphQueryCriteria0, null, (-2312));
		assertNull(graph0.isHasMore());
	}
}
