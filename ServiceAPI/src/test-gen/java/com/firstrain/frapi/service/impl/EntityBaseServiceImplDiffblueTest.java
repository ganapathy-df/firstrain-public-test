package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyShort;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.BaseSpec;
import com.firstrain.frapi.domain.CompanyTradingRange;
import com.firstrain.frapi.domain.CompanyVolume;
import com.firstrain.frapi.obj.EventQueryCriteria.EventTypeRange;
import com.firstrain.frapi.obj.MgmtTurnoverServiceSpec;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.pojo.Event;
import com.firstrain.frapi.pojo.GraphNode;
import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.ExcelProcessingHelperRepository;
import com.firstrain.frapi.service.AutoSuggestService;
import com.firstrain.frapi.service.EventService;
import com.firstrain.frapi.service.TwitterService;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.solr.client.DateCount;
import com.firstrain.solr.client.SearchResult;
import com.firstrain.solr.client.SearchSpec;
import com.firstrain.solr.client.SolrSearcher;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.apache.solr.common.SolrDocumentList;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class EntityBaseServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EntityBaseServiceImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void callOutput2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl$1");
    final EntityBaseServiceImpl entityBaseServiceImpl =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(entityBaseServiceImpl, "autoSuggestService", null);
    Reflector.setField(entityBaseServiceImpl, "convertUtil", null);
    Reflector.setField(entityBaseServiceImpl, "eventService", null);
    entityBaseServiceImpl.businessBasics = null;
    Reflector.setField(entityBaseServiceImpl, "servicesAPIUtil", null);
    Reflector.setField(entityBaseServiceImpl, "accelerometerServiceRepository", null);
    Reflector.setField(entityBaseServiceImpl, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(entityBaseServiceImpl, "LOG", null);
    entityBaseServiceImpl.taskExecutor = null;
    entityBaseServiceImpl.uberTopics = null;
    Reflector.setField(entityBaseServiceImpl, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(
        entityBaseServiceImpl, "entityBaseServiceRepository", entityBaseServiceRepository);
    entityBaseServiceImpl.executorTimeout = 0L;
    Reflector.setField(entityBaseServiceImpl, "twitterService", null);
    Reflector.setField(entityBaseServiceImpl, "daysArr", null);
    Reflector.setField(entityBaseServiceImpl, "regionExcelUtilImpl", null);
    Reflector.setField(entityBaseServiceImpl, "st_THE_Regex", null);
    Reflector.setField(objectUnderTest, "this$0", entityBaseServiceImpl);
    Reflector.setField(objectUnderTest, "val$scopeMulti", null);
    final String[] stringArray = {};
    Reflector.setField(objectUnderTest, "val$qMulti", stringArray);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(baseSpec, isSectionMultiMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(baseSpec, getLastDayMethod).withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(1).doReturn(363))
        .when(baseSpec, getDaysCountMethod)
        .withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(baseSpec, getCountMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(baseSpec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    PowerMockito.doReturn(null).when(baseSpec, getIndustryClassificationIdMethod).withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    PowerMockito.doReturn(null).when(baseSpec, getStartMethod).withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(baseSpec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    PowerMockito.doReturn(null).when(baseSpec, getExcludeArticleIdsSSVMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "val$spec", baseSpec);
    Reflector.setField(objectUnderTest, "val$days", null);
    Reflector.setField(objectUnderTest, "val$fq", "");
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl$1");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final Object[] retval = (Object[]) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertArrayEquals(new Object[] {null, null}, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EventService.class)
  @Test
  public void callOutputNull() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl$3");
    Reflector.setField(objectUnderTest, "val$range", null);
    Reflector.setField(objectUnderTest, "val$baseSpec", null);
    Reflector.setField(objectUnderTest, "val$partition", null);
    final EntityBaseServiceImpl entityBaseServiceImpl =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(entityBaseServiceImpl, "autoSuggestService", null);
    Reflector.setField(entityBaseServiceImpl, "convertUtil", null);
    final EventService eventService = PowerMockito.mock(EventService.class);
    PowerMockito.when(
            eventService.getMgmtFromSolr(
                or(isA(List.class), isNull(List.class)),
                or(isA(MgmtTurnoverServiceSpec.class), isNull(MgmtTurnoverServiceSpec.class)),
                anyBoolean(),
                or(isA(EventTypeRange.class), isNull(EventTypeRange.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(entityBaseServiceImpl, "eventService", eventService);
    entityBaseServiceImpl.businessBasics = null;
    Reflector.setField(entityBaseServiceImpl, "servicesAPIUtil", null);
    Reflector.setField(entityBaseServiceImpl, "accelerometerServiceRepository", null);
    Reflector.setField(entityBaseServiceImpl, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(entityBaseServiceImpl, "LOG", null);
    entityBaseServiceImpl.taskExecutor = null;
    entityBaseServiceImpl.uberTopics = null;
    Reflector.setField(entityBaseServiceImpl, "excelProcesingHelperRepository", null);
    Reflector.setField(entityBaseServiceImpl, "entityBaseServiceRepository", null);
    entityBaseServiceImpl.executorTimeout = 0L;
    Reflector.setField(entityBaseServiceImpl, "twitterService", null);
    Reflector.setField(entityBaseServiceImpl, "daysArr", null);
    Reflector.setField(entityBaseServiceImpl, "regionExcelUtilImpl", null);
    Reflector.setField(entityBaseServiceImpl, "st_THE_Regex", null);
    Reflector.setField(objectUnderTest, "this$0", entityBaseServiceImpl);
    Reflector.setField(objectUnderTest, "val$spec", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl$3");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final SolrDocumentList retval = (SolrDocumentList) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(GraphNode.class)
  @Test
  public void compareInputNotNullNotNullOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl$5");
    Reflector.setField(objectUnderTest, "this$0", null);
    final GraphNode o1 = PowerMockito.mock(GraphNode.class);
    final Method getValueMethod = DTUMemberMatcher.method(GraphNode.class, "getValue");
    PowerMockito.doReturn(0.0f).when(o1, getValueMethod).withNoArguments();
    final GraphNode o2 = PowerMockito.mock(GraphNode.class);
    final Method getValueMethod1 = DTUMemberMatcher.method(GraphNode.class, "getValue");
    PowerMockito.doReturn(0.0f).when(o2, getValueMethod1).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl$5");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.pojo.GraphNode"),
            Reflector.forName("com.firstrain.frapi.pojo.GraphNode"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getCompanyTradingMapInput0Output0() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    final TwitterService twitterService =
        (TwitterService) Reflector.getInstance("com.firstrain.frapi.service.TwitterService");
    Reflector.setField(objectUnderTest, "twitterService", twitterService);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final ArrayList<CompanyTradingRange> companyTradingInfo = new ArrayList<CompanyTradingRange>();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getCompanyTradingMap", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final Map<Integer, CompanyTradingRange> retval =
        (Map<Integer, CompanyTradingRange>)
            methodUnderTest.invoke(objectUnderTest, companyTradingInfo);

    // Assert
    final HashMap<Integer, CompanyTradingRange> hashMap =
        new HashMap<Integer, CompanyTradingRange>();
    assertEquals(hashMap, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(CompanyTradingRange.class)
  @Test
  public void getCompanyTradingMapInput1Output1() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    final TwitterService twitterService =
        (TwitterService) Reflector.getInstance("com.firstrain.frapi.service.TwitterService");
    Reflector.setField(objectUnderTest, "twitterService", twitterService);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final ArrayList<CompanyTradingRange> companyTradingInfo = new ArrayList<CompanyTradingRange>();
    final CompanyTradingRange companyTradingRange = PowerMockito.mock(CompanyTradingRange.class);
    final Method getDiffIdMethod = DTUMemberMatcher.method(CompanyTradingRange.class, "getDiffId");
    PowerMockito.doReturn(-2_147_220_768)
        .when(companyTradingRange, getDiffIdMethod)
        .withNoArguments();
    companyTradingInfo.add(companyTradingRange);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getCompanyTradingMap", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final Map<Integer, CompanyTradingRange> retval =
        (Map<Integer, CompanyTradingRange>)
            methodUnderTest.invoke(objectUnderTest, companyTradingInfo);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(-2_147_220_768));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getContentAlgoInputPositiveOutputNegative() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final int i = 12;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getContentAlgo", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, i);

    // Assert
    assertEquals(-2, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getContentAlgoInputPositiveOutputPositive() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final int i = 1;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getContentAlgo", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, i);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getContentAlgoInputPositiveOutputPositive2() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final int i = 4;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getContentAlgo", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, i);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getContentAlgoInputPositiveOutputPositive3() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final int i = 7;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getContentAlgo", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, i);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getContentAlgoInputPositiveOutputPositive4() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final int i = 2;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getContentAlgo", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, i);

    // Assert
    assertEquals(2, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getContentAlgoInputPositiveOutputPositive5() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final int i = 5;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getContentAlgo", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, i);

    // Assert
    assertEquals(2, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getContentAlgoInputPositiveOutputPositive6() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final int i = 8;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getContentAlgo", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, i);

    // Assert
    assertEquals(2, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getContentAlgoInputPositiveOutputPositive7() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final int i = 9;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getContentAlgo", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, i);

    // Assert
    assertEquals(3, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getContentAlgoInputZeroOutputZero() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final int i = 0;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getContentAlgo", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, i);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEntitiesInORInput1OutputNotNull() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final AutoSuggestService autoSuggestService =
        (AutoSuggestService)
            Reflector.getInstance("com.firstrain.frapi.service.AutoSuggestService");
    Reflector.setField(objectUnderTest, "autoSuggestService", autoSuggestService);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    final ExcelProcessingHelperRepository excelProcessingHelperRepository =
        (ExcelProcessingHelperRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.ExcelProcessingHelperRepository");
    Reflector.setField(
        objectUnderTest, "excelProcesingHelperRepository", excelProcessingHelperRepository);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    final TwitterService twitterService =
        (TwitterService) Reflector.getInstance("com.firstrain.frapi.service.TwitterService");
    Reflector.setField(objectUnderTest, "twitterService", twitterService);
    Reflector.setField(objectUnderTest, "daysArr", null);
    final RegionExcelUtilImpl regionExcelUtilImpl = new RegionExcelUtilImpl();
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", regionExcelUtilImpl);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final HashMap<String, Entity> dnbEntityMap = new HashMap<String, Entity>();
    dnbEntityMap.put(null, null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getEntitiesInOR", Reflector.forName("java.util.Map"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(objectUnderTest, dnbEntityMap);

    // Assert
    assertEquals("", retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Event.class, Logger.class})
  @Test
  public void getEventSetWithIdInput1Output1() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    final RegionExcelUtilImpl regionExcelUtilImpl = new RegionExcelUtilImpl();
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", regionExcelUtilImpl);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final ArrayList<Event> signalList = new ArrayList<Event>();
    final Event event = PowerMockito.mock(Event.class);
    final Method getEventIdMethod = DTUMemberMatcher.method(Event.class, "getEventId");
    PowerMockito.doReturn("").when(event, getEventIdMethod).withNoArguments();
    final Method getEventInformationEnumMethod =
        DTUMemberMatcher.method(Event.class, "getEventInformationEnum");
    PowerMockito.doReturn(null).when(event, getEventInformationEnumMethod).withNoArguments();
    signalList.add(event);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    final List<Event> retval = objectUnderTest.getEventSetWithId(signalList);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(0));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEventSetWithIdInputNullOutputNull() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final List<Event> signalList = null;

    // Act
    final List<Event> retval = objectUnderTest.getEventSetWithId(signalList);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrSearcher.class,
    SearchSpec.class,
    EntityBaseServiceImpl.class,
    EntityBaseServiceRepository.class
  })
  @Test
  public void gethighlightsResultsInput00ZeroOutputNull() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", "");
    final String[] qArr = {};
    final int[] scopeArr = {};
    final int highlightRows = 0;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setStartMethod = DTUMemberMatcher.method(SearchSpec.class, "setStart", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setStartMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final Method setRowsHightlightMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setRowsHightlight", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsHightlightMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec, "qMulti", stringArray);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "fq", "");
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);

    // Act
    final DocumentSet retval = objectUnderTest.gethighlightsResults(qArr, scopeArr, highlightRows);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultForAnalystCommentsInputNullNotNullOutputNull() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String searchToken = null;
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    PowerMockito.doReturn(null).when(spec, getStartMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeArticleIdsSSVMethod).withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final Method setQMethod = DTUMemberMatcher.method(SearchSpec.class, "setQ", String.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setQMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setFqMethod = DTUMemberMatcher.method(SearchSpec.class, "setFq", String.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setFqMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);

    // Act
    final SearchResult retval =
        objectUnderTest.getSearchResultForAnalystComments(searchToken, spec);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultInput0NullNotNullNotNullNullOutputNull() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String[] qMulti = {};
    final int[] scopeMulti = null;
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(spec, isSectionMultiMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    PowerMockito.doReturn(null).when(spec, getIndustryClassificationIdMethod).withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getStartMethod)
        .withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(spec, getLastDayMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeArticleIdsSSVMethod).withNoArguments();
    final Integer days = null;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);

    // Act
    final SearchResult retval = objectUnderTest.getSearchResult(qMulti, scopeMulti, fq, spec, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultInput0NullNotNullNotNullNullOutputNull2() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String[] qMulti = {};
    final int[] scopeMulti = null;
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(spec, isSectionMultiMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getStartMethod)
        .withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(spec, getLastDayMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeArticleIdsSSVMethod).withNoArguments();
    final Integer days = null;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec2, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec2, "lastDay", null);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needHotListDate", false);
    Reflector.setField(searchSpec2, "sectionMulti", false);
    Reflector.setField(searchSpec2, "scope", 0);
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "days", 0);
    Reflector.setField(searchSpec2, "qMulti", null);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    Reflector.setField(searchSpec2, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec2);

    // Act
    final SearchResult retval = objectUnderTest.getSearchResult(qMulti, scopeMulti, fq, spec, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultInput0NullNotNullNotNullNullOutputNull3() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String[] qMulti = {};
    final int[] scopeMulti = null;
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(spec, isSectionMultiMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getStartMethod)
        .withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(spec, getLastDayMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Integer days = null;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec2, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec2, "lastDay", null);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needHotListDate", false);
    Reflector.setField(searchSpec2, "sectionMulti", false);
    Reflector.setField(searchSpec2, "scope", 0);
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "days", 0);
    Reflector.setField(searchSpec2, "qMulti", null);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    Reflector.setField(searchSpec2, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec2);

    // Act
    final SearchResult retval = objectUnderTest.getSearchResult(qMulti, scopeMulti, fq, spec, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultInput0NullNotNullNotNullNullOutputNull4() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String[] qMulti = {};
    final int[] scopeMulti = null;
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(spec, isSectionMultiMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getStartMethod)
        .withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(spec, getLastDayMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("        ").doReturn(null))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Integer days = null;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec2, "lastDay", null);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needHotListDate", false);
    Reflector.setField(searchSpec2, "sectionMulti", false);
    Reflector.setField(searchSpec2, "scope", 0);
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "days", 0);
    final String[] stringArray1 = {};
    Reflector.setField(searchSpec2, "qMulti", stringArray1);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    final int[] intArray1 = {};
    Reflector.setField(searchSpec2, "scopeMulti", intArray1);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(searchSpec2)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec3 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec3, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec3, "fq", null);
    Reflector.setField(searchSpec3, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec3, "lastDay", null);
    Reflector.setField(searchSpec3, "needBodyLength", false);
    Reflector.setField(searchSpec3, "needQuotes", false);
    Reflector.setField(searchSpec3, "needHotListDate", false);
    Reflector.setField(searchSpec3, "sectionMulti", false);
    Reflector.setField(searchSpec3, "scope", 0);
    Reflector.setField(searchSpec3, "start", 0);
    Reflector.setField(searchSpec3, "days", 0);
    Reflector.setField(searchSpec3, "qMulti", null);
    Reflector.setField(searchSpec3, "needHotListAll", false);
    Reflector.setField(searchSpec3, "needSearchSuggestion", false);
    Reflector.setField(searchSpec3, "needHighlighting", false);
    Reflector.setField(searchSpec3, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec3);

    // Act
    final SearchResult retval = objectUnderTest.getSearchResult(qMulti, scopeMulti, fq, spec, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultInput0NullNotNullNotNullNullOutputNull5() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String[] qMulti = {};
    final int[] scopeMulti = null;
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(spec, isSectionMultiMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getStartMethod)
        .withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getExcludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(spec, getLastDayMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("        ").doReturn(null))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Integer days = null;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec2, "lastDay", null);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needHotListDate", false);
    Reflector.setField(searchSpec2, "sectionMulti", false);
    Reflector.setField(searchSpec2, "scope", 0);
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "days", 0);
    final String[] stringArray1 = {};
    Reflector.setField(searchSpec2, "qMulti", stringArray1);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    final int[] intArray1 = {};
    Reflector.setField(searchSpec2, "scopeMulti", intArray1);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(searchSpec2)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec3 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec3, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec3, "fq", null);
    Reflector.setField(searchSpec3, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec3, "lastDay", null);
    Reflector.setField(searchSpec3, "needBodyLength", false);
    Reflector.setField(searchSpec3, "needQuotes", false);
    Reflector.setField(searchSpec3, "needHotListDate", false);
    Reflector.setField(searchSpec3, "sectionMulti", false);
    Reflector.setField(searchSpec3, "scope", 0);
    Reflector.setField(searchSpec3, "start", 0);
    Reflector.setField(searchSpec3, "days", 0);
    Reflector.setField(searchSpec3, "qMulti", null);
    Reflector.setField(searchSpec3, "needHotListAll", false);
    Reflector.setField(searchSpec3, "needSearchSuggestion", false);
    Reflector.setField(searchSpec3, "needHighlighting", false);
    Reflector.setField(searchSpec3, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec3);

    // Act
    final SearchResult retval = objectUnderTest.getSearchResult(qMulti, scopeMulti, fq, spec, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultInput0NullNotNullNotNullNullOutputNull6() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String[] qMulti = {};
    final int[] scopeMulti = null;
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(spec, isSectionMultiMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    PowerMockito.doReturn(null).when(spec, getStartMethod).withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("        ").doReturn(null))
        .when(spec, getExcludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(spec, getLastDayMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("        ").doReturn(null))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Integer days = null;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec2, "lastDay", null);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needHotListDate", false);
    Reflector.setField(searchSpec2, "sectionMulti", false);
    Reflector.setField(searchSpec2, "scope", 0);
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "days", 0);
    final String[] stringArray1 = {};
    Reflector.setField(searchSpec2, "qMulti", stringArray1);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    final int[] intArray1 = {};
    Reflector.setField(searchSpec2, "scopeMulti", intArray1);
    final Method setExcludeSourceIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeSourceIds", String.class);
    PowerMockito.doReturn(searchSpec2)
        .when(searchSpec, setExcludeSourceIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec3 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec3, "fq", null);
    Reflector.setField(searchSpec3, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec3, "lastDay", null);
    Reflector.setField(searchSpec3, "needBodyLength", false);
    Reflector.setField(searchSpec3, "needQuotes", false);
    Reflector.setField(searchSpec3, "needHotListDate", false);
    Reflector.setField(searchSpec3, "sectionMulti", false);
    Reflector.setField(searchSpec3, "scope", 0);
    Reflector.setField(searchSpec3, "start", 0);
    Reflector.setField(searchSpec3, "days", 0);
    final String[] stringArray2 = {};
    Reflector.setField(searchSpec3, "qMulti", stringArray2);
    Reflector.setField(searchSpec3, "needHotListAll", false);
    Reflector.setField(searchSpec3, "needSearchSuggestion", false);
    Reflector.setField(searchSpec3, "needHighlighting", false);
    final int[] intArray2 = {};
    Reflector.setField(searchSpec3, "scopeMulti", intArray2);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec3)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec4 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec4, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec4, "fq", null);
    Reflector.setField(searchSpec4, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec4, "lastDay", null);
    Reflector.setField(searchSpec4, "needBodyLength", false);
    Reflector.setField(searchSpec4, "needQuotes", false);
    Reflector.setField(searchSpec4, "needHotListDate", false);
    Reflector.setField(searchSpec4, "sectionMulti", false);
    Reflector.setField(searchSpec4, "scope", 0);
    Reflector.setField(searchSpec4, "start", 0);
    Reflector.setField(searchSpec4, "days", 0);
    Reflector.setField(searchSpec4, "qMulti", null);
    Reflector.setField(searchSpec4, "needHotListAll", false);
    Reflector.setField(searchSpec4, "needSearchSuggestion", false);
    Reflector.setField(searchSpec4, "needHighlighting", false);
    Reflector.setField(searchSpec4, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec4);

    // Act
    final SearchResult retval = objectUnderTest.getSearchResult(qMulti, scopeMulti, fq, spec, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultInput0NullNotNullNotNullNullOutputNull7() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String[] qMulti = {};
    final int[] scopeMulti = null;
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(spec, isSectionMultiMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getIncludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    PowerMockito.doReturn(null).when(spec, getStartMethod).withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getExcludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(spec, getLastDayMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("        ").doReturn(null))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Integer days = null;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec2, "lastDay", null);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needHotListDate", false);
    Reflector.setField(searchSpec2, "sectionMulti", false);
    Reflector.setField(searchSpec2, "scope", 0);
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "days", 0);
    final String[] stringArray1 = {};
    Reflector.setField(searchSpec2, "qMulti", stringArray1);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    final int[] intArray1 = {};
    Reflector.setField(searchSpec2, "scopeMulti", intArray1);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(searchSpec2)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec3 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec3, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec3, "fq", null);
    Reflector.setField(searchSpec3, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec3, "lastDay", null);
    Reflector.setField(searchSpec3, "needBodyLength", false);
    Reflector.setField(searchSpec3, "needQuotes", false);
    Reflector.setField(searchSpec3, "needHotListDate", false);
    Reflector.setField(searchSpec3, "sectionMulti", false);
    Reflector.setField(searchSpec3, "scope", 0);
    Reflector.setField(searchSpec3, "start", 0);
    Reflector.setField(searchSpec3, "days", 0);
    Reflector.setField(searchSpec3, "qMulti", null);
    Reflector.setField(searchSpec3, "needHotListAll", false);
    Reflector.setField(searchSpec3, "needSearchSuggestion", false);
    Reflector.setField(searchSpec3, "needHighlighting", false);
    Reflector.setField(searchSpec3, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec3);

    // Act
    final SearchResult retval = objectUnderTest.getSearchResult(qMulti, scopeMulti, fq, spec, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultInput0NullNotNullNotNullNullOutputNull8() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String[] qMulti = {};
    final int[] scopeMulti = null;
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(spec, isSectionMultiMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getStartMethod)
        .withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("        ").doReturn(null))
        .when(spec, getExcludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(spec, getLastDayMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("        ").doReturn(null))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Integer days = null;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec2, "lastDay", null);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needHotListDate", false);
    Reflector.setField(searchSpec2, "sectionMulti", false);
    Reflector.setField(searchSpec2, "scope", 0);
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "days", 0);
    final String[] stringArray1 = {};
    Reflector.setField(searchSpec2, "qMulti", stringArray1);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    final int[] intArray1 = {};
    Reflector.setField(searchSpec2, "scopeMulti", intArray1);
    final Method setExcludeSourceIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeSourceIds", String.class);
    PowerMockito.doReturn(searchSpec2)
        .when(searchSpec, setExcludeSourceIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec3 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec3, "fq", null);
    Reflector.setField(searchSpec3, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec3, "lastDay", null);
    Reflector.setField(searchSpec3, "needBodyLength", false);
    Reflector.setField(searchSpec3, "needQuotes", false);
    Reflector.setField(searchSpec3, "needHotListDate", false);
    Reflector.setField(searchSpec3, "sectionMulti", false);
    Reflector.setField(searchSpec3, "scope", 0);
    Reflector.setField(searchSpec3, "start", 0);
    Reflector.setField(searchSpec3, "days", 0);
    final String[] stringArray2 = {};
    Reflector.setField(searchSpec3, "qMulti", stringArray2);
    Reflector.setField(searchSpec3, "needHotListAll", false);
    Reflector.setField(searchSpec3, "needSearchSuggestion", false);
    Reflector.setField(searchSpec3, "needHighlighting", false);
    final int[] intArray2 = {};
    Reflector.setField(searchSpec3, "scopeMulti", intArray2);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec3)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec4 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec4, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec4, "fq", null);
    Reflector.setField(searchSpec4, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec4, "lastDay", null);
    Reflector.setField(searchSpec4, "needBodyLength", false);
    Reflector.setField(searchSpec4, "needQuotes", false);
    Reflector.setField(searchSpec4, "needHotListDate", false);
    Reflector.setField(searchSpec4, "sectionMulti", false);
    Reflector.setField(searchSpec4, "scope", 0);
    Reflector.setField(searchSpec4, "start", 0);
    Reflector.setField(searchSpec4, "days", 0);
    Reflector.setField(searchSpec4, "qMulti", null);
    Reflector.setField(searchSpec4, "needHotListAll", false);
    Reflector.setField(searchSpec4, "needSearchSuggestion", false);
    Reflector.setField(searchSpec4, "needHighlighting", false);
    Reflector.setField(searchSpec4, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec4);

    // Act
    final SearchResult retval = objectUnderTest.getSearchResult(qMulti, scopeMulti, fq, spec, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    EntityBaseServiceRepository.class,
    EntityBaseServiceImpl.class,
    SearchSpec.class,
    SolrSearcher.class
  })
  @Test
  public void getSearchResultInput0NullNotNullNotNullNullOutputNull9() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final EventService eventService =
        (EventService) Reflector.getInstance("com.firstrain.frapi.service.EventService");
    Reflector.setField(objectUnderTest, "eventService", eventService);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method searchMethod =
        DTUMemberMatcher.method(SolrSearcher.class, "search", SearchSpec.class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, searchMethod)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)));
    PowerMockito.when(entityBaseServiceRepository.getSearcher()).thenReturn(solrSearcher);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final String[] qMulti = {};
    final int[] scopeMulti = null;
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method isSectionMultiMethod = DTUMemberMatcher.method(BaseSpec.class, "isSectionMulti");
    PowerMockito.doReturn(false).when(spec, isSectionMultiMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("        ").doReturn(null))
        .when(spec, getIncludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(BaseSpec.class, "getStart");
    PowerMockito.doReturn(null).when(spec, getStartMethod).withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getExcludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getDaysCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getDaysCount");
    PowerMockito.doReturn(0).when(spec, getDaysCountMethod).withNoArguments();
    final Method getLastDayMethod = DTUMemberMatcher.method(BaseSpec.class, "getLastDay");
    PowerMockito.doReturn(null).when(spec, getLastDayMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("        ").doReturn(null))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Integer days = null;
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec1, "lastDay", null);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needHotListDate", false);
    Reflector.setField(searchSpec1, "sectionMulti", false);
    Reflector.setField(searchSpec1, "scope", 0);
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "days", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec2, "lastDay", null);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needHotListDate", false);
    Reflector.setField(searchSpec2, "sectionMulti", false);
    Reflector.setField(searchSpec2, "scope", 0);
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "days", 0);
    final String[] stringArray1 = {};
    Reflector.setField(searchSpec2, "qMulti", stringArray1);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    final int[] intArray1 = {};
    Reflector.setField(searchSpec2, "scopeMulti", intArray1);
    final Method setIncludeSourceIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIncludeSourceIds", String.class);
    PowerMockito.doReturn(searchSpec2)
        .when(searchSpec, setIncludeSourceIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec3 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec3, "fq", null);
    Reflector.setField(searchSpec3, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec3, "lastDay", null);
    Reflector.setField(searchSpec3, "needBodyLength", false);
    Reflector.setField(searchSpec3, "needQuotes", false);
    Reflector.setField(searchSpec3, "needHotListDate", false);
    Reflector.setField(searchSpec3, "sectionMulti", false);
    Reflector.setField(searchSpec3, "scope", 0);
    Reflector.setField(searchSpec3, "start", 0);
    Reflector.setField(searchSpec3, "days", 0);
    final String[] stringArray2 = {};
    Reflector.setField(searchSpec3, "qMulti", stringArray2);
    Reflector.setField(searchSpec3, "needHotListAll", false);
    Reflector.setField(searchSpec3, "needSearchSuggestion", false);
    Reflector.setField(searchSpec3, "needHighlighting", false);
    final int[] intArray2 = {};
    Reflector.setField(searchSpec3, "scopeMulti", intArray2);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec3)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec, "lastDay", null);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needHotListDate", false);
    Reflector.setField(searchSpec, "sectionMulti", false);
    Reflector.setField(searchSpec, "scope", 0);
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "days", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec4 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec4, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec4, "fq", null);
    Reflector.setField(searchSpec4, "useLikelySearchIntention", false);
    Reflector.setField(searchSpec4, "lastDay", null);
    Reflector.setField(searchSpec4, "needBodyLength", false);
    Reflector.setField(searchSpec4, "needQuotes", false);
    Reflector.setField(searchSpec4, "needHotListDate", false);
    Reflector.setField(searchSpec4, "sectionMulti", false);
    Reflector.setField(searchSpec4, "scope", 0);
    Reflector.setField(searchSpec4, "start", 0);
    Reflector.setField(searchSpec4, "days", 0);
    Reflector.setField(searchSpec4, "qMulti", null);
    Reflector.setField(searchSpec4, "needHotListAll", false);
    Reflector.setField(searchSpec4, "needSearchSuggestion", false);
    Reflector.setField(searchSpec4, "needHighlighting", false);
    Reflector.setField(searchSpec4, "scopeMulti", null);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec4);

    // Act
    final SearchResult retval = objectUnderTest.getSearchResult(qMulti, scopeMulti, fq, spec, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toCompanyVolumeInfoInputNullZeroOutputNull() throws Exception {

    // Arrange
    final EntityBaseServiceImpl objectUnderTest =
        (EntityBaseServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    Reflector.setField(objectUnderTest, "autoSuggestService", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "eventService", null);
    objectUnderTest.businessBasics = null;
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "accelerometerServiceRepository", null);
    Reflector.setField(objectUnderTest, "MAX_ACCELEROMETER_COUNT", 0);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.taskExecutor = null;
    objectUnderTest.uberTopics = null;
    Reflector.setField(objectUnderTest, "excelProcesingHelperRepository", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "twitterService", null);
    Reflector.setField(objectUnderTest, "daysArr", null);
    Reflector.setField(objectUnderTest, "regionExcelUtilImpl", null);
    Reflector.setField(objectUnderTest, "st_THE_Regex", null);
    final DateCount dc = null;
    final int scope = 0;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBaseServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "toCompanyVolumeInfo",
            Reflector.forName("com.firstrain.solr.client.DateCount"),
            Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final List<CompanyVolume> retval =
        (List<CompanyVolume>) methodUnderTest.invoke(objectUnderTest, dc, scope);

    // Assert
    assertNull(retval);
  }
}
