package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.firstrain.frapi.obj.EventQueryCriteria.EventTypeRange;
import java.lang.reflect.Method;
import java.util.List;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class EventServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EventServiceImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getIncludedEventTypeRangeInput0Output5() throws Exception {

    // Arrange
    final EventServiceImpl objectUnderTest = new EventServiceImpl();
    final String[] stringArray = {};
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", stringArray);
    Reflector.setField(objectUnderTest, "fields", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final int[] excludedEventTypeGroups = {};

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EventServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getIncludedEventTypeRange", Reflector.forName("int[]"));
    methodUnderTest.setAccessible(true);
    final List<EventTypeRange> retval =
        (List<EventTypeRange>) methodUnderTest.invoke(objectUnderTest, excludedEventTypeGroups);

    // Assert
    assertNotNull(retval);
    assertEquals(5, retval.size());
    assertNotNull(retval.get(0));
    assertEquals(299, retval.get(0).getEndEventType());
    assertEquals(1, retval.get(0).getStartEventType());
    assertNotNull(retval.get(1));
    assertEquals(349, retval.get(1).getEndEventType());
    assertEquals(300, retval.get(1).getStartEventType());
    assertNotNull(retval.get(2));
    assertEquals(399, retval.get(2).getEndEventType());
    assertEquals(350, retval.get(2).getStartEventType());
    assertNotNull(retval.get(3));
    assertEquals(499, retval.get(3).getEndEventType());
    assertEquals(400, retval.get(3).getStartEventType());
    assertNotNull(retval.get(4));
    assertEquals(500, retval.get(4).getEndEventType());
    assertEquals(500, retval.get(4).getStartEventType());
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void getIncludedEventTypeRangeInput1Output5() throws Exception {

    // Arrange
    final EventServiceImpl objectUnderTest =
        (EventServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EventServiceImpl");
    final String[] stringArray = {};
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", stringArray);
    Reflector.setField(objectUnderTest, "fields", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final int[] excludedEventTypeGroups = {1_073_741_825};

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EventServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getIncludedEventTypeRange", Reflector.forName("int[]"));
    methodUnderTest.setAccessible(true);
    final List<EventTypeRange> retval =
        (List<EventTypeRange>) methodUnderTest.invoke(objectUnderTest, excludedEventTypeGroups);

    // Assert
    assertNotNull(retval);
    assertEquals(5, retval.size());
    assertNotNull(retval.get(0));
    assertEquals(299, retval.get(0).getEndEventType());
    assertEquals(1, retval.get(0).getStartEventType());
    assertNotNull(retval.get(1));
    assertEquals(349, retval.get(1).getEndEventType());
    assertEquals(300, retval.get(1).getStartEventType());
    assertNotNull(retval.get(2));
    assertEquals(399, retval.get(2).getEndEventType());
    assertEquals(350, retval.get(2).getStartEventType());
    assertNotNull(retval.get(3));
    assertEquals(499, retval.get(3).getEndEventType());
    assertEquals(400, retval.get(3).getStartEventType());
    assertNotNull(retval.get(4));
    assertEquals(500, retval.get(4).getEndEventType());
    assertEquals(500, retval.get(4).getStartEventType());
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIncludedEventTypeRangeInput1Output52() throws Exception {

    // Arrange
    final EventServiceImpl objectUnderTest = new EventServiceImpl();
    final String[] stringArray = {};
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", stringArray);
    Reflector.setField(objectUnderTest, "fields", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final int[] excludedEventTypeGroups = {3};

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EventServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getIncludedEventTypeRange", Reflector.forName("int[]"));
    methodUnderTest.setAccessible(true);
    final List<EventTypeRange> retval =
        (List<EventTypeRange>) methodUnderTest.invoke(objectUnderTest, excludedEventTypeGroups);

    // Assert
    assertNotNull(retval);
    assertEquals(5, retval.size());
    assertNotNull(retval.get(0));
    assertEquals(299, retval.get(0).getEndEventType());
    assertEquals(1, retval.get(0).getStartEventType());
    assertNotNull(retval.get(1));
    assertEquals(349, retval.get(1).getEndEventType());
    assertEquals(300, retval.get(1).getStartEventType());
    assertNull(retval.get(2));
    assertNotNull(retval.get(3));
    assertEquals(499, retval.get(3).getEndEventType());
    assertEquals(400, retval.get(3).getStartEventType());
    assertNotNull(retval.get(4));
    assertEquals(500, retval.get(4).getEndEventType());
    assertEquals(500, retval.get(4).getStartEventType());
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIncludedEventTypeRangeInputNullOutput5() throws Exception {

    // Arrange
    final EventServiceImpl objectUnderTest = new EventServiceImpl();
    final String[] stringArray = {};
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", stringArray);
    Reflector.setField(objectUnderTest, "fields", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final int[] excludedEventTypeGroups = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EventServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getIncludedEventTypeRange", Reflector.forName("int[]"));
    methodUnderTest.setAccessible(true);
    final List<EventTypeRange> retval =
        (List<EventTypeRange>) methodUnderTest.invoke(objectUnderTest, excludedEventTypeGroups);

    // Assert
    assertNotNull(retval);
    assertEquals(5, retval.size());
    assertNotNull(retval.get(0));
    assertEquals(299, retval.get(0).getEndEventType());
    assertEquals(1, retval.get(0).getStartEventType());
    assertNotNull(retval.get(1));
    assertEquals(349, retval.get(1).getEndEventType());
    assertEquals(300, retval.get(1).getStartEventType());
    assertNotNull(retval.get(2));
    assertEquals(399, retval.get(2).getEndEventType());
    assertEquals(350, retval.get(2).getStartEventType());
    assertNotNull(retval.get(3));
    assertEquals(499, retval.get(3).getEndEventType());
    assertEquals(400, retval.get(3).getStartEventType());
    assertNotNull(retval.get(4));
    assertEquals(500, retval.get(4).getEndEventType());
    assertEquals(500, retval.get(4).getStartEventType());
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void initializeDefaultEventTypeRangeOutput5() throws Exception {

    // Arrange
    final EventServiceImpl objectUnderTest = new EventServiceImpl();
    Reflector.setField(objectUnderTest, "MGMT_DETAIL_FIELDS", null);
    Reflector.setField(objectUnderTest, "fields", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EventServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("initializeDefaultEventTypeRange");
    methodUnderTest.setAccessible(true);
    final List<EventTypeRange> retval =
        (List<EventTypeRange>) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
    assertEquals(5, retval.size());
    assertNotNull(retval.get(0));
    assertEquals(299, retval.get(0).getEndEventType());
    assertEquals(1, retval.get(0).getStartEventType());
    assertNotNull(retval.get(1));
    assertEquals(349, retval.get(1).getEndEventType());
    assertEquals(300, retval.get(1).getStartEventType());
    assertNotNull(retval.get(2));
    assertEquals(399, retval.get(2).getEndEventType());
    assertEquals(350, retval.get(2).getStartEventType());
    assertNotNull(retval.get(3));
    assertEquals(499, retval.get(3).getEndEventType());
    assertEquals(400, retval.get(3).getStartEventType());
    assertNotNull(retval.get(4));
    assertEquals(500, retval.get(4).getEndEventType());
    assertEquals(500, retval.get(4).getStartEventType());
  }
}
