/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:16:14 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.any;
import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import com.firstrain.frapi.domain.EntityMap;
import com.firstrain.frapi.pojo.EnterprisePref;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.pojo.EntityBriefInfo;
import com.firstrain.frapi.repository.CompanyServiceRepository;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.service.CompanyService;
import com.firstrain.frapi.service.DnbService;
import com.firstrain.frapi.service.EntityBaseService;
import com.firstrain.frapi.service.EntityProcessingService;
import com.firstrain.frapi.service.IndustryBriefService;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.DateBucketUtils;
import com.firstrain.frapi.util.DefaultEnums;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.EntityEntry;
import com.firstrain.solr.client.EntityInfoCache;
import com.firstrain.solr.client.EntityInfoCacheLucene;
import java.util.List;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class EntityBriefServiceImplESTest {

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test0() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityInfoCache.CacheSearchSpec entityInfoCache_CacheSearchSpec0 = new EntityInfoCache.CacheSearchSpec(
				"java:comp/env/FR/PortalServices/ServiceConfig");
		EntityInfoCacheLucene entityInfoCacheLucene0 = new EntityInfoCacheLucene(null, 12,
				false, entityInfoCache_CacheSearchSpec0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(entityInfoCacheLucene0).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		entityBriefServiceImpl0.getEntityPeers(null, null, false);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test1() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		Namespace namespace0 = Namespace.get("Y D_]5");
		SolrDocument solrDocument0 = new SolrDocument();
		BeanElement beanElement0 = new BeanElement("&l5.Jy<", namespace0, solrDocument0);
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
		entityBriefServiceImpl0.getEntityPeers("C:", beanAttributeList0, true);
	}

	@Test(timeout = 4000)
	public void test2() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(dnbService0)
				.getDnbEntity(anyString(), any(com.firstrain.frapi.domain.BlendDunsInput.class));
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		Class<EntityEntry> class0 = EntityEntry.class;
		BeanMetaData beanMetaData0 = new BeanMetaData(class0);
		QName qName0 = QName
				.get("getReportDate", "Exception getting TurnOverEvents for companyIds ", "getReportDate");
		BeanElement beanElement0 = new BeanElement(qName0);
		BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
		EntityBriefInfo entityBriefInfo0 = entityBriefServiceImpl0
				.getEntityPeers("getReportDate", beanAttributeList0, true);
		assertEquals(100, entityBriefInfo0.getStatusCode());
	}

	@Test(timeout = 4000)
	public void test3() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		DefaultEnums.INPUT_ENTITY_TYPE defaultEnums_INPUT_ENTITY_TYPE0 = DefaultEnums.INPUT_ENTITY_TYPE.SEARCH;
		EntityBriefInfo entityBriefInfo0 = entityBriefServiceImpl0
				.getEntityMatch("getReportDate", 771, defaultEnums_INPUT_ENTITY_TYPE0, null);
		assertEquals(0, entityBriefInfo0.getStatusCode());
	}

	@Test(timeout = 4000)
	public void test4() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0)
				.getSolrDocForSourceSearchToken(anyString());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		EntityMap entityMap0 = entityBriefServiceImpl0.getEntityMapBySourceSearchToken("C:C:", "C:C:");
		assertNull(entityMap0);
	}

	@Test(timeout = 4000)
	public void test5() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		EntityBriefInfo entityBriefInfo0 = entityBriefServiceImpl0.getEntityMap("ServiceConfig.xml");
		assertEquals(0, entityBriefInfo0.getStatusCode());
	}

	@Test(timeout = 4000)
	public void test6() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityInfoCache.CacheSearchSpec entityInfoCache_CacheSearchSpec0 = new EntityInfoCache.CacheSearchSpec();
		EntityInfoCacheLucene entityInfoCacheLucene0 = new EntityInfoCacheLucene(null,
				1293, entityInfoCache_CacheSearchSpec0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(entityInfoCacheLucene0).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		EntityBriefInfo entityBriefInfo0 = entityBriefServiceImpl0.getEntityMap("ServiceConfig.xml");
		assertEquals(100, entityBriefInfo0.getStatusCode());
	}

	@Test(timeout = 4000)
	public void test7() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityInfoCacheLucene entityInfoCacheLucene0 = new EntityInfoCacheLucene(null,
				180);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(entityInfoCacheLucene0).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		EnterprisePref enterprisePref0 = new EnterprisePref();
		EntityBriefInfo entityBriefInfo0 = entityBriefServiceImpl0
				.getEntityBriefDetailsForMT(enterprisePref0, "//ServiceConfig/DocSimilarity/*", ").D)b",
						"ASFE", "_K7y'-b7]~I", "");
		assertEquals(100, entityBriefInfo0.getStatusCode());
	}

	@Test(timeout = 4000)
	public void test8() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityInfoCacheLucene entityInfoCacheLucene0 = new EntityInfoCacheLucene(null,
				180);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(entityInfoCacheLucene0).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		EnterprisePref enterprisePref0 = new EnterprisePref();
		Boolean boolean0 = Boolean.FALSE;
		EntityBriefInfo entityBriefInfo0 = entityBriefServiceImpl0
				.getEntityBriefDetails(enterprisePref0, "ASFE", "", "8=H&4,Z2m_EjpFc.'n_", boolean0);
		assertEquals(100, entityBriefInfo0.getStatusCode());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test9() throws Exception {
		EntityBriefServiceImpl entityBriefServiceImpl0 = new EntityBriefServiceImpl();
		CompanyService companyService0 = mock(CompanyService.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "companyService",
						companyService0);
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "convertUtil",
				convertUtil0);
		DateBucketUtils dateBucketUtils0 = new DateBucketUtils();
		Injector
				.inject(entityBriefServiceImpl0,
						com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dateBucketUtils",
						dateBucketUtils0);
		DnbService dnbService0 = mock(DnbService.class, new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class, "dnbService",
				dnbService0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(entityBaseServiceRepository0).getEntityInfoCache();
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"entityProcessingService", entityProcessingService0);
		IndustryBriefService industryBriefService0 = mock(IndustryBriefService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(entityBriefServiceImpl0,
				com.firstrain.frapi.service.impl.EntityBriefServiceImpl.class,
				"industryBriefService", industryBriefService0);
		EnterprisePref enterprisePref0 = new EnterprisePref();
		entityBriefServiceImpl0.getEntityBriefDetails(enterprisePref0, "AND", "V`7?{kSTgAc:M");
	}
}
