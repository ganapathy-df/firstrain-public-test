/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:15:12 GMT 2018
 */

package com.firstrain.frapi;

import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;

import com.openpojo.random.util.ComparableDelayed;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.Test;
import org.springframework.scheduling.concurrent.CustomizableThreadFactory;
import org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

public class FRCompletionServiceESTest {

	@Test(timeout = 4000)
	public void test00() throws Exception {
		ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(11);
		scheduledThreadPoolExecutor0.isShutdown();
		scheduledThreadPoolExecutor0.getRemoveOnCancelPolicy();
		scheduledThreadPoolExecutor0.isTerminated();
		FRCompletionService<Object> fRCompletionService0 = new FRCompletionService<Object>(
				scheduledThreadPoolExecutor0);
		MockThread mockThread0 = new MockThread("com.firstrain.frapi.FRCompletionService");
		fRCompletionService0
				.submit(mockThread0, "com.firstrain.frapi.FRCompletionService");
		MockThread.interrupted();
		MockThread.getDefaultUncaughtExceptionHandler();
		TimeUnit timeUnit0 = TimeUnit.DAYS;
		fRCompletionService0.poll((long) 11, timeUnit0);
		mockThread0.setUncaughtExceptionHandler(null);
		Thread[] threadArray0 = new Thread[5];
		threadArray0[0] = mockThread0;
		threadArray0[1] = mockThread0;
		ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
		ClassLoader classLoader1 = classLoader0.getParent();
		mockThread0.setContextClassLoader(classLoader1);
		threadArray0[2] = mockThread0;
		CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory();
		customizableThreadFactory0.getThreadGroup();
		MockThread.enumerate(threadArray0);
		MockThread mockThread1 = new MockThread(null, threadArray0[0],
				"ucar.nc2.ncml.AggregationOuterDimension$ReaderTask", 11);
		mockThread1.setUncaughtExceptionHandler(null);
		customizableThreadFactory0.setDaemon(false);
		MockThread.getAllStackTraces();
		threadArray0[3] = mockThread1;
		threadArray0[4] = mockThread0;
		MockThread.enumerate(threadArray0);
		fRCompletionService0.take();
		fRCompletionService0
				.submit(mockThread0, "com.firstrain.frapi.FRCompletionService");
		TimeUnit timeUnit1 = TimeUnit.MINUTES;
		fRCompletionService0.poll(1681L, timeUnit1);
		Callable<Object> callable0 = (Callable<Object>) mock(Callable.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(callable0).call();
		fRCompletionService0.submit(callable0);
	}

	@Test(timeout = 4000)
	public void test01() throws Exception {
		ForkJoinPool forkJoinPool0 = new ForkJoinPool(61);
		ForkJoinPool.getCommonPoolParallelism();
		forkJoinPool0.getFactory();
		ForkJoinPool.getCommonPoolParallelism();
		ForkJoinPool.getCommonPoolParallelism();
		FRCompletionService<String> fRCompletionService0 = new FRCompletionService<String>(
				forkJoinPool0);
		Callable<String> callable0 = (Callable<String>) mock(Callable.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(callable0).call();
		fRCompletionService0.submit(callable0);
		fRCompletionService0.getSubmissions();
		fRCompletionService0.poll();
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test02() throws Exception {
		int int0 = 0;
		ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
		ThreadPoolTaskScheduler threadPoolTaskScheduler0 = new ThreadPoolTaskScheduler();
		threadPoolTaskScheduler0.getThreadGroup();
		MockThread mockThread0 = new MockThread();
		String string0 = ",";
		MockThread mockThread1 = new MockThread(mockThread0, ",");
		ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
		mockThread1.setContextClassLoader(classLoader0);
		long long0 = 0L;
		MockThread mockThread2 = new MockThread(null, mockThread1, "", 0L);
		Thread thread0 = threadPoolTaskScheduler0.newThread(mockThread2);
		mockThread2.run();
		MockThread mockThread3 = new MockThread(null, thread0, ";[e");
		mockThread3.getContextClassLoader();
		// Undeclared exception!
		threadPoolExecutor_AbortPolicy0.rejectedExecution(mockThread3, null);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test03() throws Exception {
		int int0 = (-1490);
		ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
		MockThread.getDefaultUncaughtExceptionHandler();
		ForkJoinPool forkJoinPool0 = null;
		forkJoinPool0 = new ForkJoinPool((-1490), forkJoinPool_ForkJoinWorkerThreadFactory0,
        null, true);
	}

	@Test(timeout = 4000)
	public void test04() throws Exception {
		ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
		forkJoinPool0.getStealCount();
		forkJoinPool0.isTerminated();
		forkJoinPool0.getFactory();
		forkJoinPool0.isShutdown();
		CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory(
				"com.aliasi.io.FileExtensionFilter");
		customizableThreadFactory0.getThreadGroup();
		Thread thread0 = MockThread.currentThread();
		MockThread mockThread0 = new MockThread(thread0, "4n");
		MockThread mockThread1 = new MockThread(null, mockThread0);
		Thread thread1 = customizableThreadFactory0.newThread(mockThread1);
		MockThread mockThread2 = new MockThread(thread1);
		forkJoinPool0.submit(mockThread2, null);
		forkJoinPool0.shutdown();
		Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class,
				new ViolatedAssumptionAnswer());
		forkJoinPool0.getStealCount();
		forkJoinPool0.submit(callable0);
		ForkJoinPool.getCommonPoolParallelism();
		FRCompletionService<ComparableDelayed> fRCompletionService0 = new FRCompletionService<ComparableDelayed>(
				forkJoinPool0);
	}

	@Test(timeout = 4000, expected = IllegalStateException.class)
	public void test05() throws Exception {
		int int0 = 1293;
		ThreadPoolTaskScheduler threadPoolTaskScheduler0 = new ThreadPoolTaskScheduler();
		ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
		threadPoolTaskScheduler0.getThreadGroup();
		MockThread mockThread0 = new MockThread((ThreadGroup) null, "P|.|");
		threadPoolTaskScheduler0.newThread(mockThread0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		threadPoolTaskExecutor0.getThreadPoolExecutor();
	}

	@Test(timeout = 4000)
	public void test06() throws Exception {
		ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
		ForkJoinPool forkJoinPool0 = new ForkJoinPool(13, forkJoinPool_ForkJoinWorkerThreadFactory0,
        null, false);
		FRCompletionService<Object> fRCompletionService0 = new FRCompletionService<Object>(
				forkJoinPool0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test07() throws Exception {
		ThreadPoolExecutorFactoryBean threadPoolExecutorFactoryBean0 = new ThreadPoolExecutorFactoryBean();
		threadPoolExecutorFactoryBean0.setWaitForTasksToCompleteOnShutdown(false);
		threadPoolExecutorFactoryBean0.getObject();
		FRCompletionService<Integer> fRCompletionService0 = null;
		fRCompletionService0 = new FRCompletionService<Integer>(null);
	}

	@Test(timeout = 4000, expected = IllegalStateException.class)
	public void test08() throws Exception {
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		threadPoolTaskExecutor0.getThreadPoolExecutor();
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		ForkJoinPool forkJoinPool0 = new ForkJoinPool(1434);
		FRCompletionService<Integer> fRCompletionService0 = new FRCompletionService<Integer>(
				forkJoinPool0);
		forkJoinPool0.getAsyncMode();
		CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory();
		customizableThreadFactory0.getThreadGroup();
		MockThread mockThread0 = new MockThread((ThreadGroup) null,
				"DelegatingErrorHandlingRunnable for ");
		customizableThreadFactory0.newThread(mockThread0);
		MockThread mockThread1 = new MockThread(mockThread0, "");
		customizableThreadFactory0.setThreadPriority(1434);
		MockThread.interrupted();
		MockThread.setDefaultUncaughtExceptionHandler(null);
		mockThread1.setUncaughtExceptionHandler(null);
		MockThread.setDefaultUncaughtExceptionHandler(null);
		Integer integer0 = (-261);
		fRCompletionService0.submit(mockThread1, integer0);
		TimeUnit timeUnit0 = TimeUnit.MINUTES;
		forkJoinPool0.getPoolSize();
		fRCompletionService0.poll(0L, timeUnit0);
		forkJoinPool0.getQueuedTaskCount();
		fRCompletionService0.poll(0L, timeUnit0);
		int int0 = forkJoinPool0.getActiveThreadCount();
		//  // Unstable assertion: assertEquals(0, int0);

		fRCompletionService0.poll();
		fRCompletionService0.poll();
		Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(callable0).call();
		fRCompletionService0.submit(callable0);
		fRCompletionService0.poll();
		//  // Unstable assertion: assertEquals(0, fRCompletionService0.getSubmissions());
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test10() throws Exception {
		int int0 = 717;
		CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory("");
		ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
		Thread thread0 = MockThread.currentThread();
		MockThread mockThread0 = new MockThread(thread0, "8o@&%lI]M.V&?|{C");
		customizableThreadFactory0.newThread(mockThread0);
		TimeUnit timeUnit0 = TimeUnit.HOURS;
		ThreadPoolExecutor threadPoolExecutor0 = null;
		threadPoolExecutor0 = new ThreadPoolExecutor((-1), (-1), (-2689L), timeUnit0,
        null, customizableThreadFactory0);
	}
}
