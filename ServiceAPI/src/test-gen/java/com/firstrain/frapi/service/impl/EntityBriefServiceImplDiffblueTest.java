package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.content.similarity.DocumentSimilarityUtil;
import com.firstrain.frapi.config.ServiceConfig;
import com.firstrain.frapi.domain.BaseSpec;
import com.firstrain.frapi.domain.BlendDunsInput;
import com.firstrain.frapi.domain.Entity;
import com.firstrain.frapi.domain.MgmtTurnoverData;
import com.firstrain.frapi.domain.SectionSpec;
import com.firstrain.frapi.domain.TwitterSpec;
import com.firstrain.frapi.domain.VisualizationData;
import com.firstrain.frapi.obj.MgmtTurnoverServiceSpec;
import com.firstrain.frapi.pojo.EnterprisePref;
import com.firstrain.frapi.pojo.EntityBriefInfo;
import com.firstrain.frapi.pojo.Graph;
import com.firstrain.frapi.pojo.wrapper.BaseSet;
import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import com.firstrain.frapi.pojo.wrapper.EventSet;
import com.firstrain.frapi.pojo.wrapper.TweetSet;
import com.firstrain.frapi.repository.CompanyServiceRepository;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.impl.IndustryClassificationMap;
import com.firstrain.frapi.service.CompanyService;
import com.firstrain.frapi.service.DnbService;
import com.firstrain.frapi.service.EntityBaseService;
import com.firstrain.frapi.service.EntityProcessingService;
import com.firstrain.frapi.service.IndustryBriefService;
import com.firstrain.frapi.service.RestrictContentService;
import com.firstrain.frapi.service.VisualizationService;
import com.firstrain.frapi.util.ContentType;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.DateBucketUtils;
import com.firstrain.frapi.util.DefaultEnums.INPUT_ENTITY_TYPE;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.obj.IEntityInfo;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.DistributedSolrSearcher.DistributedSearchConfig;
import com.firstrain.solr.client.EntityEntry;
import com.firstrain.solr.client.SearchResult;
import com.firstrain.utils.FR_ArrayUtils;
import com.firstrain.utils.object.PerfActivityType;
import com.firstrain.utils.object.PerfMonitor;
import com.firstrain.utils.object.PerfRequestEntry;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.SolrServer;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class EntityBriefServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EntityBriefServiceImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void access$000InputNotNullOutputNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "entityBaseService", null);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$000",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"));
    methodUnderTest.setAccessible(true);
    final VisualizationService retval = (VisualizationService) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EventSet.class,
    EntityBaseService.class,
    EntityBriefServiceImpl.class,
    PerfMonitor.class
  })
  @Test
  public void access$1000InputNotNullNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getEventsTimeline(
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(x0, "entityBaseService", entityBaseService);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);
    final int[] x1 = null;
    final int[] x2 = null;
    final BaseSpec x3 = null;
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1000",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(null, x0, x1, x2, x3);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$100InputNotNullOutputNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "entityBaseService", null);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$100",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"));
    methodUnderTest.setAccessible(true);
    final Logger retval = (Logger) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    MgmtTurnoverData.class,
    EntityBriefServiceImpl.class,
    CompanyService.class,
    PerfMonitor.class
  })
  @Test
  public void access$1100InputNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "entityBaseService", null);
    x0.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    PowerMockito.when(companyService.getDefaultMonthlySpec()).thenReturn(null);
    PowerMockito.when(
            companyService.getMgmtTurnoverData(
                or(isA(MgmtTurnoverServiceSpec.class), isNull(MgmtTurnoverServiceSpec.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(x0, "companyService", companyService);
    final BaseSpec x1 = null;
    final MgmtTurnoverData mgmtTurnoverData = PowerMockito.mock(MgmtTurnoverData.class);
    PowerMockito.whenNew(MgmtTurnoverData.class).withNoArguments().thenReturn(mgmtTurnoverData);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1100",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final MgmtTurnoverData retval = (MgmtTurnoverData) methodUnderTest.invoke(null, x0, x1);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBriefServiceImpl.class,
    DocumentSet.class,
    IndustryBriefService.class,
    PerfMonitor.class
  })
  @Test
  public void access$1200InputNotNullNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    final IndustryBriefService industryBriefService = PowerMockito.mock(IndustryBriefService.class);
    PowerMockito.when(
            industryBriefService.getWebResults(
                or(isA(Set.class), isNull(Set.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(x0, "industryBriefService", industryBriefService);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "entityBaseService", null);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);
    final Set x1 = null;
    final String x2 = null;
    final BaseSpec x3 = null;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1200",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("java.util.Set"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval = (DocumentSet) methodUnderTest.invoke(null, x0, x1, x2, x3);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$1300InputNotNull0NotNullOutputZero() throws Exception {

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "entityBaseService", null);
    x0.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(x0, "companyService", companyService);
    final ArrayList x1 = new ArrayList();
    final String x2 = "9";

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$1300",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("java.util.Collection"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(null, x0, x1, x2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void access$200InputNotNullNullNotNullZeroNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(x0, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(null);
    Reflector.setField(x0, "entityBaseService", entityBaseService);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);
    final String[] x1 = null;
    final SectionSpec x2 = PowerMockito.mock(SectionSpec.class);
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(null).when(x2, getNeedTweetAccelerometerMethod).withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(x2, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn((short) 0))
        .when(x2, getCountMethod)
        .withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(x2, getNeedBucketMethod).withNoArguments();
    final int x3 = 0;
    final String x4 = "";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$200",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval = (TweetSet) methodUnderTest.invoke(null, x0, x1, x2, x3, x4);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityProcessingService.class,
    DocumentSet.class
  })
  @Test
  public void access$300InputNotNullNullNullNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(x0, "LOG", logger);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(null);
    Reflector.setField(x0, "entityProcessingService", entityProcessingService);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(x0, "servicesAPIUtil", servicesAPIUtil);
    x0.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.getWebResultsForSearch(
                or(isA(String.class), isNull(String.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(BlendDunsInput.class), isNull(BlendDunsInput.class))))
        .thenReturn(documentSet);
    Reflector.setField(x0, "entityBaseService", entityBaseService);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);
    final String x1 = null;
    final String x2 = null;
    final BaseSpec x3 = PowerMockito.mock(BaseSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    ((PowerMockitoStubber) PowerMockito.doReturn(false).doReturn(null))
        .when(x3, getNeedBucketMethod)
        .withNoArguments();
    final BlendDunsInput x4 = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$300",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval = (DocumentSet) methodUnderTest.invoke(null, x0, x1, x2, x3, x4);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityProcessingService.class,
    DocumentSet.class
  })
  @Test
  public void access$400InputNotNullNullNullNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(null);
    Reflector.setField(x0, "entityProcessingService", entityProcessingService);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.gethighlightsResults(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(int[].class), isNull(int[].class)),
                anyInt()))
        .thenReturn(documentSet);
    Reflector.setField(x0, "entityBaseService", entityBaseService);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);
    final String x1 = null;
    final String x2 = null;
    final BaseSpec x3 = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(x3, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    ((PowerMockitoStubber) PowerMockito.doReturn(false).doReturn(null))
        .when(x3, getNeedBucketMethod)
        .withNoArguments();
    final BlendDunsInput x4 = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$400",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval = (DocumentSet) methodUnderTest.invoke(null, x0, x1, x2, x3, x4);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    DocumentSet.class,
    EntityProcessingService.class,
    ThreadPoolTaskExecutor.class,
    Logger.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void access$500InputNotNullNullNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(null);
    Reflector.setField(x0, "entityProcessingService", entityProcessingService);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.makeDocSetFromEntries(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                anyBoolean(),
                anyInt(),
                or(isA(DocumentSimilarityUtil.class), isNull(DocumentSimilarityUtil.class)),
                or(isA(ContentType.class), isNull(ContentType.class)),
                anyBoolean(),
                anyInt(),
                anyBoolean(),
                anyBoolean()))
        .thenReturn(documentSet);
    Reflector.setField(x0, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    x0.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(x0, "companyService", null);
    final String x1 = null;
    final BaseSpec x2 = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(x2, getCountMethod).withNoArguments();
    final Method getNeedMatchedEntitiesMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedMatchedEntities");
    PowerMockito.doReturn(null).when(x2, getNeedMatchedEntitiesMethod).withNoArguments();
    final Method isNeedPhraseMethod = DTUMemberMatcher.method(BaseSpec.class, "isNeedPhrase");
    PowerMockito.doReturn(false).when(x2, isNeedPhraseMethod).withNoArguments();
    final BaseSpec x3 = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$500",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval = (DocumentSet) methodUnderTest.invoke(null, x0, x1, x2, x3);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$600InputNotNullOutputNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "entityBaseService", null);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$600",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"));
    methodUnderTest.setAccessible(true);
    final EntityBaseService retval = (EntityBaseService) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EventSet.class,
    EntityBriefServiceImpl.class,
    EntityBaseService.class,
    PerfMonitor.class
  })
  @Test
  public void access$700InputNotNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getEventSetForMTEvents(
                or(isA(List.class), isNull(List.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(x0, "entityBaseService", entityBaseService);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);
    final List x1 = null;
    final BaseSpec x2 = null;
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$700",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(null, x0, x1, x2);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Graph.class,
    EntityBriefServiceImpl.class,
    EntityBaseService.class,
    PerfMonitor.class
  })
  @Test
  public void access$800InputNotNullNullNullNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getWebVolumeGraph(
                or(isA(String.class), isNull(String.class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Graph.GraphFor.class), isNull(Graph.GraphFor.class)),
                anyInt(),
                anyInt(),
                or(isA(int[].class), isNull(int[].class)),
                anyBoolean()))
        .thenReturn(null);
    Reflector.setField(x0, "entityBaseService", entityBaseService);
    x0.taskExecutor = null;
    Reflector.setField(x0, "companyService", null);
    final String x1 = null;
    final int[] x2 = null;
    final int[] x3 = null;
    final BaseSpec x4 = null;
    final Graph.GraphFor x5 = null;
    final Graph graph = PowerMockito.mock(Graph.class);
    PowerMockito.whenNew(Graph.class).withNoArguments().thenReturn(graph);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$800",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.pojo.Graph$GraphFor"));
    methodUnderTest.setAccessible(true);
    final Graph retval = (Graph) methodUnderTest.invoke(null, x0, x1, x2, x3, x4, x5);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EventSet.class,
    CompanyService.class,
    EntityBriefServiceImpl.class,
    PerfMonitor.class
  })
  @Test
  public void access$900InputNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl x0 = new EntityBriefServiceImpl();
    Reflector.setField(x0, "visualizationService", null);
    Reflector.setField(x0, "excludeFilters", null);
    Reflector.setField(x0, "LOG", null);
    Reflector.setField(x0, "convertUtil", null);
    x0.contentFilterToken = null;
    Reflector.setField(x0, "companyServiceRepository", null);
    Reflector.setField(x0, "dateBucketUtils", null);
    Reflector.setField(x0, "entityBaseServiceRepository", null);
    Reflector.setField(x0, "dnbService", null);
    Reflector.setField(x0, "industryClassificationMap", null);
    Reflector.setField(x0, "industryBriefService", null);
    Reflector.setField(x0, "restrictContentService", null);
    Reflector.setField(x0, "entityProcessingService", null);
    Reflector.setField(x0, "servicesAPIUtil", null);
    x0.executorTimeout = 0L;
    Reflector.setField(x0, "entityBaseService", null);
    x0.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    PowerMockito.when(
            companyService.getCompanyEvents(
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Map.class), isNull(Map.class))))
        .thenReturn(null);
    Reflector.setField(x0, "companyService", companyService);
    final BaseSpec x1 = null;
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$900",
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(null, x0, x1);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({VisualizationData.class, VisualizationService.class, PerfMonitor.class})
  @Test
  public void callOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1");
    Reflector.setField(objectUnderTest, "val$chartTypes", null);
    Reflector.setField(objectUnderTest, "val$filters", null);
    Reflector.setField(objectUnderTest, "val$searchToken", "");
    Reflector.setField(objectUnderTest, "val$isApplyMinNodeCheck", false);
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    final VisualizationService visualizationService = PowerMockito.mock(VisualizationService.class);
    final VisualizationData visualizationData = PowerMockito.mock(VisualizationData.class);
    PowerMockito.when(
            visualizationService.getVisualizationByEntityToken(
                or(isA(String.class), isNull(String.class)), anyInt(),
                or(isA(List.class), isNull(List.class)),
                    or(isA(String.class), isNull(String.class)),
                anyBoolean(), anyBoolean()))
        .thenReturn(visualizationData);
    Reflector.setField(entityBriefServiceImpl, "visualizationService", visualizationService);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", null);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$nodeCount", 0);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final VisualizationData retval = (VisualizationData) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    PerfMonitor.class,
    EntityBriefServiceImpl.class,
    EntityBaseService.class,
    Graph.class
  })
  @Test
  public void callOutputNotNull10() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$8");
    Reflector.setField(objectUnderTest, "val$tCatIds", null);
    Reflector.setField(objectUnderTest, "val$companyIdsArr", null);
    Reflector.setField(objectUnderTest, "val$graphFor", null);
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getWebVolumeGraph(
                or(isA(String.class), isNull(String.class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Graph.GraphFor.class), isNull(Graph.GraphFor.class)),
                anyInt(),
                anyInt(),
                or(isA(int[].class), isNull(int[].class)),
                anyBoolean()))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$catId", null);
    Reflector.setField(objectUnderTest, "val$baseSpec", null);
    final Graph graph = PowerMockito.mock(Graph.class);
    PowerMockito.whenNew(Graph.class).withNoArguments().thenReturn(graph);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$8");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final Graph retval = (Graph) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    CompanyService.class,
    EntityBriefServiceImpl.class,
    PerfMonitor.class,
    EventSet.class
  })
  @Test
  public void callOutputNotNull11() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$9");
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", null);
    entityBriefServiceImpl.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    PowerMockito.when(
            companyService.getCompanyEvents(
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Map.class), isNull(Map.class))))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "companyService", companyService);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$baseSpec", null);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$9");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1"},
      value = {
        Logger.class,
        VisualizationData.class,
        VisualizationService.class,
        PerfMonitor.class
      })
  @Test
  public void callOutputNotNull12() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1");
    Reflector.setField(objectUnderTest, "val$chartTypes", null);
    Reflector.setField(objectUnderTest, "val$filters", null);
    Reflector.setField(objectUnderTest, "val$searchToken", "");
    Reflector.setField(objectUnderTest, "val$isApplyMinNodeCheck", false);
    final EntityBriefServiceImpl entityBriefServiceImpl =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final VisualizationService visualizationService = PowerMockito.mock(VisualizationService.class);
    PowerMockito.when(
            visualizationService.getVisualizationByEntityToken(
                or(isA(String.class), isNull(String.class)), anyInt(),
                or(isA(List.class), isNull(List.class)),
                    or(isA(String.class), isNull(String.class)),
                anyBoolean(), anyBoolean()))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "visualizationService", visualizationService);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", "");
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(entityBriefServiceImpl, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", convertUtil);
    entityBriefServiceImpl.contentFilterToken = "";
    final CompanyServiceRepository companyServiceRepository =
        (CompanyServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.CompanyServiceRepository");
    Reflector.setField(
        entityBriefServiceImpl, "companyServiceRepository", companyServiceRepository);
    final DateBucketUtils dateBucketUtils =
        (DateBucketUtils) Reflector.getInstance("com.firstrain.frapi.util.DateBucketUtils");
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", dateBucketUtils);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(
        entityBriefServiceImpl, "entityBaseServiceRepository", entityBaseServiceRepository);
    final DnbService dnbService =
        (DnbService) Reflector.getInstance("com.firstrain.frapi.service.DnbService");
    Reflector.setField(entityBriefServiceImpl, "dnbService", dnbService);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", solrServer);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", "");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(serviceConfig, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "companyModelServer", solrServer1);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", "");
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(serviceConfig, "props", hashMap);
    Reflector.setField(serviceConfig, "secSolrServerUrl", "");
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", "");
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", "");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "secSolrServer", solrServer2);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", "");
    Reflector.setField(serviceConfig, "docSolrServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "personDocServer", solrServer3);
    Reflector.setField(serviceConfig, "companyModelServerURL", "");
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "quoteSolrServer", solrServer4);
    Reflector.setField(serviceConfig, "distributedSearchFile", "");
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    final SolrServer[] solrServerArray = {};
    Reflector.setField(distributedSearchConfig, "docServers", solrServerArray);
    Reflector.setField(serviceConfig, "distributedSearchConfig", distributedSearchConfig);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "eventSolrServer", solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "docImageSolrServer", solrServer6);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "peopleSolrServer", solrServer7);
    Reflector.setField(serviceConfig, "personDocServerURL", "");
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "twitterSolrServer", solrServer8);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", "");
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "entitySolrServer", solrServer9);
    final SolrServer solrServer10 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "userSearchesSolrServer", solrServer10);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", "");
    final SolrServer solrServer11 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", solrServer11);
    Reflector.setField(serviceConfig, "distributedDSPingQ", "");
    final SolrServer solrServer12 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "faviconSolrServer", solrServer12);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", "");
    final HashMap<SolrServer, String> hashMap1 = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap1);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", "");
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", "");
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap2);
    final Logger logger2 = PowerMockito.mock(Logger.class);
    Reflector.setField(industryClassificationMap, "LOG", logger2);
    Reflector.setField(
        entityBriefServiceImpl, "industryClassificationMap", industryClassificationMap);
    final IndustryBriefService industryBriefService =
        (IndustryBriefService)
            Reflector.getInstance("com.firstrain.frapi.service.IndustryBriefService");
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", industryBriefService);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", restrictContentService);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", entityProcessingService);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository1 =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(
        servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository1);
    final Logger logger3 = PowerMockito.mock(Logger.class);
    Reflector.setField(servicesAPIUtil, "LOG", logger3);
    final ConvertUtil convertUtil1 =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil1, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil1, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil1, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger4 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil1, "LOG", logger4);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil1);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", servicesAPIUtil);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService =
        (EntityBaseService) Reflector.getInstance("com.firstrain.frapi.service.EntityBaseService");
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    entityBriefServiceImpl.taskExecutor = threadPoolTaskExecutor;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(entityBriefServiceImpl, "companyService", companyService);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$nodeCount", 0);
    final VisualizationData visualizationData = PowerMockito.mock(VisualizationData.class);
    PowerMockito.whenNew(VisualizationData.class).withNoArguments().thenReturn(visualizationData);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final VisualizationData retval = (VisualizationData) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    EntityBriefServiceImpl.class,
    PerfMonitor.class,
    EventSet.class
  })
  @Test
  public void callOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$10");
    Reflector.setField(objectUnderTest, "val$baseSpec", null);
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getEventsTimeline(
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$tCatIds", null);
    Reflector.setField(objectUnderTest, "val$companyIdsArr", null);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$10");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBriefServiceImpl.class,
    CompanyService.class,
    PerfMonitor.class,
    MgmtTurnoverData.class
  })
  @Test
  public void callOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$11");
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", null);
    entityBriefServiceImpl.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    PowerMockito.when(companyService.getDefaultMonthlySpec()).thenReturn(null);
    PowerMockito.when(
            companyService.getMgmtTurnoverData(
                or(isA(MgmtTurnoverServiceSpec.class), isNull(MgmtTurnoverServiceSpec.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "companyService", companyService);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$baseSpec", null);
    final MgmtTurnoverData mgmtTurnoverData = PowerMockito.mock(MgmtTurnoverData.class);
    PowerMockito.whenNew(MgmtTurnoverData.class).withNoArguments().thenReturn(mgmtTurnoverData);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$11");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final MgmtTurnoverData retval = (MgmtTurnoverData) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBriefServiceImpl.class,
    PerfMonitor.class,
    IndustryBriefService.class,
    DocumentSet.class
  })
  @Test
  public void callOutputNotNull4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$12");
    Reflector.setField(objectUnderTest, "val$baseSpec", null);
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    final IndustryBriefService industryBriefService = PowerMockito.mock(IndustryBriefService.class);
    PowerMockito.when(
            industryBriefService.getWebResults(
                or(isA(Set.class), isNull(Set.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", industryBriefService);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", null);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$fq", null);
    Reflector.setField(objectUnderTest, "val$catIdsSet", null);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$12");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final DocumentSet retval = (DocumentSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    TwitterSpec.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityBriefServiceImpl.class
  })
  @Test
  public void callOutputNotNull5() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$2");
    final String[] stringArray = {null};
    Reflector.setField(objectUnderTest, "val$catIdsAll", stringArray);
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(null)
        .when(sectionSpec, getNeedTweetAccelerometerMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "val$sectionSpec", sectionSpec);
    Reflector.setField(objectUnderTest, "val$scope", 0);
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$excludeArticleIdsSSV", "");
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$2");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final TweetSet retval = (TweetSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    DocumentSet.class,
    EntityProcessingService.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void callOutputNotNull6() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$3");
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(baseSpec, getNeedBucketMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "val$baseSpec", baseSpec);
    Reflector.setField(objectUnderTest, "val$bdi", null);
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(documentSet);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", entityProcessingService);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet1 = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.getWebResultsForSearch(
                or(isA(String.class), isNull(String.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(BlendDunsInput.class), isNull(BlendDunsInput.class))))
        .thenReturn(documentSet1);
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$q", null);
    Reflector.setField(objectUnderTest, "val$fq", null);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$3");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final DocumentSet retval = (DocumentSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    DocumentSet.class,
    EntityProcessingService.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void callOutputNotNull7() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$4");
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(baseSpec, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    ((PowerMockitoStubber) PowerMockito.doReturn(false).doReturn(null))
        .when(baseSpec, getNeedBucketMethod)
        .withNoArguments();
    Reflector.setField(objectUnderTest, "val$baseSpec", baseSpec);
    Reflector.setField(objectUnderTest, "val$bdi", null);
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", entityProcessingService);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.gethighlightsResults(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(int[].class), isNull(int[].class)),
                anyInt()))
        .thenReturn(documentSet);
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$q", null);
    Reflector.setField(objectUnderTest, "val$fq", null);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$4");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final DocumentSet retval = (DocumentSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    EntityBriefServiceImpl.class,
    DocumentSet.class,
    ThreadPoolTaskExecutor.class,
    Logger.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void callOutputNotNull8() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$5");
    Reflector.setField(objectUnderTest, "val$baseSpec180Days", null);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(baseSpec, getCountMethod).withNoArguments();
    final Method getNeedMatchedEntitiesMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedMatchedEntities");
    PowerMockito.doReturn(null).when(baseSpec, getNeedMatchedEntitiesMethod).withNoArguments();
    final Method isNeedPhraseMethod = DTUMemberMatcher.method(BaseSpec.class, "isNeedPhrase");
    PowerMockito.doReturn(false).when(baseSpec, isNeedPhraseMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "val$baseSpec60Days", baseSpec);
    final EntityBriefServiceImpl entityBriefServiceImpl =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.makeDocSetFromEntries(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                anyBoolean(),
                anyInt(),
                or(isA(DocumentSimilarityUtil.class), isNull(DocumentSimilarityUtil.class)),
                or(isA(ContentType.class), isNull(ContentType.class)),
                anyBoolean(),
                anyInt(),
                anyBoolean(),
                anyBoolean()))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    entityBriefServiceImpl.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$q", null);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$5");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final DocumentSet retval = (DocumentSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBriefServiceImpl.class,
    EntityBaseService.class,
    PerfMonitor.class,
    EventSet.class
  })
  @Test
  public void callOutputNotNull9() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$7");
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getEventSetForMTEvents(
                or(isA(List.class), isNull(List.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$companyIds", null);
    Reflector.setField(objectUnderTest, "val$baseSpec", null);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$7");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EntityBaseService.class)
  @Test
  public void callOutputNull() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$6");
    Reflector.setField(objectUnderTest, "val$baseSpec", null);
    Reflector.setField(objectUnderTest, "val$q", null);
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getSearchResultForAnalystComments(
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$6");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final SearchResult retval = (SearchResult) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1"},
      value = {VisualizationData.class, PerfMonitor.class})
  @Test
  public void callOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest = arrangeDataForCall();
    arrangeAndDoCall(objectUnderTest);

    // Method is not expected to return due to exception thrown
  }

  private Object arrangeDataForCall() throws Exception {
      final Object objectUnderTest =
          Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1");
      Reflector.setField(objectUnderTest, "val$chartTypes", null);
      Reflector.setField(objectUnderTest, "val$filters", null);
      Reflector.setField(objectUnderTest, "val$searchToken", "");
      Reflector.setField(objectUnderTest, "val$isApplyMinNodeCheck", false);
      Reflector.setField(objectUnderTest, "this$0", null);
      Reflector.setField(objectUnderTest, "val$nodeCount", 0);
      final VisualizationData visualizationData = PowerMockito.mock(VisualizationData.class);
      PowerMockito.whenNew(VisualizationData.class).withNoArguments().thenReturn(visualizationData);
      PowerMockito.doReturn(null).when(PerfMonitor.class);
      PerfMonitor.endRequest();
      final Method recordStatsMethod =
          DTUMemberMatcher.method(
              PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
      PowerMockito.doReturn(0L)
          .when(PerfMonitor.class, recordStatsMethod)
          .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
      return objectUnderTest;
  }

  private void arrangeAndDoCall(final Object objectUnderTest) throws Throwable {
      PowerMockito.doReturn(0L).when(PerfMonitor.class);
      PerfMonitor.currentTime();
      final Method startRequestMethod =
          DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
      PowerMockito.doReturn(0L)
          .when(PerfMonitor.class, startRequestMethod)
          .withArguments(
              or(isA(String.class), isNull(String.class)),
              or(isA(String.class), isNull(String.class)));
      
      // Act
      thrown.expect(NullPointerException.class);
      try {
        final Class<?> classUnderTest =
            Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1");
        final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
        methodUnderTest.setAccessible(true);
        methodUnderTest.invoke(objectUnderTest);
      } catch (InvocationTargetException ex) {
        throw ex.getCause();
      }
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1"},
      value = {VisualizationData.class, VisualizationService.class, PerfMonitor.class})
  @Test
  public void callOutputNullPointerException2() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1");
    Reflector.setField(objectUnderTest, "val$chartTypes", null);
    Reflector.setField(objectUnderTest, "val$filters", null);
    Reflector.setField(objectUnderTest, "val$searchToken", "");
    Reflector.setField(objectUnderTest, "val$isApplyMinNodeCheck", false);
    final EntityBriefServiceImpl entityBriefServiceImpl =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final VisualizationService visualizationService = PowerMockito.mock(VisualizationService.class);
    PowerMockito.when(
            visualizationService.getVisualizationByEntityToken(
                or(isA(String.class), isNull(String.class)), anyInt(),
                or(isA(List.class), isNull(List.class)),
                    or(isA(String.class), isNull(String.class)),
                anyBoolean(), anyBoolean()))
        .thenReturn(null);
    Reflector.setField(entityBriefServiceImpl, "visualizationService", visualizationService);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", "");
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", convertUtil);
    entityBriefServiceImpl.contentFilterToken = "";
    final CompanyServiceRepository companyServiceRepository =
        (CompanyServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.CompanyServiceRepository");
    Reflector.setField(
        entityBriefServiceImpl, "companyServiceRepository", companyServiceRepository);
    final DateBucketUtils dateBucketUtils =
        (DateBucketUtils) Reflector.getInstance("com.firstrain.frapi.util.DateBucketUtils");
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", dateBucketUtils);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(
        entityBriefServiceImpl, "entityBaseServiceRepository", entityBaseServiceRepository);
    final DnbService dnbService =
        (DnbService) Reflector.getInstance("com.firstrain.frapi.service.DnbService");
    Reflector.setField(entityBriefServiceImpl, "dnbService", dnbService);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", solrServer);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", "");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(serviceConfig, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "companyModelServer", solrServer1);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", "");
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(serviceConfig, "props", hashMap);
    Reflector.setField(serviceConfig, "secSolrServerUrl", "");
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", "");
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", "");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "secSolrServer", solrServer2);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", "");
    Reflector.setField(serviceConfig, "docSolrServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "personDocServer", solrServer3);
    Reflector.setField(serviceConfig, "companyModelServerURL", "");
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "quoteSolrServer", solrServer4);
    Reflector.setField(serviceConfig, "distributedSearchFile", "");
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    final SolrServer[] solrServerArray = {};
    Reflector.setField(distributedSearchConfig, "docServers", solrServerArray);
    Reflector.setField(serviceConfig, "distributedSearchConfig", distributedSearchConfig);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "eventSolrServer", solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "docImageSolrServer", solrServer6);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "peopleSolrServer", solrServer7);
    Reflector.setField(serviceConfig, "personDocServerURL", "");
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "twitterSolrServer", solrServer8);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", "");
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "entitySolrServer", solrServer9);
    final SolrServer solrServer10 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "userSearchesSolrServer", solrServer10);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", "");
    final SolrServer solrServer11 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", solrServer11);
    Reflector.setField(serviceConfig, "distributedDSPingQ", "");
    final SolrServer solrServer12 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "faviconSolrServer", solrServer12);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", "");
    final HashMap<SolrServer, String> hashMap1 = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap1);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", "");
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", "");
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap2);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(industryClassificationMap, "LOG", logger1);
    Reflector.setField(
        entityBriefServiceImpl, "industryClassificationMap", industryClassificationMap);
    final IndustryBriefService industryBriefService =
        (IndustryBriefService)
            Reflector.getInstance("com.firstrain.frapi.service.IndustryBriefService");
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", industryBriefService);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", restrictContentService);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", entityProcessingService);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository1 =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(
        servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository1);
    final Logger logger2 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(servicesAPIUtil, "LOG", logger2);
    final ConvertUtil convertUtil1 =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil1, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil1, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil1, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger3 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil1, "LOG", logger3);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil1);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", servicesAPIUtil);
    entityBriefServiceImpl.executorTimeout = 0L;
    final EntityBaseService entityBaseService =
        (EntityBaseService) Reflector.getInstance("com.firstrain.frapi.service.EntityBaseService");
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    entityBriefServiceImpl.taskExecutor = threadPoolTaskExecutor;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(entityBriefServiceImpl, "companyService", companyService);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    Reflector.setField(objectUnderTest, "val$nodeCount", 0);
    final VisualizationData visualizationData = PowerMockito.mock(VisualizationData.class);
    PowerMockito.whenNew(VisualizationData.class).withNoArguments().thenReturn(visualizationData);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$1");
      final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputPositive() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$13");
    Reflector.setField(objectUnderTest, "this$0", null);
    Reflector.setField(objectUnderTest, "val$blVsCompetitorsMap", null);
    final SimpleEntry left =
        (SimpleEntry) Reflector.getInstance("java.util.AbstractMap$SimpleEntry");
    Reflector.setField(left, "value", -2);
    Reflector.setField(left, "key", null);
    final SimpleEntry right =
        (SimpleEntry) Reflector.getInstance("java.util.AbstractMap$SimpleEntry");
    Reflector.setField(right, "value", -1);
    Reflector.setField(right, "key", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$13");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("java.util.Map$Entry"),
            Reflector.forName("java.util.Map$Entry"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, left, right);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$13");
    final EntityBriefServiceImpl entityBriefServiceImpl = new EntityBriefServiceImpl();
    Reflector.setField(entityBriefServiceImpl, "visualizationService", null);
    Reflector.setField(entityBriefServiceImpl, "excludeFilters", null);
    Reflector.setField(entityBriefServiceImpl, "LOG", null);
    Reflector.setField(entityBriefServiceImpl, "convertUtil", null);
    entityBriefServiceImpl.contentFilterToken = null;
    Reflector.setField(entityBriefServiceImpl, "companyServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dateBucketUtils", null);
    Reflector.setField(entityBriefServiceImpl, "entityBaseServiceRepository", null);
    Reflector.setField(entityBriefServiceImpl, "dnbService", null);
    Reflector.setField(entityBriefServiceImpl, "industryClassificationMap", null);
    Reflector.setField(entityBriefServiceImpl, "industryBriefService", null);
    Reflector.setField(entityBriefServiceImpl, "restrictContentService", null);
    Reflector.setField(entityBriefServiceImpl, "entityProcessingService", null);
    Reflector.setField(entityBriefServiceImpl, "servicesAPIUtil", null);
    entityBriefServiceImpl.executorTimeout = 0L;
    Reflector.setField(entityBriefServiceImpl, "entityBaseService", null);
    entityBriefServiceImpl.taskExecutor = null;
    Reflector.setField(entityBriefServiceImpl, "companyService", null);
    Reflector.setField(objectUnderTest, "this$0", entityBriefServiceImpl);
    final HashMap hashMap = new HashMap();
    Reflector.setField(objectUnderTest, "val$blVsCompetitorsMap", hashMap);
    final SimpleEntry left =
        (SimpleEntry) Reflector.getInstance("java.util.AbstractMap$SimpleEntry");
    Reflector.setField(left, "value", -2);
    Reflector.setField(left, "key", null);
    final SimpleEntry right =
        (SimpleEntry) Reflector.getInstance("java.util.AbstractMap$SimpleEntry");
    Reflector.setField(right, "value", -2);
    Reflector.setField(right, "key", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl$13");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("java.util.Map$Entry"),
            Reflector.forName("java.util.Map$Entry"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, left, right);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getAnalystCommentsAsyncInputNullNullNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final BaseSpec baseSpec60Days = null;
    final BaseSpec baseSpec180Days = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getAnalystCommentsAsync",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(objectUnderTest, q, baseSpec60Days, baseSpec180Days);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec180Days"));
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec60Days"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$q"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    ThreadPoolTaskExecutor.class,
    Logger.class,
    PerfMonitor.class,
    BaseSpec.class,
    DocumentSet.class,
    EntityBriefServiceImpl.class
  })
  @Test
  public void getAnalystCommentsInputNotNullNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    final DateBucketUtils dateBucketUtils =
        (DateBucketUtils) Reflector.getInstance("com.firstrain.frapi.util.DateBucketUtils");
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final DnbService dnbService =
        (DnbService) Reflector.getInstance("com.firstrain.frapi.service.DnbService");
    Reflector.setField(objectUnderTest, "dnbService", dnbService);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "companyModelServer", solrServer);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(serviceConfig, "props", hashMap);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "docSolrServer", solrServer1);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", distributedSearchConfig);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap1 = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap1);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", "");
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap2);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    final IndustryBriefService industryBriefService =
        (IndustryBriefService)
            Reflector.getInstance("com.firstrain.frapi.service.IndustryBriefService");
    Reflector.setField(objectUnderTest, "industryBriefService", industryBriefService);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final String q = "";
    final BaseSpec baseSpec60Days = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(baseSpec60Days, getCountMethod).withNoArguments();
    final Method getNeedMatchedEntitiesMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedMatchedEntities");
    PowerMockito.doReturn(null)
        .when(baseSpec60Days, getNeedMatchedEntitiesMethod)
        .withNoArguments();
    final Method isNeedPhraseMethod = DTUMemberMatcher.method(BaseSpec.class, "isNeedPhrase");
    PowerMockito.doReturn(false).when(baseSpec60Days, isNeedPhraseMethod).withNoArguments();
    final BaseSpec baseSpec180Days = null;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Logger logger1 = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger1)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getAnalystComments",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, q, baseSpec60Days, baseSpec180Days);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({DocumentSet.class, EntityBriefServiceImpl.class, PerfMonitor.class})
  @Test
  public void getAnalystCommentsInputNotNullNullNullOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    final DateBucketUtils dateBucketUtils =
        (DateBucketUtils) Reflector.getInstance("com.firstrain.frapi.util.DateBucketUtils");
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final DnbService dnbService =
        (DnbService) Reflector.getInstance("com.firstrain.frapi.service.DnbService");
    Reflector.setField(objectUnderTest, "dnbService", dnbService);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "companyModelServer", solrServer);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "docSolrServer", solrServer1);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", distributedSearchConfig);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", "");
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    final IndustryBriefService industryBriefService =
        (IndustryBriefService)
            Reflector.getInstance("com.firstrain.frapi.service.IndustryBriefService");
    Reflector.setField(objectUnderTest, "industryBriefService", industryBriefService);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final String q = "";
    final BaseSpec baseSpec60Days = null;
    final BaseSpec baseSpec180Days = null;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getAnalystComments",
              Reflector.forName("java.lang.String"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, q, baseSpec60Days, baseSpec180Days);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class, ThreadPoolTaskExecutor.class, Logger.class,
    PerfMonitor.class, BaseSpec.class, DocumentSet.class,
    EntityBriefServiceImpl.class
  })
  @Test
  public void getAnalystCommentsInputNullNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.makeDocSetFromEntries(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                anyBoolean(),
                anyInt(),
                or(isA(DocumentSimilarityUtil.class), isNull(DocumentSimilarityUtil.class)),
                or(isA(ContentType.class), isNull(ContentType.class)),
                anyBoolean(),
                anyInt(),
                anyBoolean(),
                anyBoolean()))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final BaseSpec baseSpec60Days = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(baseSpec60Days, getCountMethod).withNoArguments();
    final Method getNeedMatchedEntitiesMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedMatchedEntities");
    PowerMockito.doReturn(null)
        .when(baseSpec60Days, getNeedMatchedEntitiesMethod)
        .withNoArguments();
    final Method isNeedPhraseMethod = DTUMemberMatcher.method(BaseSpec.class, "isNeedPhrase");
    PowerMockito.doReturn(false).when(baseSpec60Days, isNeedPhraseMethod).withNoArguments();
    final BaseSpec baseSpec180Days = null;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getAnalystComments",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, q, baseSpec60Days, baseSpec180Days);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    DocumentSet.class,
    EntityProcessingService.class,
    ThreadPoolTaskExecutor.class,
    Logger.class,
    PerfMonitor.class,
    BaseSpec.class
  })
  @Test
  public void getAnalystCommentsInputNullNotNullNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(documentSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet1 = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.makeDocSetFromEntries(
                or(isA(SearchResult.class), isNull(SearchResult.class)),
                anyBoolean(),
                anyInt(),
                or(isA(DocumentSimilarityUtil.class), isNull(DocumentSimilarityUtil.class)),
                or(isA(ContentType.class), isNull(ContentType.class)),
                anyBoolean(),
                anyInt(),
                anyBoolean(),
                anyBoolean()))
        .thenReturn(documentSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final BaseSpec baseSpec60Days = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(baseSpec60Days, getCountMethod).withNoArguments();
    final Method getNeedMatchedEntitiesMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getNeedMatchedEntities");
    PowerMockito.doReturn(null)
        .when(baseSpec60Days, getNeedMatchedEntitiesMethod)
        .withNoArguments();
    final Method isNeedPhraseMethod = DTUMemberMatcher.method(BaseSpec.class, "isNeedPhrase");
    PowerMockito.doReturn(false).when(baseSpec60Days, isNeedPhraseMethod).withNoArguments();
    final BaseSpec baseSpec180Days = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getAnalystComments",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, q, baseSpec60Days, baseSpec180Days);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getAnalystCommentsSearchResultAsyncInputNullNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final BaseSpec baseSpec = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getAnalystCommentsSearchResultAsync",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final Callable<SearchResult> retval =
        (Callable<SearchResult>) methodUnderTest.invoke(objectUnderTest, q, baseSpec);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
    assertNull(Reflector.getInstanceField(retval, "val$q"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDaysCountInputNullOutputPositive() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final IEntityInfo entityInfo = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getDaysCount", Reflector.forName("com.firstrain.obj.IEntityInfo"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, entityInfo);

    // Assert
    assertEquals(180, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBriefInfo.class,
    PerfMonitor.class,
    EntityBaseServiceRepository.class,
    EntityBriefServiceImpl.class,
    IEntityInfoCache.class
  })
  @Test
  public void getEntityBriefDetailsForMTInputNullNotNullNotNullNullNullNotNullOutputNotNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = "";
    final CompanyServiceRepository companyServiceRepository =
        (CompanyServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.CompanyServiceRepository");
    Reflector.setField(objectUnderTest, "companyServiceRepository", companyServiceRepository);
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(null)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final DnbService dnbService =
        (DnbService) Reflector.getInstance("com.firstrain.frapi.service.DnbService");
    Reflector.setField(objectUnderTest, "dnbService", dnbService);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    final IndustryBriefService industryBriefService =
        (IndustryBriefService)
            Reflector.getInstance("com.firstrain.frapi.service.IndustryBriefService");
    Reflector.setField(objectUnderTest, "industryBriefService", industryBriefService);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository1 =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    Reflector.setField(
        servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository1);
    final Logger logger2 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(servicesAPIUtil, "LOG", logger2);
    final ConvertUtil convertUtil1 = new ConvertUtil();
    Reflector.setField(convertUtil1, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil1, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil1, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger3 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil1, "LOG", logger3);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil1);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 9L;
    final EntityBaseService entityBaseService =
        (EntityBaseService) Reflector.getInstance("com.firstrain.frapi.service.EntityBaseService");
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final EnterprisePref enterprisePref = null;
    final String searchToken = "";
    final String fq = "-...-";
    final String from = null;
    final String to = null;
    final String count = "7";
    final EntityBriefInfo entityBriefInfo = PowerMockito.mock(EntityBriefInfo.class);
    PowerMockito.whenNew(EntityBriefInfo.class).withNoArguments().thenReturn(entityBriefInfo);
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final EntityBriefInfo retval =
        objectUnderTest.getEntityBriefDetailsForMT(
            enterprisePref, searchToken, fq, from, to, count);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    IEntityInfoCache.class,
    Entity.class,
    IEntityInfo.class,
    EntityBriefServiceImpl.class
  })
  @Test
  public void getEntityByEntityInfoCacheInputPositiveNotNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final Integer catId = 49_152;
    final IEntityInfoCache entityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSearchToken");
    PowerMockito.doReturn(null).when(iEntityInfo, getSearchTokenMethod).withNoArguments();
    final Method getNameMethod = DTUMemberMatcher.method(IEntityInfo.class, "getName");
    PowerMockito.doReturn(null).when(iEntityInfo, getNameMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(entityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Entity entity = PowerMockito.mock(Entity.class);
    PowerMockito.whenNew(Entity.class).withNoArguments().thenReturn(entity);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntityByEntityInfoCache",
            Reflector.forName("java.lang.Integer"),
            Reflector.forName("com.firstrain.obj.IEntityInfoCache"));
    methodUnderTest.setAccessible(true);
    final Entity retval = (Entity) methodUnderTest.invoke(objectUnderTest, catId, entityInfoCache);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, IEntityInfoCache.class})
  @Test
  public void getEntityByEntityInfoCacheInputPositiveNotNullOutputNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final Integer catId = 49_152;
    final IEntityInfoCache entityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(null)
        .when(entityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntityByEntityInfoCache",
            Reflector.forName("java.lang.Integer"),
            Reflector.forName("com.firstrain.obj.IEntityInfoCache"));
    methodUnderTest.setAccessible(true);
    final Entity retval = (Entity) methodUnderTest.invoke(objectUnderTest, catId, entityInfoCache);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEntityByEntityInfoCacheInputZeroNullOutputNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final Integer catId = 0;
    final IEntityInfoCache entityInfoCache = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntityByEntityInfoCache",
            Reflector.forName("java.lang.Integer"),
            Reflector.forName("com.firstrain.obj.IEntityInfoCache"));
    methodUnderTest.setAccessible(true);
    final Entity retval = (Entity) methodUnderTest.invoke(objectUnderTest, catId, entityInfoCache);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEventSetForTopicsAndCompaniesAsyncInputNullNullNullOutputNotNull()
      throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEventSetForTopicsAndCompaniesAsync",
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$tCatIds"));
    assertNull(Reflector.getInstanceField(retval, "val$companyIdsArr"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityProcessingService.class,
    EventSet.class
  })
  @Test
  public void getEventSetForTopicsAndCompaniesInputNullNullNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getEventSetWithId(
                or(isA(EventSet.class), isNull(EventSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            entityBaseService.getEventsTimeline(
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(baseSpec, getNeedBucketMethod).withNoArguments();
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEventSetForTopicsAndCompanies",
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval =
        (EventSet) methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityProcessingService.class,
    EventSet.class
  })
  @Test
  public void getEventSetForTopicsAndCompaniesInputNullNullNotNullOutputNotNull2()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getEventSetWithId(
                or(isA(EventSet.class), isNull(EventSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            entityBaseService.getEventsTimeline(
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    ((PowerMockitoStubber) PowerMockito.doReturn(false).doReturn(null))
        .when(baseSpec, getNeedBucketMethod)
        .withNoArguments();
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEventSetForTopicsAndCompanies",
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval =
        (EventSet) methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    BaseSpec.class,
    PerfMonitor.class,
    Logger.class,
    EventSet.class
  })
  @Test
  public void getEventSetForTopicsAndCompaniesInputNullNullNotNullOutputNotNull3()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", "");
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap1);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            entityBaseService.getEventsTimeline(
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCacheKeyMethod = DTUMemberMatcher.method(BaseSpec.class, "getCacheKey");
    PowerMockito.doReturn("").when(baseSpec, getCacheKeyMethod).withNoArguments();
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEventSetForTopicsAndCompanies",
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval =
        (EventSet) methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    PerfMonitor.class,
    Logger.class,
    EntityBriefServiceImpl.class,
    EventSet.class
  })
  @Test
  public void getEventSetForTopicsAndCompaniesInputNullNullNotNullOutputNotNull4()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", "");
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap1);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCacheKeyMethod = DTUMemberMatcher.method(BaseSpec.class, "getCacheKey");
    PowerMockito.doReturn("").when(baseSpec, getCacheKeyMethod).withNoArguments();
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEventSetForTopicsAndCompanies",
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval =
        (EventSet) methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EventSet.class, EntityBriefServiceImpl.class, BaseSpec.class, PerfMonitor.class})
  @Test
  public void getEventSetForTopicsAndCompaniesInputNullNullNotNullOutputNullPointerException()
      throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", "");
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap1);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCacheKeyMethod = DTUMemberMatcher.method(BaseSpec.class, "getCacheKey");
    PowerMockito.doReturn(null).when(baseSpec, getCacheKeyMethod).withNoArguments();
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getEventSetForTopicsAndCompanies",
              Reflector.forName("int[]"),
              Reflector.forName("int[]"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EventSet.class, EntityBriefServiceImpl.class, BaseSpec.class, PerfMonitor.class})
  @Test
  public void getEventSetForTopicsAndCompaniesInputNullNullNotNullOutputNullPointerException2()
      throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", "");
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap1);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCacheKeyMethod = DTUMemberMatcher.method(BaseSpec.class, "getCacheKey");
    PowerMockito.doReturn("").when(baseSpec, getCacheKeyMethod).withNoArguments();
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getEventSetForTopicsAndCompanies",
              Reflector.forName("int[]"),
              Reflector.forName("int[]"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EventSet.class,
    EntityBaseService.class,
    EntityBriefServiceImpl.class,
    PerfMonitor.class
  })
  @Test
  public void getEventSetForTopicsAndCompaniesInputNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getEventsTimeline(
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = null;
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEventSetForTopicsAndCompanies",
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval =
        (EventSet) methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    EventSet.class,
    EntityProcessingService.class,
    PerfMonitor.class
  })
  @Test
  public void getEventSetForTopicsAndCompaniesInputNullNullNullOutputNullPointerException()
      throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", "");
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap1);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getEventSetWithId(
                or(isA(EventSet.class), isNull(EventSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            entityBaseService.getEventsTimeline(
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getEventSetForTopicsAndCompanies",
              Reflector.forName("int[]"),
              Reflector.forName("int[]"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EventSet.class, EntityBriefServiceImpl.class, PerfMonitor.class})
  @Test
  public void getEventSetForTopicsAndCompaniesInputNullNullNullOutputNullPointerException2()
      throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", "");
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap1);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = null;
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getEventSetForTopicsAndCompanies",
              Reflector.forName("int[]"),
              Reflector.forName("int[]"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, companyIdsArr, tCatIds, baseSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEventsAsyncInputNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final BaseSpec baseSpec = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEventsAsync", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    PerfMonitor.class,
    BaseSpec.class,
    CompanyService.class,
    EntityProcessingService.class,
    EventSet.class
  })
  @Test
  public void getEventsInputNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getEventSetWithId(
                or(isA(EventSet.class), isNull(EventSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            companyService.getCompanyEvents(
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Map.class), isNull(Map.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(baseSpec, getNeedBucketMethod).withNoArguments();
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEvents", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    PerfMonitor.class,
    BaseSpec.class,
    CompanyService.class,
    EntityProcessingService.class,
    EventSet.class
  })
  @Test
  public void getEventsInputNotNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getEventSetWithId(
                or(isA(EventSet.class), isNull(EventSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            companyService.getCompanyEvents(
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Map.class), isNull(Map.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    ((PowerMockitoStubber) PowerMockito.doReturn(false).doReturn(null))
        .when(baseSpec, getNeedBucketMethod)
        .withNoArguments();
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEvents", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    PerfMonitor.class,
    Logger.class,
    EventSet.class,
    CompanyService.class
  })
  @Test
  public void getEventsInputNotNullOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            companyService.getCompanyEvents(
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Map.class), isNull(Map.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCacheKeyMethod = DTUMemberMatcher.method(BaseSpec.class, "getCacheKey");
    PowerMockito.doReturn("").when(baseSpec, getCacheKeyMethod).withNoArguments();
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEvents", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    BaseSpec.class,
    PerfMonitor.class,
    Logger.class,
    EntityBriefServiceImpl.class,
    EventSet.class
  })
  @Test
  public void getEventsInputNotNullOutputNotNull4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", "");
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "entitySolrServer", solrServer);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "userSearchesSolrServer", solrServer1);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", "");
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(servicesAPIUtil, "LOG", logger1);
    final ConvertUtil convertUtil1 =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil1, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil1, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil1, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger2 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil1, "LOG", logger2);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil1);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCacheKeyMethod = DTUMemberMatcher.method(BaseSpec.class, "getCacheKey");
    PowerMockito.doReturn("").when(baseSpec, getCacheKeyMethod).withNoArguments();
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEvents", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EventSet.class,
    CompanyService.class,
    EntityBriefServiceImpl.class,
    PerfMonitor.class
  })
  @Test
  public void getEventsInputNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    PowerMockito.when(
            companyService.getCompanyEvents(
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Map.class), isNull(Map.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final BaseSpec baseSpec = null;
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEvents", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval = (EventSet) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    CompanyService.class,
    EventSet.class,
    EntityProcessingService.class,
    PerfMonitor.class
  })
  @Test
  public void getEventsInputNullOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", "");
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "entitySolrServer", solrServer);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "userSearchesSolrServer", solrServer1);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", "");
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getEventSetWithId(
                or(isA(EventSet.class), isNull(EventSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            companyService.getCompanyEvents(
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Map.class), isNull(Map.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final BaseSpec baseSpec = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getEvents", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, baseSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EventSet.class, EntityBriefServiceImpl.class, PerfMonitor.class})
  @Test
  public void getEventsInputNullOutputNullPointerException2() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", "");
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "entitySolrServer", solrServer);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig, "userSearchesSolrServer", solrServer1);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", "");
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    final HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();
    Reflector.setField(industryClassificationMap, "industryClassificationMap", hashMap);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final BaseSpec baseSpec = null;
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getEvents", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, baseSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIndustryWebResultsAsyncInputNullNullNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final Set<String> catIdsSet = null;
    final String fq = null;
    final BaseSpec baseSpec = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getIndustryWebResultsAsync",
            Reflector.forName("java.util.Set"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>) methodUnderTest.invoke(objectUnderTest, catIdsSet, fq, baseSpec);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$fq"));
    assertNull(Reflector.getInstanceField(retval, "val$catIdsSet"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBriefServiceImpl.class,
    DocumentSet.class,
    IndustryBriefService.class,
    PerfMonitor.class
  })
  @Test
  public void getIndustryWebResultsInputNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    final IndustryBriefService industryBriefService = PowerMockito.mock(IndustryBriefService.class);
    PowerMockito.when(
            industryBriefService.getWebResults(
                or(isA(Set.class), isNull(Set.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "industryBriefService", industryBriefService);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final Set<String> catIdsSet = null;
    final String fq = null;
    final BaseSpec baseSpec = null;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getIndustryWebResults",
            Reflector.forName("java.util.Set"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, catIdsSet, fq, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocumentSet.class,
    EntityProcessingService.class,
    IndustryBriefService.class,
    PerfMonitor.class
  })
  @Test
  public void getIndustryWebResultsInputNullNullNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    final IndustryBriefService industryBriefService = PowerMockito.mock(IndustryBriefService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            industryBriefService.getWebResults(
                or(isA(Set.class), isNull(Set.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(documentSet);
    Reflector.setField(objectUnderTest, "industryBriefService", industryBriefService);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final Set<String> catIdsSet = null;
    final String fq = null;
    final BaseSpec baseSpec = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getIndustryWebResults",
            Reflector.forName("java.util.Set"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, catIdsSet, fq, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(IEntityInfo.class)
  @Test
  public void getInputEntityTypeInputNotNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final IEntityInfo entityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getTypeMethod = DTUMemberMatcher.method(IEntityInfo.class, "getType");
    PowerMockito.doReturn(771).when(entityInfo, getTypeMethod).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getInputEntityType", Reflector.forName("com.firstrain.obj.IEntityInfo"));
    methodUnderTest.setAccessible(true);
    final INPUT_ENTITY_TYPE retval =
        (INPUT_ENTITY_TYPE) methodUnderTest.invoke(objectUnderTest, entityInfo);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(IEntityInfo.class)
  @Test
  public void getInputEntityTypeInputNotNullOutputNull2() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final IEntityInfo entityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getTypeMethod = DTUMemberMatcher.method(IEntityInfo.class, "getType");
    ((PowerMockitoStubber)
            PowerMockito.doReturn(-2_147_482_877).doReturn(-2_147_482_879).doReturn(769))
        .when(entityInfo, getTypeMethod)
        .withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getInputEntityType", Reflector.forName("com.firstrain.obj.IEntityInfo"));
    methodUnderTest.setAccessible(true);
    final INPUT_ENTITY_TYPE retval =
        (INPUT_ENTITY_TYPE) methodUnderTest.invoke(objectUnderTest, entityInfo);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getInputEntityTypeInputNullOutputNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final IEntityInfo entityInfo = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getInputEntityType", Reflector.forName("com.firstrain.obj.IEntityInfo"));
    methodUnderTest.setAccessible(true);
    final INPUT_ENTITY_TYPE retval =
        (INPUT_ENTITY_TYPE) methodUnderTest.invoke(objectUnderTest, entityInfo);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getMgmtTurnoverAsyncInputNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final BaseSpec baseSpec = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMgmtTurnoverAsync", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    MgmtTurnoverData.class,
    BaseSpec.class,
    PerfMonitor.class,
    Logger.class,
    EntityBriefServiceImpl.class
  })
  @Test
  public void getMgmtTurnoverInputNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCacheKeyMethod = DTUMemberMatcher.method(BaseSpec.class, "getCacheKey");
    PowerMockito.doReturn("").when(baseSpec, getCacheKeyMethod).withNoArguments();
    final MgmtTurnoverData mgmtTurnoverData = PowerMockito.mock(MgmtTurnoverData.class);
    PowerMockito.whenNew(MgmtTurnoverData.class).withNoArguments().thenReturn(mgmtTurnoverData);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMgmtTurnover", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final MgmtTurnoverData retval =
        (MgmtTurnoverData) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    MgmtTurnoverData.class,
    EntityBriefServiceImpl.class,
    BaseSpec.class,
    PerfMonitor.class
  })
  @Test
  public void getMgmtTurnoverInputNotNullOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCacheKeyMethod = DTUMemberMatcher.method(BaseSpec.class, "getCacheKey");
    PowerMockito.doReturn(null).when(baseSpec, getCacheKeyMethod).withNoArguments();
    final MgmtTurnoverData mgmtTurnoverData = PowerMockito.mock(MgmtTurnoverData.class);
    PowerMockito.whenNew(MgmtTurnoverData.class).withNoArguments().thenReturn(mgmtTurnoverData);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getMgmtTurnover", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, baseSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    MgmtTurnoverData.class,
    EntityBriefServiceImpl.class,
    BaseSpec.class,
    PerfMonitor.class
  })
  @Test
  public void getMgmtTurnoverInputNotNullOutputNullPointerException2() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getCacheKeyMethod = DTUMemberMatcher.method(BaseSpec.class, "getCacheKey");
    PowerMockito.doReturn("").when(baseSpec, getCacheKeyMethod).withNoArguments();
    final MgmtTurnoverData mgmtTurnoverData = PowerMockito.mock(MgmtTurnoverData.class);
    PowerMockito.whenNew(MgmtTurnoverData.class).withNoArguments().thenReturn(mgmtTurnoverData);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getMgmtTurnover", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, baseSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    MgmtTurnoverData.class,
    EntityBriefServiceImpl.class,
    CompanyService.class,
    PerfMonitor.class
  })
  @Test
  public void getMgmtTurnoverInputNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    PowerMockito.when(companyService.getDefaultMonthlySpec()).thenReturn(null);
    PowerMockito.when(
            companyService.getMgmtTurnoverData(
                or(isA(MgmtTurnoverServiceSpec.class), isNull(MgmtTurnoverServiceSpec.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final BaseSpec baseSpec = null;
    final MgmtTurnoverData mgmtTurnoverData = PowerMockito.mock(MgmtTurnoverData.class);
    PowerMockito.whenNew(MgmtTurnoverData.class).withNoArguments().thenReturn(mgmtTurnoverData);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMgmtTurnover", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final MgmtTurnoverData retval =
        (MgmtTurnoverData) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MgmtTurnoverData.class, CompanyService.class, PerfMonitor.class})
  @Test
  public void getMgmtTurnoverInputNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService = PowerMockito.mock(CompanyService.class);
    PowerMockito.when(companyService.getDefaultMonthlySpec()).thenReturn(null);
    final MgmtTurnoverData mgmtTurnoverData = PowerMockito.mock(MgmtTurnoverData.class);
    PowerMockito.when(
            companyService.getMgmtTurnoverData(
                or(isA(MgmtTurnoverServiceSpec.class), isNull(MgmtTurnoverServiceSpec.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(mgmtTurnoverData);
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final BaseSpec baseSpec = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMgmtTurnover", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final MgmtTurnoverData retval =
        (MgmtTurnoverData) methodUnderTest.invoke(objectUnderTest, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MgmtTurnoverData.class, EntityBriefServiceImpl.class, PerfMonitor.class})
  @Test
  public void getMgmtTurnoverInputNullOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final BaseSpec baseSpec = null;
    final MgmtTurnoverData mgmtTurnoverData = PowerMockito.mock(MgmtTurnoverData.class);
    PowerMockito.whenNew(MgmtTurnoverData.class).withNoArguments().thenReturn(mgmtTurnoverData);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getMgmtTurnover", Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, baseSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getPeersObjectsFromCatIdListInput0Output0() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", "$");
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final DnbService dnbService =
        (DnbService) Reflector.getInstance("com.firstrain.frapi.service.DnbService");
    Reflector.setField(objectUnderTest, "dnbService", dnbService);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final ArrayList<String> catIdList = new ArrayList<String>();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getPeersObjectsFromCatIdList", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final List<com.firstrain.frapi.pojo.Entity> retval =
        (List<com.firstrain.frapi.pojo.Entity>) methodUnderTest.invoke(objectUnderTest, catIdList);

    // Assert
    final ArrayList<com.firstrain.frapi.pojo.Entity> arrayList =
        new ArrayList<com.firstrain.frapi.pojo.Entity>();
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getPeersObjectsFromCatIdListInput1Output0() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", "$");
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(null)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final DnbService dnbService =
        (DnbService) Reflector.getInstance("com.firstrain.frapi.service.DnbService");
    Reflector.setField(objectUnderTest, "dnbService", dnbService);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final ArrayList<String> catIdList = new ArrayList<String>();
    catIdList.add("");

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getPeersObjectsFromCatIdList", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final List<com.firstrain.frapi.pojo.Entity> retval =
        (List<com.firstrain.frapi.pojo.Entity>) methodUnderTest.invoke(objectUnderTest, catIdList);

    // Assert
    final ArrayList<com.firstrain.frapi.pojo.Entity> arrayList =
        new ArrayList<com.firstrain.frapi.pojo.Entity>();
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    ConvertUtil.class,
    IEntityInfoCache.class,
    EntityBaseServiceRepository.class,
    IEntityInfo.class,
    com.firstrain.frapi.pojo.Entity.class
  })
  @Test
  public void getPeersObjectsFromCatIdListInput1Output1() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", "$");
    Reflector.setField(objectUnderTest, "LOG", null);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getCompanyIdMethod = DTUMemberMatcher.method(IEntityInfo.class, "getCompanyId");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(0))
        .when(iEntityInfo, getCompanyIdMethod)
        .withNoArguments();
    final Method getNameMethod = DTUMemberMatcher.method(IEntityInfo.class, "getName");
    PowerMockito.doReturn(null).when(iEntityInfo, getNameMethod).withNoArguments();
    final Method getDocCountMethod = DTUMemberMatcher.method(IEntityInfo.class, "getDocCount");
    PowerMockito.doReturn(0).when(iEntityInfo, getDocCountMethod).withNoArguments();
    final Method getScopeMethod = DTUMemberMatcher.method(IEntityInfo.class, "getScope");
    ((PowerMockitoStubber) PowerMockito.doReturn(0).doReturn(0))
        .when(iEntityInfo, getScopeMethod)
        .withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSearchToken");
    PowerMockito.doReturn("").when(iEntityInfo, getSearchTokenMethod).withNoArguments();
    final Method getPrimaryTickerMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getPrimaryTicker");
    PowerMockito.doReturn(null).when(iEntityInfo, getPrimaryTickerMethod).withNoArguments();
    final Method getIdMethod = DTUMemberMatcher.method(IEntityInfo.class, "getId");
    PowerMockito.doReturn(null).when(iEntityInfo, getIdMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final DnbService dnbService =
        (DnbService) Reflector.getInstance("com.firstrain.frapi.service.DnbService");
    Reflector.setField(objectUnderTest, "dnbService", dnbService);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    final RestrictContentService restrictContentService =
        (RestrictContentService)
            Reflector.getInstance("com.firstrain.frapi.service.RestrictContentService");
    Reflector.setField(objectUnderTest, "restrictContentService", restrictContentService);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final ArrayList<String> catIdList = new ArrayList<String>();
    catIdList.add(null);
    final com.firstrain.frapi.pojo.Entity entity =
        PowerMockito.mock(com.firstrain.frapi.pojo.Entity.class);
    PowerMockito.whenNew(com.firstrain.frapi.pojo.Entity.class)
        .withNoArguments()
        .thenReturn(entity);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getPeersObjectsFromCatIdList", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final List<com.firstrain.frapi.pojo.Entity> retval =
        (List<com.firstrain.frapi.pojo.Entity>) methodUnderTest.invoke(objectUnderTest, catIdList);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(0));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTurnOverEventsAsyncInputNullNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final List<Integer> companyIds = null;
    final BaseSpec baseSpec = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTurnOverEventsAsync",
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>) methodUnderTest.invoke(objectUnderTest, companyIds, baseSpec);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$companyIds"));
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EventSet.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityBaseService.class,
    EntityProcessingService.class
  })
  @Test
  public void getTurnOverEventsInputNullNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            entityProcessingService.getEventSetWithId(
                or(isA(EventSet.class), isNull(EventSet.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final EventSet eventSet1 = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            entityBaseService.getEventSetForMTEvents(
                or(isA(List.class), isNull(List.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(eventSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final List<Integer> companyIds = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(baseSpec, getNeedBucketMethod).withNoArguments();
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTurnOverEvents",
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval =
        (EventSet) methodUnderTest.invoke(objectUnderTest, companyIds, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EventSet.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityBaseService.class,
    EntityProcessingService.class
  })
  @Test
  public void getTurnOverEventsInputNullNotNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            entityProcessingService.getEventSetWithId(
                or(isA(EventSet.class), isNull(EventSet.class))))
        .thenReturn(eventSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final EventSet eventSet1 = PowerMockito.mock(EventSet.class);
    PowerMockito.when(
            entityBaseService.getEventSetForMTEvents(
                or(isA(List.class), isNull(List.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(eventSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final List<Integer> companyIds = null;
    final BaseSpec baseSpec = PowerMockito.mock(BaseSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    ((PowerMockitoStubber) PowerMockito.doReturn(false).doReturn(null))
        .when(baseSpec, getNeedBucketMethod)
        .withNoArguments();
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTurnOverEvents",
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval =
        (EventSet) methodUnderTest.invoke(objectUnderTest, companyIds, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EventSet.class,
    EntityBriefServiceImpl.class,
    EntityBaseService.class,
    PerfMonitor.class
  })
  @Test
  public void getTurnOverEventsInputNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getEventSetForMTEvents(
                or(isA(List.class), isNull(List.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final List<Integer> companyIds = null;
    final BaseSpec baseSpec = null;
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    PowerMockito.whenNew(EventSet.class).withNoArguments().thenReturn(eventSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTurnOverEvents",
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
    methodUnderTest.setAccessible(true);
    final EventSet retval =
        (EventSet) methodUnderTest.invoke(objectUnderTest, companyIds, baseSpec);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTweetsAsyncInputNullNullZeroNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = null;
    final SectionSpec sectionSpec = null;
    final int scope = 0;
    final String excludeArticleIdsSSV = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweetsAsync",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$catIdsAll"));
    assertNull(Reflector.getInstanceField(retval, "val$sectionSpec"));
    assertEquals(0, Reflector.getInstanceField(retval, "val$scope"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$excludeArticleIdsSSV"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    FR_ArrayUtils.class,
    EntityBaseService.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void getTweetsInput0NotNullZeroNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);
    PowerMockito.mockStatic(FR_ArrayUtils.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(null);
    PowerMockito.when(
            entityBaseService.getAccelerometerNode(
                or(isA(String.class), isNull(String.class)), anyBoolean(), anyBoolean()))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = {};
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(true)
        .when(sectionSpec, getNeedTweetAccelerometerMethod)
        .withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    final Method csvFromStringArrayMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "csvFromStringArray", java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(FR_ArrayUtils.class, csvFromStringArrayMethod)
        .withArguments(or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    FR_ArrayUtils.class,
    EntityBaseService.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void getTweetsInput2NotNullZeroNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);
    PowerMockito.mockStatic(FR_ArrayUtils.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(null);
    PowerMockito.when(
            entityBaseService.getAccelerometerNode(
                or(isA(String.class), isNull(String.class)), anyBoolean(), anyBoolean()))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = {null, null};
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(true)
        .when(sectionSpec, getNeedTweetAccelerometerMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "                                ";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    final Method csvFromStringArrayMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "csvFromStringArray", java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(FR_ArrayUtils.class, csvFromStringArrayMethod)
        .withArguments(or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    TwitterSpec.class,
    SectionSpec.class,
    TweetSet.class,
    PerfMonitor.class,
    Logger.class,
    EntityBriefServiceImpl.class
  })
  @Test
  public void getTweetsInput3NotNullZeroNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", "");
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = "";
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    final IndustryBriefService industryBriefService =
        (IndustryBriefService)
            Reflector.getInstance("com.firstrain.frapi.service.IndustryBriefService");
    Reflector.setField(objectUnderTest, "industryBriefService", industryBriefService);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(tweetSet);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = {"", "", ""};
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "";
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    TwitterSpec.class,
    SectionSpec.class,
    TweetSet.class,
    PerfMonitor.class,
    Logger.class,
    EntityBriefServiceImpl.class
  })
  @Test
  public void getTweetsInput3NotNullZeroNotNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", "");
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = "";
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    final IndustryBriefService industryBriefService =
        (IndustryBriefService)
            Reflector.getInstance("com.firstrain.frapi.service.IndustryBriefService");
    Reflector.setField(objectUnderTest, "industryBriefService", industryBriefService);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = {"", "", ""};
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void getTweetsInput3NotNullZeroNotNullOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", "");
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = "";
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap =
        (IndustryClassificationMap)
            Reflector.getInstance("com.firstrain.frapi.repository.impl.IndustryClassificationMap");
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    final IndustryBriefService industryBriefService =
        (IndustryBriefService)
            Reflector.getInstance("com.firstrain.frapi.service.IndustryBriefService");
    Reflector.setField(objectUnderTest, "industryBriefService", industryBriefService);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = {"", "", ""};
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getTweets",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
              Reflector.forName("int"),
              Reflector.forName("java.lang.String"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityProcessingService.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void getTweetsInputNullNotNullZeroNotNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityProcessingService.getTweetsWithId(
                or(isA(TweetSet.class), isNull(TweetSet.class))))
        .thenReturn(tweetSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final TweetSet tweetSet1 = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(tweetSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = null;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(null)
        .when(sectionSpec, getNeedTweetAccelerometerMethod)
        .withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "";
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityProcessingService.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void getTweetsInputNullNotNullZeroNotNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityProcessingService.getTweetsWithId(
                or(isA(TweetSet.class), isNull(TweetSet.class))))
        .thenReturn(tweetSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final TweetSet tweetSet1 = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(tweetSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = null;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(null)
        .when(sectionSpec, getNeedTweetAccelerometerMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "";
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityProcessingService.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void getTweetsInputNullNotNullZeroNotNullOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityProcessingService.getTweetsWithId(
                or(isA(TweetSet.class), isNull(TweetSet.class))))
        .thenReturn(tweetSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final TweetSet tweetSet1 = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(tweetSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = null;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(null)
        .when(sectionSpec, getNeedTweetAccelerometerMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "!";
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    FR_ArrayUtils.class,
    EntityBaseService.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void getTweetsInputNullNotNullZeroNotNullOutputNotNull4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);
    PowerMockito.mockStatic(FR_ArrayUtils.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(null);
    PowerMockito.when(
            entityBaseService.getAccelerometerNode(
                or(isA(String.class), isNull(String.class)), anyBoolean(), anyBoolean()))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = null;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(true)
        .when(sectionSpec, getNeedTweetAccelerometerMethod)
        .withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    final Method csvFromStringArrayMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "csvFromStringArray", java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(FR_ArrayUtils.class, csvFromStringArrayMethod)
        .withArguments(or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    FR_ArrayUtils.class,
    EntityBaseService.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityProcessingService.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void getTweetsInputNullNotNullZeroNotNullOutputNotNull5() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);
    PowerMockito.mockStatic(FR_ArrayUtils.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityProcessingService.getTweetsWithId(
                or(isA(TweetSet.class), isNull(TweetSet.class))))
        .thenReturn(tweetSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final TweetSet tweetSet1 = PowerMockito.mock(TweetSet.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(tweetSet1);
    PowerMockito.when(
            entityBaseService.getAccelerometerNode(
                or(isA(String.class), isNull(String.class)), anyBoolean(), anyBoolean()))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = null;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(true)
        .when(sectionSpec, getNeedTweetAccelerometerMethod)
        .withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "";
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    final Method csvFromStringArrayMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "csvFromStringArray", java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(FR_ArrayUtils.class, csvFromStringArrayMethod)
        .withArguments(or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    TweetSet.class,
    PerfMonitor.class,
    SectionSpec.class,
    EntityBriefServiceImpl.class,
    TwitterSpec.class
  })
  @Test
  public void getTweetsInputNullNotNullZeroNotNullOutputNotNull6() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getTweetList(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(TwitterSpec.class), isNull(TwitterSpec.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String[] catIdsAll = null;
    final SectionSpec sectionSpec = PowerMockito.mock(SectionSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(SectionSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(sectionSpec, getNeedBucketMethod).withNoArguments();
    final Method getNeedTweetAccelerometerMethod =
        DTUMemberMatcher.method(SectionSpec.class, "getNeedTweetAccelerometer");
    PowerMockito.doReturn(null)
        .when(sectionSpec, getNeedTweetAccelerometerMethod)
        .withNoArguments();
    final Method getStartMethod = DTUMemberMatcher.method(SectionSpec.class, "getStart");
    PowerMockito.doReturn(null).when(sectionSpec, getStartMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SectionSpec.class, "getCount");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn((short) 0))
        .when(sectionSpec, getCountMethod)
        .withNoArguments();
    final int scope = 0;
    final String excludeArticleIdsSSV = "!";
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    PowerMockito.whenNew(TweetSet.class).withNoArguments().thenReturn(tweetSet);
    final TwitterSpec twitterSpec = PowerMockito.mock(TwitterSpec.class);
    PowerMockito.whenNew(TwitterSpec.class).withNoArguments().thenReturn(twitterSpec);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTweets",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.SectionSpec"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final TweetSet retval =
        (TweetSet)
            methodUnderTest.invoke(
                objectUnderTest, catIdsAll, sectionSpec, scope, excludeArticleIdsSSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getVisualizationAsyncInputNullZeroNullNullFalseOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String searchToken = null;
    final int nodeCount = 0;
    final List<VisualizationData.ChartType> chartTypes = null;
    final String filters = null;
    final boolean isApplyMinNodeCheck = false;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getVisualizationAsync",
            Reflector.forName("java.lang.String"),
            Reflector.forName("int"),
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(
                objectUnderTest, searchToken, nodeCount, chartTypes, filters, isApplyMinNodeCheck);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$chartTypes"));
    assertNull(Reflector.getInstanceField(retval, "val$filters"));
    assertNull(Reflector.getInstanceField(retval, "val$searchToken"));
    assertEquals(false, Reflector.getInstanceField(retval, "val$isApplyMinNodeCheck"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertEquals(0, Reflector.getInstanceField(retval, "val$nodeCount"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getWebResultsAsyncInputNullNullNullNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final String fq = null;
    final BaseSpec baseSpec = null;
    final BlendDunsInput bdi = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebResultsAsync",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>) methodUnderTest.invoke(objectUnderTest, q, fq, baseSpec, bdi);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
    assertNull(Reflector.getInstanceField(retval, "val$bdi"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$q"));
    assertNull(Reflector.getInstanceField(retval, "val$fq"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityProcessingService.class,
    DocumentSet.class
  })
  @Test
  public void getWebResultsInputNullNullNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.getWebResultsForSearch(
                or(isA(String.class), isNull(String.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(BlendDunsInput.class), isNull(BlendDunsInput.class))))
        .thenReturn(documentSet);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final String fq = null;
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    ((PowerMockitoStubber) PowerMockito.doReturn(false).doReturn(null))
        .when(spec, getNeedBucketMethod)
        .withNoArguments();
    final BlendDunsInput bdi = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebResults",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, q, fq, spec, bdi);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocumentSet.class,
    EntityBaseService.class,
    EntityBriefServiceImpl.class,
    PerfMonitor.class
  })
  @Test
  public void getWebResultsInputNullNullNotNullNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getWebResultsForSearch(
                or(isA(String.class), isNull(String.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(BlendDunsInput.class), isNull(BlendDunsInput.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final String fq = null;
    final BaseSpec spec = (BaseSpec) Reflector.getInstance("com.firstrain.frapi.domain.BaseSpec");
    final BlendDunsInput bdi = null;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebResults",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, q, fq, spec, bdi);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getWebVolumeGraphAsyncInputNullNullNullNullNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String catId = null;
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = null;
    final Graph.GraphFor graphFor = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebVolumeGraphAsync",
            Reflector.forName("java.lang.String"),
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.pojo.Graph$GraphFor"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>)
            methodUnderTest.invoke(
                objectUnderTest, catId, companyIdsArr, tCatIds, baseSpec, graphFor);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$tCatIds"));
    assertNull(Reflector.getInstanceField(retval, "val$companyIdsArr"));
    assertNull(Reflector.getInstanceField(retval, "val$graphFor"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$catId"));
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Graph.class, EntityBriefServiceImpl.class, Logger.class, PerfMonitor.class})
  @Test
  public void getWebVolumeGraphInputNotNullNullNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String catId = "";
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = null;
    final Graph.GraphFor graphFor = null;
    final Graph graph = PowerMockito.mock(Graph.class);
    PowerMockito.whenNew(Graph.class).withNoArguments().thenReturn(graph);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebVolumeGraph",
            Reflector.forName("java.lang.String"),
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.pojo.Graph$GraphFor"));
    methodUnderTest.setAccessible(true);
    final Graph retval =
        (Graph)
            methodUnderTest.invoke(
                objectUnderTest, catId, companyIdsArr, tCatIds, baseSpec, graphFor);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Graph.class, EntityBriefServiceImpl.class, PerfMonitor.class})
  @Test
  public void getWebVolumeGraphInputNotNullNullNullNullNullOutputNullPointerException()
      throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest =
        (EntityBriefServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String catId = "";
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = null;
    final Graph.GraphFor graphFor = null;
    final Graph graph = PowerMockito.mock(Graph.class);
    PowerMockito.whenNew(Graph.class).withNoArguments().thenReturn(graph);
    final PerfRequestEntry perfRequestEntry =
        (PerfRequestEntry) Reflector.getInstance("com.firstrain.utils.object.PerfRequestEntry");
    PowerMockito.doReturn(perfRequestEntry).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getWebVolumeGraph",
              Reflector.forName("java.lang.String"),
              Reflector.forName("int[]"),
              Reflector.forName("int[]"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
              Reflector.forName("com.firstrain.frapi.pojo.Graph$GraphFor"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, catId, companyIdsArr, tCatIds, baseSpec, graphFor);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Graph.class,
    EntityBriefServiceImpl.class,
    EntityBaseService.class,
    PerfMonitor.class
  })
  @Test
  public void getWebVolumeGraphInputNullNullNullNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.getWebVolumeGraph(
                or(isA(String.class), isNull(String.class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Graph.GraphFor.class), isNull(Graph.GraphFor.class)),
                anyInt(),
                anyInt(),
                or(isA(int[].class), isNull(int[].class)),
                anyBoolean()))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String catId = null;
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = null;
    final Graph.GraphFor graphFor = null;
    final Graph graph = PowerMockito.mock(Graph.class);
    PowerMockito.whenNew(Graph.class).withNoArguments().thenReturn(graph);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebVolumeGraph",
            Reflector.forName("java.lang.String"),
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.pojo.Graph$GraphFor"));
    methodUnderTest.setAccessible(true);
    final Graph retval =
        (Graph)
            methodUnderTest.invoke(
                objectUnderTest, catId, companyIdsArr, tCatIds, baseSpec, graphFor);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Graph.class, EntityBaseService.class, PerfMonitor.class})
  @Test
  public void getWebVolumeGraphInputNullNullNullNullNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final Graph graph = PowerMockito.mock(Graph.class);
    PowerMockito.when(
            entityBaseService.getWebVolumeGraph(
                or(isA(String.class), isNull(String.class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(int[].class), isNull(int[].class)),
                or(isA(BaseSpec.class), isNull(BaseSpec.class)),
                or(isA(Graph.GraphFor.class), isNull(Graph.GraphFor.class)),
                anyInt(),
                anyInt(),
                or(isA(int[].class), isNull(int[].class)),
                anyBoolean()))
        .thenReturn(graph);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String catId = null;
    final int[] companyIdsArr = null;
    final int[] tCatIds = null;
    final BaseSpec baseSpec = null;
    final Graph.GraphFor graphFor = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWebVolumeGraph",
            Reflector.forName("java.lang.String"),
            Reflector.forName("int[]"),
            Reflector.forName("int[]"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.pojo.Graph$GraphFor"));
    methodUnderTest.setAccessible(true);
    final Graph retval =
        (Graph)
            methodUnderTest.invoke(
                objectUnderTest, catId, companyIdsArr, tCatIds, baseSpec, graphFor);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getWeightInput0NotNullOutputZero() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final ArrayList values = new ArrayList();
    final String key = "";

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWeight",
            Reflector.forName("java.util.Collection"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, values, key);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getWeightInput1NotNullOutputPositive() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final ArrayList values = new ArrayList();
    final ArrayList<String> arrayList = new ArrayList<String>();
    arrayList.add("");
    values.add(arrayList);
    final String key = "";

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWeight",
            Reflector.forName("java.util.Collection"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, values, key);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getWeightInput1NotNullOutputZero() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        (EntityProcessingService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityProcessingService");
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    final CompanyService companyService =
        (CompanyService) Reflector.getInstance("com.firstrain.frapi.service.CompanyService");
    Reflector.setField(objectUnderTest, "companyService", companyService);
    final ArrayList values = new ArrayList();
    final ArrayList<String> arrayList = new ArrayList<String>();
    arrayList.add("22\"\"\"\"\"\"");
    values.add(arrayList);
    final String key = "";

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getWeight",
            Reflector.forName("java.util.Collection"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, values, key);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void gethighlightsResultsAsyncInputNullNullNullNullOutputNotNull() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final String fq = null;
    final BaseSpec baseSpec = null;
    final BlendDunsInput bdi = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "gethighlightsResultsAsync",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final Callable<BaseSet> retval =
        (Callable<BaseSet>) methodUnderTest.invoke(objectUnderTest, q, fq, baseSpec, bdi);

    // Assert
    assertNotNull(retval);
    assertNull(Reflector.getInstanceField(retval, "val$baseSpec"));
    assertNull(Reflector.getInstanceField(retval, "val$bdi"));
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "visualizationService"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "excludeFilters"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "convertUtil"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).contentFilterToken);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "companyServiceRepository"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "dateBucketUtils"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseServiceRepository"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "dnbService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryClassificationMap"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "industryBriefService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "restrictContentService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityProcessingService"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "servicesAPIUtil"));
    assertEquals(
        0L,
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityBaseService"));
    assertNull(
        ((EntityBriefServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "companyService"));
    assertNull(Reflector.getInstanceField(retval, "val$q"));
    assertNull(Reflector.getInstanceField(retval, "val$fq"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityBriefServiceImpl.class,
    DocumentSet.class
  })
  @Test
  public void gethighlightsResultsInputNullNullNotNullNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    final CompanyServiceRepository companyServiceRepository =
        (CompanyServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.CompanyServiceRepository");
    Reflector.setField(objectUnderTest, "companyServiceRepository", companyServiceRepository);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    PowerMockito.when(
            entityBaseService.gethighlightsResults(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(int[].class), isNull(int[].class)),
                anyInt()))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final String fq = null;
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final BlendDunsInput bdi = null;
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.whenNew(DocumentSet.class).withNoArguments().thenReturn(documentSet);
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "gethighlightsResults",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, q, fq, spec, bdi);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityProcessingService.class,
    DocumentSet.class
  })
  @Test
  public void gethighlightsResultsInputNullNullNotNullNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    final CompanyServiceRepository companyServiceRepository =
        (CompanyServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.CompanyServiceRepository");
    Reflector.setField(objectUnderTest, "companyServiceRepository", companyServiceRepository);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(documentSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet1 = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.gethighlightsResults(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(int[].class), isNull(int[].class)),
                anyInt()))
        .thenReturn(documentSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final String fq = null;
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    ((PowerMockitoStubber) PowerMockito.doReturn(false).doReturn(null))
        .when(spec, getNeedBucketMethod)
        .withNoArguments();
    final BlendDunsInput bdi = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "gethighlightsResults",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, q, fq, spec, bdi);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBaseService.class,
    PerfMonitor.class,
    BaseSpec.class,
    EntityProcessingService.class,
    DocumentSet.class
  })
  @Test
  public void gethighlightsResultsInputNullNullNotNullNullOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    final VisualizationService visualizationService =
        (VisualizationService)
            Reflector.getInstance("com.firstrain.frapi.service.VisualizationService");
    Reflector.setField(objectUnderTest, "visualizationService", visualizationService);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    final CompanyServiceRepository companyServiceRepository =
        (CompanyServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.CompanyServiceRepository");
    Reflector.setField(objectUnderTest, "companyServiceRepository", companyServiceRepository);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    Reflector.setField(industryClassificationMap, "serviceConfig", null);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    final EntityProcessingService entityProcessingService =
        PowerMockito.mock(EntityProcessingService.class);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityProcessingService.getDocumentSetWithId(
                or(isA(DocumentSet.class), isNull(DocumentSet.class))))
        .thenReturn(documentSet);
    Reflector.setField(objectUnderTest, "entityProcessingService", entityProcessingService);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    final EntityBaseService entityBaseService = PowerMockito.mock(EntityBaseService.class);
    final DocumentSet documentSet1 = PowerMockito.mock(DocumentSet.class);
    PowerMockito.when(
            entityBaseService.gethighlightsResults(
                or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
                or(isA(int[].class), isNull(int[].class)),
                anyInt()))
        .thenReturn(documentSet1);
    Reflector.setField(objectUnderTest, "entityBaseService", entityBaseService);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final String fq = null;
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getNeedBucketMethod = DTUMemberMatcher.method(BaseSpec.class, "getNeedBucket");
    PowerMockito.doReturn(null).when(spec, getNeedBucketMethod).withNoArguments();
    final BlendDunsInput bdi = null;
    PowerMockito.doReturn(null).when(PerfMonitor.class);
    PerfMonitor.endRequest();
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(anyLong(), or(isA(PerfActivityType.class), isNull(PerfActivityType.class)));
    final Method startRequestMethod =
        DTUMemberMatcher.method(PerfMonitor.class, "startRequest", String.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, startRequestMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "gethighlightsResults",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.domain.BaseSpec"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final DocumentSet retval =
        (DocumentSet) methodUnderTest.invoke(objectUnderTest, q, fq, spec, bdi);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityBriefServiceImpl.class, EntityEntry.class,
    EntityBaseServiceRepository.class, com.firstrain.frapi.pojo.Entity.class
  })
  @Test
  public void populateContextMatchedEntititesInputNull0ZeroNullOutputVoid2() throws Exception {

    // Arrange
    final EntityBriefServiceImpl objectUnderTest = new EntityBriefServiceImpl();
    Reflector.setField(objectUnderTest, "visualizationService", null);
    Reflector.setField(objectUnderTest, "excludeFilters", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    objectUnderTest.contentFilterToken = null;
    Reflector.setField(objectUnderTest, "companyServiceRepository", null);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final ArrayList arrayList = new ArrayList();
    final EntityEntry entityEntry = PowerMockito.mock(EntityEntry.class);
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(EntityEntry.class, "getSearchToken");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(entityEntry, getSearchTokenMethod)
        .withNoArguments();
    final Method getNameMethod = DTUMemberMatcher.method(EntityEntry.class, "getName");
    PowerMockito.doReturn(null).when(entityEntry, getNameMethod).withNoArguments();
    arrayList.add(entityEntry);
    PowerMockito.when(
            entityBaseServiceRepository.getContextMatchEntities(
                or(isA(String.class), isNull(String.class)), or(isA(Map.class), isNull(Map.class))))
        .thenReturn(arrayList);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "dnbService", null);
    final IndustryClassificationMap industryClassificationMap = new IndustryClassificationMap();
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    serviceConfig.setSecSolrServer(null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setDocImageSolrServer(solrServer);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    serviceConfig.setEntitySolrServer(null);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", "");
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setTweetGroupSolrServer(solrServer1);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", "");
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(industryClassificationMap, "serviceConfig", serviceConfig);
    Reflector.setField(industryClassificationMap, "industryClassificationMap", null);
    Reflector.setField(industryClassificationMap, "LOG", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", industryClassificationMap);
    Reflector.setField(objectUnderTest, "industryBriefService", null);
    Reflector.setField(objectUnderTest, "restrictContentService", null);
    Reflector.setField(objectUnderTest, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "entityBaseService", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    Reflector.setField(objectUnderTest, "companyService", null);
    final String q = null;
    final ArrayList<com.firstrain.frapi.pojo.Entity> entityList =
        new ArrayList<com.firstrain.frapi.pojo.Entity>();
    final int count = 0;
    final Map<Integer, Integer> industryClassfMap = null;
    final com.firstrain.frapi.pojo.Entity entity =
        PowerMockito.mock(com.firstrain.frapi.pojo.Entity.class);
    PowerMockito.whenNew(com.firstrain.frapi.pojo.Entity.class)
        .withNoArguments()
        .thenReturn(entity);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityBriefServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "populateContextMatchedEntitites",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.util.List"),
            Reflector.forName("int"),
            Reflector.forName("java.util.Map"));
    methodUnderTest.setAccessible(true);
    methodUnderTest.invoke(objectUnderTest, q, entityList, count, industryClassfMap);
  }
}
