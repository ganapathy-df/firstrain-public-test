package com.firstrain.web.service.core;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.EntityBacktest;
import com.firstrain.db.obj.EntityHistory;
import com.firstrain.db.obj.PrivateEntity;
import com.firstrain.frapi.customapirepository.impl.PrivateEntityRepositoryImpl;
import com.firstrain.web.pojo.CreateInputBean;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.codehaus.jackson.map.ObjectMapper;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class PrivateEntityServiceDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: PrivateEntityService */
  // Test generated by Diffblue Deeptest.

  @Test
  public void access$000InputNotNullOutputNull() throws Exception {

    // Arrange
    final PrivateEntityService x0 = new PrivateEntityService();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.core.PrivateEntityService");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$000", Reflector.forName("com.firstrain.web.service.core.PrivateEntityService"));
    methodUnderTest.setAccessible(true);
    final PrivateEntityRepositoryImpl retval =
        (PrivateEntityRepositoryImpl) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Logger.class,
    PrivateEntityService.class,
    PrivateEntityRepositoryImpl.class,
    StringUtils.class
  })
  @Test
  public void callOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.web.service.core.PrivateEntityService$1");
    final PrivateEntityService privateEntityService = new PrivateEntityService();
    Reflector.setField(privateEntityService, "searchTokenUtil", null);
    final PrivateEntityRepositoryImpl privateEntityRepositoryImpl =
        PowerMockito.mock(PrivateEntityRepositoryImpl.class);
    final Method getEntityBackTestListMethod =
        DTUMemberMatcher.method(
            PrivateEntityRepositoryImpl.class,
            "getEntityBackTestList",
            String.class,
            boolean.class);
    PowerMockito.doReturn(null)
        .when(privateEntityRepositoryImpl, getEntityBackTestListMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyBoolean());
    Reflector.setField(
        privateEntityService, "privateEntityRepositoryImpl", privateEntityRepositoryImpl);
    privateEntityService.taskExecutor = null;
    Reflector.setField(objectUnderTest, "this$0", privateEntityService);
    Reflector.setField(objectUnderTest, "val$searchToken", null);
    Reflector.setField(objectUnderTest, "val$docs", null);
    final ObjectMapper objectMapper = PowerMockito.mock(ObjectMapper.class);
    PowerMockito.whenNew(ObjectMapper.class).withNoArguments().thenReturn(objectMapper);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isNotEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.core.PrivateEntityService$1");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final List<EntityBacktest> retval =
        (List<EntityBacktest>) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Logger.class,
    PrivateEntityService.class,
    PrivateEntityRepositoryImpl.class,
    StringUtils.class
  })
  @Test
  public void callOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.web.service.core.PrivateEntityService$1");
    final PrivateEntityService privateEntityService = new PrivateEntityService();
    Reflector.setField(privateEntityService, "searchTokenUtil", null);
    final PrivateEntityRepositoryImpl privateEntityRepositoryImpl =
        PowerMockito.mock(PrivateEntityRepositoryImpl.class);
    final Method getEntityBackTestListMethod =
        DTUMemberMatcher.method(
            PrivateEntityRepositoryImpl.class,
            "getEntityBackTestList",
            String.class,
            boolean.class);
    PowerMockito.doReturn(null)
        .when(privateEntityRepositoryImpl, getEntityBackTestListMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyBoolean());
    Reflector.setField(
        privateEntityService, "privateEntityRepositoryImpl", privateEntityRepositoryImpl);
    privateEntityService.taskExecutor = null;
    Reflector.setField(objectUnderTest, "this$0", privateEntityService);
    Reflector.setField(objectUnderTest, "val$searchToken", null);
    Reflector.setField(objectUnderTest, "val$docs", null);
    final ObjectMapper objectMapper = PowerMockito.mock(ObjectMapper.class);
    PowerMockito.whenNew(ObjectMapper.class).withNoArguments().thenReturn(objectMapper);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isNotEmpty", String.class);
    PowerMockito.doReturn(true)
        .when(StringUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.core.PrivateEntityService$1");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final List<EntityBacktest> retval =
        (List<EntityBacktest>) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, PrivateEntityService.class, PrivateEntityRepositoryImpl.class})
  @Test
  public void callOutputNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.web.service.core.PrivateEntityService$2");
    final PrivateEntityService privateEntityService = new PrivateEntityService();
    Reflector.setField(privateEntityService, "searchTokenUtil", null);
    final PrivateEntityRepositoryImpl privateEntityRepositoryImpl =
        PowerMockito.mock(PrivateEntityRepositoryImpl.class);
    final Method getPrivateEntityListMethod =
        DTUMemberMatcher.method(
            PrivateEntityRepositoryImpl.class, "getPrivateEntityList", String.class);
    arrangeData(privateEntityRepositoryImpl, getPrivateEntityListMethod, privateEntityService, objectUnderTest);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.core.PrivateEntityService$2");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final List<PrivateEntity> retval =
        (List<PrivateEntity>) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, PrivateEntityService.class, PrivateEntityRepositoryImpl.class})
  @Test
  public void callOutputNull4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.web.service.core.PrivateEntityService$3");
    final PrivateEntityService privateEntityService = new PrivateEntityService();
    Reflector.setField(privateEntityService, "searchTokenUtil", null);
    final PrivateEntityRepositoryImpl privateEntityRepositoryImpl =
        PowerMockito.mock(PrivateEntityRepositoryImpl.class);
    final Method getEntityHistoryListMethod =
        DTUMemberMatcher.method(
            PrivateEntityRepositoryImpl.class, "getEntityHistoryList", String.class);
    arrangeData(privateEntityRepositoryImpl, getEntityHistoryListMethod, privateEntityService, objectUnderTest);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.core.PrivateEntityService$3");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final List<EntityHistory> retval =
        (List<EntityHistory>) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, PrivateEntityService.class, PrivateEntityRepositoryImpl.class})
  @Test
  public void callOutputNull5() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.web.service.core.PrivateEntityService$4");
    final PrivateEntityService privateEntityService = new PrivateEntityService();
    Reflector.setField(privateEntityService, "searchTokenUtil", null);
    final PrivateEntityRepositoryImpl privateEntityRepositoryImpl =
        PowerMockito.mock(PrivateEntityRepositoryImpl.class);
    final Method getEntityBacktestListMethod =
        DTUMemberMatcher.method(
            PrivateEntityRepositoryImpl.class, "getEntityBacktestList", String.class);
    arrangeData(privateEntityRepositoryImpl, getEntityBacktestListMethod, privateEntityService, objectUnderTest);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.core.PrivateEntityService$4");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final List<EntityBacktest> retval =
        (List<EntityBacktest>) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  private void arrangeData(final PrivateEntityRepositoryImpl privateEntityRepositoryImpl, final Method getEntityHistoryListMethod, final PrivateEntityService privateEntityService, final Object objectUnderTest) throws Exception {
    PowerMockito.doReturn(null)
        .when(privateEntityRepositoryImpl, getEntityHistoryListMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(
        privateEntityService, "privateEntityRepositoryImpl", privateEntityRepositoryImpl);
    privateEntityService.taskExecutor = null;
    Reflector.setField(objectUnderTest, "this$0", privateEntityService);
    Reflector.setField(objectUnderTest, "val$searchToken", null);
    final ObjectMapper objectMapper = PowerMockito.mock(ObjectMapper.class);
    PowerMockito.whenNew(ObjectMapper.class).withNoArguments().thenReturn(objectMapper);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(PrivateEntity.class)
  @Test
  public void checkInActiveEntityInputNull1OutputCustomExceptionError() throws Exception {

    // Arrange
    final PrivateEntityService objectUnderTest = new PrivateEntityService();
    final String searchToken = null;
    final ArrayList<PrivateEntity> privateEntities = new ArrayList<PrivateEntity>();
    final PrivateEntity privateEntity = PowerMockito.mock(PrivateEntity.class);
    final Method getStatusMethod = DTUMemberMatcher.method(PrivateEntity.class, "getStatus");
    PowerMockito.doReturn("INACTIVE").when(privateEntity, getStatusMethod).withNoArguments();
    privateEntities.add(privateEntity);

    // Act
    thrown.expect(com.firstrain.web.exception.CustomExceptionError.class);
    objectUnderTest.checkInActiveEntity(searchToken, privateEntities);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(PrivateEntity.class)
  @Test
  public void checkUpdateDefinitionChangedInputNotNull1OutputCustomExceptionSuccess()
      throws Exception {

    // Arrange
    final PrivateEntityService objectUnderTest = new PrivateEntityService();
    Reflector.setField(objectUnderTest, "searchTokenUtil", null);
    Reflector.setField(objectUnderTest, "privateEntityRepositoryImpl", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final String definition = "!!!!!!!!!!";
    final ArrayList<PrivateEntity> privateEntities = new ArrayList<PrivateEntity>();
    final PrivateEntity privateEntity = PowerMockito.mock(PrivateEntity.class);
    final Method getDefinition_devMethod =
        DTUMemberMatcher.method(PrivateEntity.class, "getDefinition_dev");
    PowerMockito.doReturn("!!!!!!!!!!")
        .when(privateEntity, getDefinition_devMethod)
        .withNoArguments();
    privateEntities.add(privateEntity);

    // Act
    thrown.expect(com.firstrain.web.exception.CustomExceptionSuccess.class);
    objectUnderTest.checkUpdateDefinitionChanged(definition, privateEntities);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({PrivateEntityRepositoryImpl.class, CollectionUtils.class})
  @Test
  public void createPrivateEntityInputNotNullNullNull0OutputCustomExceptionSuccess()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(CollectionUtils.class);

    // Arrange
    final PrivateEntityService objectUnderTest = new PrivateEntityService();
    Reflector.setField(objectUnderTest, "searchTokenUtil", null);
    final PrivateEntityRepositoryImpl privateEntityRepositoryImpl =
        PowerMockito.mock(PrivateEntityRepositoryImpl.class);
    final ArrayList arrayList = new ArrayList();
    final Method getDefinitionsMethod =
        DTUMemberMatcher.method(PrivateEntityRepositoryImpl.class, "getDefinitions", String.class);
    PowerMockito.doReturn(arrayList)
        .when(privateEntityRepositoryImpl, getDefinitionsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "privateEntityRepositoryImpl", privateEntityRepositoryImpl);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final String searchToken = "";
    final CreateInputBean inputbean = null;
    final String definition = null;
    final ArrayList<PrivateEntity> privateEntities = new ArrayList<PrivateEntity>();
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(CollectionUtils.class, "isNotEmpty", Collection.class);
    PowerMockito.doReturn(true)
        .when(CollectionUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    thrown.expect(com.firstrain.web.exception.CustomExceptionSuccess.class);
    objectUnderTest.createPrivateEntity(searchToken, inputbean, definition, privateEntities);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(ThreadPoolTaskExecutor.class)
  @Test
  public void getDefinitionInputNullOutputNullPointerException() throws Exception {

    // Arrange
    final PrivateEntityService objectUnderTest =
        (PrivateEntityService)
            Reflector.getInstance("com.firstrain.web.service.core.PrivateEntityService");
    Reflector.setField(objectUnderTest, "searchTokenUtil", null);
    Reflector.setField(objectUnderTest, "privateEntityRepositoryImpl", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Future future = (Future) Reflector.getInstance("java.util.concurrent.Future");
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(future).doReturn(null))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final String searchToken = null;

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getDefinition(searchToken);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEntityBacktestListInputNullOutputNotNull() throws Exception {

    // Arrange
    final PrivateEntityService objectUnderTest = new PrivateEntityService();
    final String searchToken = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.core.PrivateEntityService");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntityBacktestList", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Callable retval = (Callable) methodUnderTest.invoke(objectUnderTest, searchToken);

    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "searchTokenUtil"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "privateEntityRepositoryImpl"));
    assertNull(((PrivateEntityService) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    assertNull(Reflector.getInstanceField(retval, "val$searchToken"));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(ThreadPoolTaskExecutor.class)
  @Test
  public void promoteInputNullNotNullOutputNullPointerException() throws Exception {

    // Arrange
    final PrivateEntityService objectUnderTest =
        (PrivateEntityService)
            Reflector.getInstance("com.firstrain.web.service.core.PrivateEntityService");
    final SearchTokenUtil searchTokenUtil =
        (SearchTokenUtil) Reflector.getInstance("com.firstrain.web.service.core.SearchTokenUtil");
    Reflector.setField(objectUnderTest, "searchTokenUtil", searchTokenUtil);
    final PrivateEntityRepositoryImpl privateEntityRepositoryImpl =
        (PrivateEntityRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.customapirepository.impl.PrivateEntityRepositoryImpl");
    Reflector.setField(objectUnderTest, "privateEntityRepositoryImpl", privateEntityRepositoryImpl);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Future future1 = (Future) Reflector.getInstance("java.util.concurrent.Future");
    final Future future = (Future) Reflector.getInstance("java.util.concurrent.Future");
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(future).doReturn(future1))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final String searchToken = null;
    final CreateInputBean inputBean =
        (CreateInputBean) Reflector.getInstance("com.firstrain.web.pojo.CreateInputBean");

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.promote(searchToken, inputBean);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(ThreadPoolTaskExecutor.class)
  @Test
  public void updateDefinitionInputNullNullNullNullOutputNullPointerException() throws Exception {

    // Arrange
    final PrivateEntityService objectUnderTest =
        (PrivateEntityService)
            Reflector.getInstance("com.firstrain.web.service.core.PrivateEntityService");
    Reflector.setField(objectUnderTest, "searchTokenUtil", null);
    Reflector.setField(objectUnderTest, "privateEntityRepositoryImpl", null);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        PowerMockito.mock(ThreadPoolTaskExecutor.class);
    final Future future = (Future) Reflector.getInstance("java.util.concurrent.Future");
    final Method submitMethod =
        DTUMemberMatcher.method(ThreadPoolTaskExecutor.class, "submit", Callable.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null).doReturn(future))
        .when(threadPoolTaskExecutor, submitMethod)
        .withArguments(or(isA(Callable.class), isNull(Callable.class)));
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final String searchToken = null;
    final String definition = null;
    final String user = null;
    final String email = null;

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.updateDefinition(searchToken, definition, user, email);

    // Method is not expected to return due to exception thrown
  }
}
