package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertNotNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import java.lang.reflect.Method;
import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrRequest.METHOD;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.request.QueryRequest;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.params.SolrParams;
import org.apache.solr.common.util.NamedList;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class AutoSuggestServiceRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: AutoSuggestServiceRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    AutoSuggestServiceRepositoryImpl.class,
    SolrQuery.class,
    QueryRequest.class,
    NamedList.class,
    QueryResponse.class
  })
  @Test
  public void searchInputNotNullNullNotNullFalseZeroNotNullOutputNotNull() throws Exception {

    // Arrange
    final AutoSuggestServiceRepositoryImpl objectUnderTest = new AutoSuggestServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocSolrServer(solrServer1);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "peopleServer", solrServer2);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer3);
    final SolrServer server =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    final String input = null;
    final String typeCSV = "";
    final boolean link = false;
    final int count = 0;
    final String dimensionCSV = " ";
    final QueryRequest queryRequest = PowerMockito.mock(QueryRequest.class);
    final QueryResponse queryResponse = PowerMockito.mock(QueryResponse.class);
    final NamedList namedList = PowerMockito.mock(NamedList.class);
    final NamedList namedList1 = PowerMockito.mock(NamedList.class);
    final Method getMethod = DTUMemberMatcher.method(NamedList.class, "get", String.class);
    PowerMockito.doReturn(namedList1)
        .when(namedList, getMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method getResponseMethod = DTUMemberMatcher.method(QueryResponse.class, "getResponse");
    PowerMockito.doReturn(namedList).when(queryResponse, getResponseMethod).withNoArguments();
    final Method processMethod =
        DTUMemberMatcher.method(QueryRequest.class, "process", SolrServer.class);
    PowerMockito.doReturn(queryResponse)
        .when(queryRequest, processMethod)
        .withArguments(or(isA(SolrServer.class), isNull(SolrServer.class)));
    PowerMockito.whenNew(QueryRequest.class)
        .withParameterTypes(SolrParams.class, METHOD.class)
        .withArguments(
            or(isA(SolrParams.class), isNull(SolrParams.class)),
            or(isA(METHOD.class), isNull(METHOD.class)))
        .thenReturn(queryRequest);
    final SolrQuery solrQuery = PowerMockito.mock(SolrQuery.class);
    final Method setRowsMethod = DTUMemberMatcher.method(SolrQuery.class, "setRows", Integer.class);
    PowerMockito.doReturn(null)
        .when(solrQuery, setRowsMethod)
        .withArguments(or(isA(Integer.class), isNull(Integer.class)));
    final Method setQueryMethod =
        DTUMemberMatcher.method(SolrQuery.class, "setQuery", String.class);
    PowerMockito.doReturn(null)
        .when(solrQuery, setQueryMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final SolrQuery solrQuery1 = PowerMockito.mock(SolrQuery.class);
    final Method setStartMethod =
        DTUMemberMatcher.method(SolrQuery.class, "setStart", Integer.class);
    PowerMockito.doReturn(solrQuery1)
        .when(solrQuery, setStartMethod)
        .withArguments(or(isA(Integer.class), isNull(Integer.class)));
    final SolrQuery solrQuery2 = PowerMockito.mock(SolrQuery.class);
    final Method setQueryTypeMethod =
        DTUMemberMatcher.method(SolrQuery.class, "setQueryType", String.class);
    PowerMockito.doReturn(solrQuery2)
        .when(solrQuery, setQueryTypeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.whenNew(SolrQuery.class).withNoArguments().thenReturn(solrQuery);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.repository.impl.AutoSuggestServiceRepositoryImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "search",
            Reflector.forName("org.apache.solr.client.solrj.SolrServer"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("boolean"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final NamedList retval =
        (NamedList)
            methodUnderTest.invoke(
                objectUnderTest, server, input, typeCSV, link, count, dimensionCSV);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    AutoSuggestServiceRepositoryImpl.class,
    SolrQuery.class,
    QueryRequest.class,
    NamedList.class,
    QueryResponse.class
  })
  @Test
  public void searchInputNotNullNullNotNullFalseZeroNullOutputNotNull() throws Exception {

    // Arrange
    final AutoSuggestServiceRepositoryImpl objectUnderTest = new AutoSuggestServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocSolrServer(solrServer1);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "peopleServer", solrServer2);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer3);
    final SolrServer server =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    final String input = null;
    final String typeCSV = "       ";
    final boolean link = false;
    final int count = 0;
    final String dimensionCSV = null;
    final QueryRequest queryRequest = PowerMockito.mock(QueryRequest.class);
    final QueryResponse queryResponse = PowerMockito.mock(QueryResponse.class);
    final NamedList namedList = PowerMockito.mock(NamedList.class);
    final NamedList namedList1 = PowerMockito.mock(NamedList.class);
    final Method getMethod = DTUMemberMatcher.method(NamedList.class, "get", String.class);
    PowerMockito.doReturn(namedList1)
        .when(namedList, getMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method getResponseMethod = DTUMemberMatcher.method(QueryResponse.class, "getResponse");
    PowerMockito.doReturn(namedList).when(queryResponse, getResponseMethod).withNoArguments();
    final Method processMethod =
        DTUMemberMatcher.method(QueryRequest.class, "process", SolrServer.class);
    PowerMockito.doReturn(queryResponse)
        .when(queryRequest, processMethod)
        .withArguments(or(isA(SolrServer.class), isNull(SolrServer.class)));
    PowerMockito.whenNew(QueryRequest.class)
        .withParameterTypes(SolrParams.class, METHOD.class)
        .withArguments(
            or(isA(SolrParams.class), isNull(SolrParams.class)),
            or(isA(METHOD.class), isNull(METHOD.class)))
        .thenReturn(queryRequest);
    final SolrQuery solrQuery = PowerMockito.mock(SolrQuery.class);
    final Method setRowsMethod = DTUMemberMatcher.method(SolrQuery.class, "setRows", Integer.class);
    PowerMockito.doReturn(null)
        .when(solrQuery, setRowsMethod)
        .withArguments(or(isA(Integer.class), isNull(Integer.class)));
    final Method setQueryMethod =
        DTUMemberMatcher.method(SolrQuery.class, "setQuery", String.class);
    PowerMockito.doReturn(null)
        .when(solrQuery, setQueryMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final SolrQuery solrQuery1 = PowerMockito.mock(SolrQuery.class);
    final Method setStartMethod =
        DTUMemberMatcher.method(SolrQuery.class, "setStart", Integer.class);
    PowerMockito.doReturn(solrQuery1)
        .when(solrQuery, setStartMethod)
        .withArguments(or(isA(Integer.class), isNull(Integer.class)));
    final SolrQuery solrQuery2 = PowerMockito.mock(SolrQuery.class);
    final Method setQueryTypeMethod =
        DTUMemberMatcher.method(SolrQuery.class, "setQueryType", String.class);
    PowerMockito.doReturn(solrQuery2)
        .when(solrQuery, setQueryTypeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.whenNew(SolrQuery.class).withNoArguments().thenReturn(solrQuery);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.repository.impl.AutoSuggestServiceRepositoryImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "search",
            Reflector.forName("org.apache.solr.client.solrj.SolrServer"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("boolean"),
            Reflector.forName("int"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final NamedList retval =
        (NamedList)
            methodUnderTest.invoke(
                objectUnderTest, server, input, typeCSV, link, count, dimensionCSV);

    // Assert
    assertNotNull(retval);
  }
}
