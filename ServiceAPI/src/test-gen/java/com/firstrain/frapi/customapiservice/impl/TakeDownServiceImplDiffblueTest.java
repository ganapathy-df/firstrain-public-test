package com.firstrain.frapi.customapiservice.impl;

import java.lang.reflect.InvocationTargetException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.common.db.jpa.PersistenceProvider;
import com.firstrain.common.db.jpa.Transaction;
import com.firstrain.db.api.TakeDownDbAPI;
import com.firstrain.db.obj.APIArticleTakeDown;
import com.firstrain.frapi.config.ServiceException;
import com.firstrain.frapi.customapirepository.impl.TakeDownRepositoryImpl;
import com.firstrain.obj.IEntityInfo;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.DocEntry;
import com.firstrain.solr.client.SolrSearcher;
import com.firstrain.utils.object.PerfActivityType;
import com.firstrain.utils.object.PerfMonitor;
import com.firstrain.web.pojo.CreateInputBean;
import java.lang.reflect.Method;
import java.util.concurrent.Callable;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class TakeDownServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: TakeDownServiceImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void access$000InputNotNullOutputNull() throws Exception {

    // Arrange
    final TakeDownServiceImpl x0 = new TakeDownServiceImpl();
    Reflector.setField(x0, "takeDownRepositoryImpl", null);
    Reflector.setField(x0, "entityInfoCache", null);
    Reflector.setField(x0, "searcher", null);
    Reflector.setField(x0, "serviceConfig", null);
    Reflector.setField(x0, "LOG", null);
    x0.executorTimeout = 0L;
    x0.taskExecutor = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$000",
            Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl"));
    methodUnderTest.setAccessible(true);
    final SolrSearcher retval = (SolrSearcher) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$100InputNotNullOutputNull() throws Exception {

    // Arrange
    final TakeDownServiceImpl x0 = new TakeDownServiceImpl();
    Reflector.setField(x0, "takeDownRepositoryImpl", null);
    Reflector.setField(x0, "entityInfoCache", null);
    Reflector.setField(x0, "searcher", null);
    Reflector.setField(x0, "serviceConfig", null);
    Reflector.setField(x0, "LOG", null);
    x0.executorTimeout = 0L;
    x0.taskExecutor = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$100",
            Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl"));
    methodUnderTest.setAccessible(true);
    final Logger retval = (Logger) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TakeDownDbAPI.class)
  @Test
  public void access$200InputNotNullZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final TakeDownServiceImpl x0 = new TakeDownServiceImpl();
    final TakeDownRepositoryImpl takeDownRepositoryImpl = new TakeDownRepositoryImpl();
    Reflector.setField(takeDownRepositoryImpl, "LOG", null);
    Reflector.setField(x0, "takeDownRepositoryImpl", takeDownRepositoryImpl);
    Reflector.setField(x0, "entityInfoCache", null);
    Reflector.setField(x0, "searcher", null);
    Reflector.setField(x0, "serviceConfig", null);
    Reflector.setField(x0, "LOG", null);
    x0.executorTimeout = 0L;
    x0.taskExecutor = null;
    final long x1 = 0L;
    final Method fetchSourceIdsCSVByEnterpriseIdMethod =
        DTUMemberMatcher.method(TakeDownDbAPI.class, "fetchSourceIdsCSVByEnterpriseId", long.class);
    PowerMockito.doReturn(null)
        .when(TakeDownDbAPI.class, fetchSourceIdsCSVByEnterpriseIdMethod)
        .withArguments(anyLong());

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$200",
            Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl"),
            Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(null, x0, x1);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, SolrSearcher.class})
  @Test
  public void callOutputNull() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl$1");
    final TakeDownServiceImpl takeDownServiceImpl =
        (TakeDownServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    Reflector.setField(takeDownServiceImpl, "takeDownRepositoryImpl", null);
    Reflector.setField(takeDownServiceImpl, "entityInfoCache", null);
    final SolrSearcher solrSearcher = PowerMockito.mock(SolrSearcher.class);
    final Method fetchMethod = DTUMemberMatcher.method(SolrSearcher.class, "fetch", long[].class);
    PowerMockito.doReturn(null)
        .when(solrSearcher, fetchMethod)
        .withArguments(or(isA(long[].class), isNull(long[].class)));
    Reflector.setField(takeDownServiceImpl, "searcher", solrSearcher);
    Reflector.setField(takeDownServiceImpl, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    arrangeTakeDownServiceImpl(takeDownServiceImpl, logger);
    Reflector.setField(objectUnderTest, "this$0", takeDownServiceImpl);
    Reflector.setField(objectUnderTest, "val$docId", 0L);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl$1");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final DocEntry retval = (DocEntry) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TakeDownDbAPI.class)
  @Test
  public void callOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl$2");
    final TakeDownServiceImpl takeDownServiceImpl = new TakeDownServiceImpl();
    final TakeDownRepositoryImpl takeDownRepositoryImpl = new TakeDownRepositoryImpl();
    Reflector.setField(takeDownRepositoryImpl, "LOG", null);
    Reflector.setField(takeDownServiceImpl, "takeDownRepositoryImpl", takeDownRepositoryImpl);
    Reflector.setField(takeDownServiceImpl, "entityInfoCache", null);
    Reflector.setField(takeDownServiceImpl, "searcher", null);
    Reflector.setField(takeDownServiceImpl, "serviceConfig", null);
    Reflector.setField(takeDownServiceImpl, "LOG", null);
    takeDownServiceImpl.executorTimeout = 0L;
    takeDownServiceImpl.taskExecutor = null;
    Reflector.setField(objectUnderTest, "this$0", takeDownServiceImpl);
    Reflector.setField(objectUnderTest, "val$enterpriseId", 0L);
    final Method fetchSourceIdsCSVByEnterpriseIdMethod =
        DTUMemberMatcher.method(TakeDownDbAPI.class, "fetchSourceIdsCSVByEnterpriseId", long.class);
    PowerMockito.doReturn(null)
        .when(TakeDownDbAPI.class, fetchSourceIdsCSVByEnterpriseIdMethod)
        .withArguments(anyLong());

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl$2");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("call");
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TakeDownDbAPI.class)
  @Test
  public void fetchSourceIdsCSVByEnterpriseIdInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final TakeDownServiceImpl objectUnderTest = new TakeDownServiceImpl();
    final TakeDownRepositoryImpl takeDownRepositoryImpl = new TakeDownRepositoryImpl();
    Reflector.setField(takeDownRepositoryImpl, "LOG", null);
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", takeDownRepositoryImpl);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.executorTimeout = 0L;
    objectUnderTest.taskExecutor = null;
    final long enterpriseId = 0L;
    final Method fetchSourceIdsCSVByEnterpriseIdMethod =
        DTUMemberMatcher.method(TakeDownDbAPI.class, "fetchSourceIdsCSVByEnterpriseId", long.class);
    PowerMockito.doReturn(null)
        .when(TakeDownDbAPI.class, fetchSourceIdsCSVByEnterpriseIdMethod)
        .withArguments(anyLong());

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "fetchSourceIdsCSVByEnterpriseId", Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(objectUnderTest, enterpriseId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDocumentAsyncInputZeroOutputNotNull() throws Exception {

    // Arrange
    final TakeDownServiceImpl objectUnderTest = new TakeDownServiceImpl();
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.executorTimeout = 0L;
    objectUnderTest.taskExecutor = null;
    final long docId = 0L;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getDocumentAsync", Reflector.forName("long"));
    final Callable<Object> retval = doGetSourceIdsAsyncAndAssert(methodUnderTest, objectUnderTest, docId);
    assertEquals(0L, Reflector.getInstanceField(retval, "val$docId"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getSourceIdsAsyncInputZeroOutputNotNull() throws Exception {

    // Arrange
    final TakeDownServiceImpl objectUnderTest = new TakeDownServiceImpl();
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.executorTimeout = 0L;
    objectUnderTest.taskExecutor = null;
    final long enterpriseId = 0L;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getSourceIdsAsync", Reflector.forName("long"));
    final Callable<Object> retval = doGetSourceIdsAsyncAndAssert(methodUnderTest, objectUnderTest, enterpriseId);
    assertEquals(0L, Reflector.getInstanceField(retval, "val$enterpriseId"));
  }

  private Callable<Object> doGetSourceIdsAsyncAndAssert(final Method methodUnderTest, final TakeDownServiceImpl objectUnderTest, final long enterpriseId) throws IllegalAccessException, InvocationTargetException {
    methodUnderTest.setAccessible(true);
    final Callable<Object> retval =
        (Callable<Object>) methodUnderTest.invoke(objectUnderTest, enterpriseId);
    
    // Assert
    assertNotNull(retval);
    assertNotNull(Reflector.getInstanceField(retval, "this$0"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "takeDownRepositoryImpl"));
    assertNull(
        Reflector.getInstanceField(
            Reflector.getInstanceField(retval, "this$0"), "entityInfoCache"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "searcher"));
    assertNull(
        Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "serviceConfig"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "this$0"), "LOG"));
    assertEquals(
        0L, ((TakeDownServiceImpl) Reflector.getInstanceField(retval, "this$0")).executorTimeout);
    assertNull(((TakeDownServiceImpl) Reflector.getInstanceField(retval, "this$0")).taskExecutor);
    return retval;
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void initOutputServiceException() throws Exception {

    // Arrange
    final TakeDownServiceImpl objectUnderTest = new TakeDownServiceImpl();
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.executorTimeout = 0L;
    objectUnderTest.taskExecutor = null;

    // Act
    thrown.expect(ServiceException.class);
    objectUnderTest.init();

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(StringUtils.class)
  @Test
  public void isValidSearchTokenInputNotNullFalseNullOutputFalse() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final TakeDownServiceImpl objectUnderTest = new TakeDownServiceImpl();
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.executorTimeout = 0L;
    objectUnderTest.taskExecutor = null;
    final String searchToken = "!!!!!!";
    final boolean isTopicOnly = false;
    final CreateInputBean inputBean = null;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(true)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Boolean retval = objectUnderTest.isValidSearchToken(searchToken, isTopicOnly, inputBean);

    // Assert
    assertEquals(new Boolean(false), retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(StringUtils.class)
  @Test
  public void isValidSearchTokenInputNotNullFalseNullOutputFalse2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final TakeDownServiceImpl objectUnderTest = new TakeDownServiceImpl();
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    objectUnderTest.executorTimeout = 0L;
    objectUnderTest.taskExecutor = null;
    final String searchToken = "!!!!!!";
    final boolean isTopicOnly = false;
    final CreateInputBean inputBean = null;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Boolean retval = objectUnderTest.isValidSearchToken(searchToken, isTopicOnly, inputBean);

    // Assert
    assertEquals(new Boolean(false), retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, IEntityInfoCache.class, StringUtils.class})
  @Test
  public void isValidSearchTokenInputNotNullFalseNullOutputFalse3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final TakeDownServiceImpl objectUnderTest =
        (TakeDownServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(null)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    arrangeTakeDownServiceImpl(objectUnderTest, logger);
    final String searchToken = "!!!!!!";
    final boolean isTopicOnly = false;
    final CreateInputBean inputBean = null;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Boolean retval = objectUnderTest.isValidSearchToken(searchToken, isTopicOnly, inputBean);

    // Assert
    assertEquals(new Boolean(false), retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, Logger.class, IEntityInfoCache.class, StringUtils.class})
  @Test
  public void isValidSearchTokenInputNotNullFalseNullOutputFalse4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final TakeDownServiceImpl objectUnderTest =
        (TakeDownServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getTypeMethod = DTUMemberMatcher.method(IEntityInfo.class, "getType");
    PowerMockito.doReturn(9).when(iEntityInfo, getTypeMethod).withNoArguments();
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    arrangeTakeDownServiceImpl(objectUnderTest, logger);
    final String searchToken = "!!!!!!";
    final boolean isTopicOnly = false;
    final CreateInputBean inputBean = null;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Boolean retval = objectUnderTest.isValidSearchToken(searchToken, isTopicOnly, inputBean);

    // Assert
    assertEquals(new Boolean(false), retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    CreateInputBean.class,
    IEntityInfo.class,
    IEntityInfoCache.class,
    StringUtils.class
  })
  @Test
  public void isValidSearchTokenInputNotNullTrueNotNullOutputTrue() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final TakeDownServiceImpl objectUnderTest = new TakeDownServiceImpl();
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getTypeMethod = DTUMemberMatcher.method(IEntityInfo.class, "getType");
    PowerMockito.doReturn(771).when(iEntityInfo, getTypeMethod).withNoArguments();
    final Method getNameMethod = DTUMemberMatcher.method(IEntityInfo.class, "getName");
    PowerMockito.doReturn(null).when(iEntityInfo, getNameMethod).withNoArguments();
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    arrangeTakeDownServiceImpl(objectUnderTest, logger);
    final String searchToken = "!!!!!!";
    final boolean isTopicOnly = true;
    final CreateInputBean inputBean = PowerMockito.mock(CreateInputBean.class);
    arrangeAndDoIsValidSearchTokenAndAssert(objectUnderTest, searchToken, isTopicOnly, inputBean);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, Logger.class, IEntityInfoCache.class, StringUtils.class})
  @Test
  public void isValidSearchTokenInputNotNullTrueNullOutputFalse() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final TakeDownServiceImpl objectUnderTest =
        (TakeDownServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.customapiservice.impl.TakeDownServiceImpl");
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getTypeMethod = DTUMemberMatcher.method(IEntityInfo.class, "getType");
    PowerMockito.doReturn(9).when(iEntityInfo, getTypeMethod).withNoArguments();
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    arrangeTakeDownServiceImpl(objectUnderTest, logger);
    final String searchToken = "!!!!!!";
    final boolean isTopicOnly = true;
    final CreateInputBean inputBean = null;
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Boolean retval = objectUnderTest.isValidSearchToken(searchToken, isTopicOnly, inputBean);

    // Assert
    assertEquals(new Boolean(false), retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, IEntityInfoCache.class, StringUtils.class})
  @Test
  public void isValidSearchTokenInputNotNullTrueNullOutputTrue() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final TakeDownServiceImpl objectUnderTest = new TakeDownServiceImpl();
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", null);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getTypeMethod = DTUMemberMatcher.method(IEntityInfo.class, "getType");
    PowerMockito.doReturn(771).when(iEntityInfo, getTypeMethod).withNoArguments();
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    arrangeTakeDownServiceImpl(objectUnderTest, logger);
    final String searchToken = "!!!!!!";
    final boolean isTopicOnly = true;
    final CreateInputBean inputBean = null;
    arrangeAndDoIsValidSearchTokenAndAssert(objectUnderTest, searchToken, isTopicOnly, inputBean);
  }

  private void arrangeAndDoIsValidSearchTokenAndAssert(final TakeDownServiceImpl objectUnderTest, final String searchToken, final boolean isTopicOnly, final CreateInputBean inputBean) throws Exception {
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    final Boolean retval = objectUnderTest.isValidSearchToken(searchToken, isTopicOnly, inputBean);
    
    // Assert
    assertEquals(new Boolean(true), retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Transaction.class, PersistenceProvider.class, PerfMonitor.class,
    TakeDownDbAPI.class, TakeDownRepositoryImpl.class, APIArticleTakeDown.class
  })
  @Test
  public void takeDownContentForcedInputZeroPositiveOutputPositive() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TakeDownDbAPI.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final TakeDownServiceImpl objectUnderTest = new TakeDownServiceImpl();
    final TakeDownRepositoryImpl takeDownRepositoryImpl = new TakeDownRepositoryImpl();
    Reflector.setField(takeDownRepositoryImpl, "LOG", null);
    Reflector.setField(objectUnderTest, "takeDownRepositoryImpl", takeDownRepositoryImpl);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    arrangeTakeDownServiceImpl(objectUnderTest, logger);
    final long enterpriseId = 0L;
    final long docId = 1L;
    final APIArticleTakeDown aPIArticleTakeDown = PowerMockito.mock(APIArticleTakeDown.class);
    PowerMockito.whenNew(APIArticleTakeDown.class).withNoArguments().thenReturn(aPIArticleTakeDown);
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    final Method getTakeDownArticleMethod =
        DTUMemberMatcher.method(TakeDownDbAPI.class, "getTakeDownArticle", long.class);
    PowerMockito.doReturn(null)
        .when(TakeDownDbAPI.class, getTakeDownArticleMethod)
        .withArguments(anyLong());
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final int retval = objectUnderTest.takeDownContentForced(enterpriseId, docId);

    // Assert
    assertEquals(200, retval);
  }

  private void arrangeTakeDownServiceImpl(final TakeDownServiceImpl objectUnderTest, final Logger logger) {
    Reflector.setField(objectUnderTest, "LOG", logger);
    objectUnderTest.executorTimeout = 0L;
    objectUnderTest.taskExecutor = null;
  }
}
