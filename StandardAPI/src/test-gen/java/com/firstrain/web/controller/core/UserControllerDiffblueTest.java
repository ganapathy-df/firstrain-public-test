package com.firstrain.web.controller.core;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.anyLong;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.User;
import com.firstrain.frapi.pojo.UserAPIResponse;
import com.firstrain.frapi.service.MonitorService;
import com.firstrain.frapi.service.UserService;
import com.firstrain.web.service.core.RequestParsingService;
import com.firstrain.web.service.core.ResponseDecoratorService;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class UserControllerDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: UserController */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getTimeZoneInputNotNullOutputNullPointerException() throws Throwable {

    // Arrange
    final UserController objectUnderTest =
        (UserController) Reflector.getInstance("com.firstrain.web.controller.core.UserController");
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    Reflector.setField(objectUnderTest, "timezones", null);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(objectUnderTest, "monitorService", monitorService);
    final RequestParsingService requestParsingService =
        (RequestParsingService)
            Reflector.getInstance("com.firstrain.web.service.core.RequestParsingService");
    Reflector.setField(objectUnderTest, "requestParsingService", requestParsingService);
    final UserService userService =
        (UserService) Reflector.getInstance("com.firstrain.frapi.service.UserService");
    Reflector.setField(objectUnderTest, "userService", userService);
    final String timeZone = "";

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.web.controller.core.UserController");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod("getTimeZone", Reflector.forName("java.lang.String"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, timeZone);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTimeZoneInputNullOutputNull() throws Exception {

    // Arrange
    final UserController objectUnderTest = new UserController();
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    Reflector.setField(objectUnderTest, "timezones", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final UserService userService =
        (UserService) Reflector.getInstance("com.firstrain.frapi.service.UserService");
    Reflector.setField(objectUnderTest, "userService", userService);
    final String timeZone = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.UserController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getTimeZone", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(objectUnderTest, timeZone);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(UserService.class)
  @Test
  public void getUserInputZeroOutputNull() throws Exception {

    // Arrange
    final UserController objectUnderTest = new UserController();
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    Reflector.setField(objectUnderTest, "timezones", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final UserService userService = PowerMockito.mock(UserService.class);
    final Method getUserByIdMethod =
        DTUMemberMatcher.method(UserService.class, "getUserById", long.class);
    PowerMockito.doReturn(null).when(userService, getUserByIdMethod).withArguments(anyLong());
    Reflector.setField(objectUnderTest, "userService", userService);
    final long fruserId = 0L;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.UserController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getUser", Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final User retval = (User) methodUnderTest.invoke(objectUnderTest, fruserId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({UserAPIResponse.class, UserService.class})
  @Test
  public void getUserInputZeroOutputNull2() throws Exception {

    // Arrange
    final UserController objectUnderTest = new UserController();
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    Reflector.setField(objectUnderTest, "timezones", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final UserService userService = PowerMockito.mock(UserService.class);
    final UserAPIResponse userAPIResponse = PowerMockito.mock(UserAPIResponse.class);
    final Method getStatusCodeMethod =
        DTUMemberMatcher.method(UserAPIResponse.class, "getStatusCode");
    PowerMockito.doReturn(0).when(userAPIResponse, getStatusCodeMethod).withNoArguments();
    final Method getUserByIdMethod =
        DTUMemberMatcher.method(UserService.class, "getUserById", long.class);
    PowerMockito.doReturn(userAPIResponse)
        .when(userService, getUserByIdMethod)
        .withArguments(anyLong());
    Reflector.setField(objectUnderTest, "userService", userService);
    final long fruserId = 0L;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.UserController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getUser", Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final User retval = (User) methodUnderTest.invoke(objectUnderTest, fruserId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({UserService.class, UserAPIResponse.class})
  @Test
  public void getUserInputZeroOutputNull3() throws Exception {

    // Arrange
    final UserController objectUnderTest = new UserController();
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    Reflector.setField(objectUnderTest, "timezones", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final UserService userService = PowerMockito.mock(UserService.class);
    final UserAPIResponse userAPIResponse = PowerMockito.mock(UserAPIResponse.class);
    final Method getUserMethod = DTUMemberMatcher.method(UserAPIResponse.class, "getUser");
    PowerMockito.doReturn(null).when(userAPIResponse, getUserMethod).withNoArguments();
    final Method getStatusCodeMethod =
        DTUMemberMatcher.method(UserAPIResponse.class, "getStatusCode");
    PowerMockito.doReturn(200).when(userAPIResponse, getStatusCodeMethod).withNoArguments();
    final Method getUserByIdMethod =
        DTUMemberMatcher.method(UserService.class, "getUserById", long.class);
    PowerMockito.doReturn(userAPIResponse)
        .when(userService, getUserByIdMethod)
        .withArguments(anyLong());
    Reflector.setField(objectUnderTest, "userService", userService);
    final long fruserId = 0L;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.UserController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getUser", Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final User retval = (User) methodUnderTest.invoke(objectUnderTest, fruserId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.frapi.util.DefaultEnums$Status"},
      value = {User.class})
  @Test
  public void isValidActorInputNotNullNullOutputFalse() throws Exception {

    // Arrange
    final UserController objectUnderTest = new UserController();
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    Reflector.setField(objectUnderTest, "timezones", null);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(objectUnderTest, "monitorService", monitorService);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    Reflector.setField(objectUnderTest, "userService", null);
    final User actor = PowerMockito.mock(User.class);
    final Method getFlagsMethod = DTUMemberMatcher.method(User.class, "getFlags");
    PowerMockito.doReturn("????????").when(actor, getFlagsMethod).withNoArguments();
    final User user = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.UserController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "isValidActor",
            Reflector.forName("com.firstrain.frapi.domain.User"),
            Reflector.forName("com.firstrain.frapi.domain.User"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(objectUnderTest, actor, user);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {
        "com.firstrain.frapi.util.DefaultEnums$MembershipType",
        "com.firstrain.frapi.util.DefaultEnums$Status"
      },
      value = {User.class})
  @Test
  public void isValidActorInputNotNullNullOutputFalse2() throws Exception {

    // Arrange
    final UserController objectUnderTest = new UserController();
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    Reflector.setField(objectUnderTest, "timezones", null);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(objectUnderTest, "monitorService", monitorService);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    Reflector.setField(objectUnderTest, "userService", null);
    final User actor = PowerMockito.mock(User.class);
    final Method getMembershipTypeMethod = DTUMemberMatcher.method(User.class, "getMembershipType");
    PowerMockito.doReturn(null).when(actor, getMembershipTypeMethod).withNoArguments();
    final Method getFlagsMethod = DTUMemberMatcher.method(User.class, "getFlags");
    PowerMockito.doReturn("aAAAAAAAA").when(actor, getFlagsMethod).withNoArguments();
    final User user = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.UserController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "isValidActor",
            Reflector.forName("com.firstrain.frapi.domain.User"),
            Reflector.forName("com.firstrain.frapi.domain.User"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(objectUnderTest, actor, user);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void validateEmailInputNotNullOutputFalse() throws Exception {

    // Arrange
    final UserController objectUnderTest = new UserController();
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    Reflector.setField(objectUnderTest, "timezones", null);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(objectUnderTest, "monitorService", monitorService);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    Reflector.setField(objectUnderTest, "userService", null);
    final String email = "     ";

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.UserController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("validateEmail", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(objectUnderTest, email);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void validateEmailInputNullOutputFalse() throws Exception {

    // Arrange
    final UserController objectUnderTest = new UserController();
    final ResponseDecoratorService responseDecoratorService =
        (ResponseDecoratorService)
            Reflector.getInstance("com.firstrain.web.service.core.ResponseDecoratorService");
    Reflector.setField(objectUnderTest, "responseDecoratorService", responseDecoratorService);
    Reflector.setField(objectUnderTest, "timezones", null);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(objectUnderTest, "monitorService", monitorService);
    final RequestParsingService requestParsingService =
        (RequestParsingService)
            Reflector.getInstance("com.firstrain.web.service.core.RequestParsingService");
    Reflector.setField(objectUnderTest, "requestParsingService", requestParsingService);
    Reflector.setField(objectUnderTest, "userService", null);
    final String email = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.UserController");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("validateEmail", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(objectUnderTest, email);

    // Assert
    assertEquals(false, retval);
  }
}
