package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.APIArticleHide;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.RestrictContentRepository;
import com.firstrain.utils.object.PerfActivityType;
import com.firstrain.utils.object.PerfMonitor;
import java.lang.reflect.Method;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class RestrictContentServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: RestrictContentServiceImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({RestrictContentRepository.class, PerfMonitor.class})
  @Test
  public void checkIfHiddenContentInputZeroNullOutputFalse() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final RestrictContentServiceImpl objectUnderTest = new RestrictContentServiceImpl();
    objectUnderTest.executorTimeout = 0L;
    final RestrictContentRepository restrictContentRepository =
        PowerMockito.mock(RestrictContentRepository.class);
    PowerMockito.when(
            restrictContentRepository.getArticle(
                anyLong(), or(isA(String.class), isNull(String.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "restrictContentRepository", restrictContentRepository);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final long enterpriseId = 0L;
    final String articleId = null;
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final boolean retval = objectUnderTest.checkIfHiddenContent(enterpriseId, articleId);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({RestrictContentRepository.class, PerfMonitor.class})
  @Test
  public void checkIfHiddenContentInputZeroNullOutputTrue() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final RestrictContentServiceImpl objectUnderTest = new RestrictContentServiceImpl();
    objectUnderTest.executorTimeout = 0L;
    final RestrictContentRepository restrictContentRepository =
        PowerMockito.mock(RestrictContentRepository.class);
    final APIArticleHide aPIArticleHide =
        (APIArticleHide) Reflector.getInstance("com.firstrain.db.obj.APIArticleHide");
    PowerMockito.when(
            restrictContentRepository.getArticle(
                anyLong(), or(isA(String.class), isNull(String.class))))
        .thenReturn(aPIArticleHide);
    Reflector.setField(objectUnderTest, "restrictContentRepository", restrictContentRepository);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final long enterpriseId = 0L;
    final String articleId = null;
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final boolean retval = objectUnderTest.checkIfHiddenContent(enterpriseId, articleId);

    // Assert
    assertEquals(true, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(RestrictContentRepository.class)
  @Test
  public void getAllHiddenContentInputZeroNullOutputNotNull() throws Exception {

    // Arrange
    final RestrictContentServiceImpl objectUnderTest = new RestrictContentServiceImpl();
    objectUnderTest.executorTimeout = 0L;
    final RestrictContentRepository restrictContentRepository =
        PowerMockito.mock(RestrictContentRepository.class);
    PowerMockito.when(
            restrictContentRepository.getAllHiddenArticles(
                anyLong(), or(isA(String.class), isNull(String.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "restrictContentRepository", restrictContentRepository);
    final ThreadPoolTaskExecutor threadPoolTaskExecutor =
        (ThreadPoolTaskExecutor)
            Reflector.getInstance(
                "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor");
    objectUnderTest.taskExecutor = threadPoolTaskExecutor;
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final long enterpriseId = 0L;
    final String contentPrefix = null;

    // Act
    final String retval = objectUnderTest.getAllHiddenContent(enterpriseId, contentPrefix);

    // Assert
    assertEquals("", retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(PerfMonitor.class)
  @Test
  public void hideContentInputZeroPositiveNotNullOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final RestrictContentServiceImpl objectUnderTest =
        (RestrictContentServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.RestrictContentServiceImpl");
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "restrictContentRepository", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final long userId = 0L;
    final long enterpriseId = 8L;
    final String articleId = "";
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.hideContent(userId, enterpriseId, articleId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, PerfMonitor.class})
  @Test
  public void hideContentInputZeroPositiveNotNullOutputNullPointerException2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final RestrictContentServiceImpl objectUnderTest =
        (RestrictContentServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.RestrictContentServiceImpl");
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "restrictContentRepository", null);
    objectUnderTest.taskExecutor = null;
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final long userId = 0L;
    final long enterpriseId = 8L;
    final String articleId = "";
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.hideContent(userId, enterpriseId, articleId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(PerfMonitor.class)
  @Test
  public void hideContentInputZeroPositiveNullOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final RestrictContentServiceImpl objectUnderTest =
        (RestrictContentServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.RestrictContentServiceImpl");
    objectUnderTest.executorTimeout = 0L;
    Reflector.setField(objectUnderTest, "restrictContentRepository", null);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final long userId = 0L;
    final long enterpriseId = 8L;
    final String articleId = null;
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.hideContent(userId, enterpriseId, articleId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({RestrictContentRepository.class, PerfMonitor.class})
  @Test
  public void hideContentInputZeroZeroNullOutputPositive() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final RestrictContentServiceImpl objectUnderTest = new RestrictContentServiceImpl();
    objectUnderTest.executorTimeout = 0L;
    final RestrictContentRepository restrictContentRepository =
        PowerMockito.mock(RestrictContentRepository.class);
    Reflector.setField(objectUnderTest, "restrictContentRepository", restrictContentRepository);
    objectUnderTest.taskExecutor = null;
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final long userId = 0L;
    final long enterpriseId = 0L;
    final String articleId = null;
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final int retval = objectUnderTest.hideContent(userId, enterpriseId, articleId);

    // Assert
    assertEquals(200, retval);
  }
}
