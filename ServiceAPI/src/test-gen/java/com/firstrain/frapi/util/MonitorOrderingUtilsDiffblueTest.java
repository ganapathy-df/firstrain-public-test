package com.firstrain.frapi.util;

import static org.junit.Assert.assertEquals;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.Tags;
import com.firstrain.db.obj.TagsInfo;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Timestamp;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class MonitorOrderingUtilsDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: MonitorOrderingUtils */
  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputNegative() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$1");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    Reflector.setField(o1, "tag", tags);
    Reflector.setField(o1, "favoriteUserItemId", "7");
    Reflector.setField(o1, "activityTime", null);
    Reflector.setField(o1, "favorite", true);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final Tags tags1 = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    Reflector.setField(o2, "tag", tags1);
    Reflector.setField(o2, "favoriteUserItemId", "2");
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    Reflector.setField(o2, "activityTime", timestamp);
    Reflector.setField(o2, "favorite", false);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$1");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.db.obj.TagsInfo"),
            Reflector.forName("com.firstrain.db.obj.TagsInfo"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputNegative2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$2");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "favoriteUserItemId", null);
    Reflector.setField(o1, "tag", null);
    Reflector.setField(o1, "activityTime", null);
    Reflector.setField(o1, "favorite", true);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    Reflector.setField(o2, "tag", null);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", false);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.db.obj.TagsInfo"),
            Reflector.forName("com.firstrain.db.obj.TagsInfo"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputNegative3() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$3");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "favoriteUserItemId", null);
    Reflector.setField(o1, "tag", null);
    Reflector.setField(o1, "activityTime", null);
    Reflector.setField(o1, "favorite", true);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    Reflector.setField(o2, "tag", null);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", false);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.db.obj.TagsInfo"),
            Reflector.forName("com.firstrain.db.obj.TagsInfo"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputNullPointerException() throws Throwable {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$1");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "tag", null);
    Reflector.setField(o1, "favoriteUserItemId", "9");
    Reflector.setField(o1, "activityTime", null);
    Reflector.setField(o1, "favorite", true);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    Reflector.setField(o2, "tag", tags);
    Reflector.setField(o2, "favoriteUserItemId", "9");
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", true);

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$1");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "compare",
              Reflector.forName("com.firstrain.db.obj.TagsInfo"),
              Reflector.forName("com.firstrain.db.obj.TagsInfo"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, o1, o2);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputNullPointerException2() throws Throwable {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$1");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "tag", null);
    Reflector.setField(o1, "favoriteUserItemId", "9");
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    Reflector.setField(o1, "activityTime", timestamp);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    Reflector.setField(o2, "tag", tags);
    Reflector.setField(o2, "favoriteUserItemId", "9");
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", false);

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$1");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "compare",
              Reflector.forName("com.firstrain.db.obj.TagsInfo"),
              Reflector.forName("com.firstrain.db.obj.TagsInfo"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, o1, o2);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tags.class)
  @Test
  public void compareInputNotNullNotNullOutputNullPointerException3() throws Throwable {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$1");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getTagNameMethod = DTUMemberMatcher.method(Tags.class, "getTagName");
    PowerMockito.doReturn(null).when(tags, getTagNameMethod).withNoArguments();
    arrangeAndInvokeCompare(o1, objectUnderTest, tags);

    // Method is not expected to return due to exception thrown
  }

  private void arrangeAndInvokeCompare(final TagsInfo o1, final Object objectUnderTest, final Tags tags) throws Throwable {
    Reflector.setField(o1, "tag", tags);
    Reflector.setField(o1, "favoriteUserItemId", "9");
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    Reflector.setField(o1, "activityTime", timestamp);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "tag", null);
    Reflector.setField(o2, "favoriteUserItemId", "9");
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", false);
    
    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$1");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "compare",
              Reflector.forName("com.firstrain.db.obj.TagsInfo"),
              Reflector.forName("com.firstrain.db.obj.TagsInfo"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, o1, o2);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tags.class)
  @Test
  public void compareInputNotNullNotNullOutputNullPointerException4() throws Throwable {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$1");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final TagsInfo o2 = arrangeTagsInfo(o1);

    // Act
    doCompareAndExceptException(o1, o2, objectUnderTest);

    // Method is not expected to return due to exception thrown
  }

  private TagsInfo arrangeTagsInfo(final TagsInfo o1) throws Exception {
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getTagNameMethod = DTUMemberMatcher.method(Tags.class, "getTagName");
    PowerMockito.doReturn(null).when(tags, getTagNameMethod).withNoArguments();
    Reflector.setField(o1, "tag", tags);
    Reflector.setField(o1, "favoriteUserItemId", "9");
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    Reflector.setField(o1, "activityTime", timestamp);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final Tags tags1 = PowerMockito.mock(Tags.class);
    final Method getTagNameMethod1 = DTUMemberMatcher.method(Tags.class, "getTagName");
    PowerMockito.doReturn(null).when(tags1, getTagNameMethod1).withNoArguments();
    Reflector.setField(o2, "tag", tags1);
    Reflector.setField(o2, "favoriteUserItemId", "9");
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", false);
    return o2;
  }

  private void doCompareAndExceptException(final TagsInfo o1, final TagsInfo o2, final Object objectUnderTest) throws Throwable {
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$1");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "compare",
              Reflector.forName("com.firstrain.db.obj.TagsInfo"),
              Reflector.forName("com.firstrain.db.obj.TagsInfo"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, o1, o2);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputNullPointerException5() throws Throwable {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$2");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "favoriteUserItemId", null);
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    Reflector.setField(o1, "tag", tags);
    Reflector.setField(o1, "activityTime", null);
    Reflector.setField(o1, "favorite", true);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    Reflector.setField(o2, "tag", null);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", true);

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$2");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "compare",
              Reflector.forName("com.firstrain.db.obj.TagsInfo"),
              Reflector.forName("com.firstrain.db.obj.TagsInfo"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, o1, o2);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputNullPointerException6() throws Throwable {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$2");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "favoriteUserItemId", null);
    Reflector.setField(o1, "tag", null);
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    Reflector.setField(o1, "activityTime", timestamp);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    Reflector.setField(o2, "tag", null);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", false);

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$2");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "compare",
              Reflector.forName("com.firstrain.db.obj.TagsInfo"),
              Reflector.forName("com.firstrain.db.obj.TagsInfo"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, o1, o2);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tags.class)
  @Test
  public void compareInputNotNullNotNullOutputNullPointerException7() throws Throwable {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$2");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final Tags tags = arrangeTags(o1);
    arrangeDataInvokeCompare(o1, objectUnderTest, tags);

    // Method is not expected to return due to exception thrown
  }

  private void arrangeDataInvokeCompare(final TagsInfo o1, final Object objectUnderTest, final Tags tags) throws Throwable {
    Reflector.setField(o1, "tag", tags);
    final Timestamp timestamp1 = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    Reflector.setField(o1, "activityTime", timestamp1);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    Reflector.setField(o2, "tag", null);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", false);
    
    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$2");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "compare",
              Reflector.forName("com.firstrain.db.obj.TagsInfo"),
              Reflector.forName("com.firstrain.db.obj.TagsInfo"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, o1, o2);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }
  }

  private Tags arrangeTags(final TagsInfo o1) throws Exception {
    Reflector.setField(o1, "favoriteUserItemId", null);
    final Tags tags = PowerMockito.mock(Tags.class);
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    final Method getInsertTimeMethod = DTUMemberMatcher.method(Tags.class, "getInsertTime");
    PowerMockito.doReturn(timestamp).when(tags, getInsertTimeMethod).withNoArguments();
    return tags;
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tags.class)
  @Test
  public void compareInputNotNullNotNullOutputNullPointerException8() throws Throwable {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$2");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "favoriteUserItemId", null);
    final TagsInfo o2 = arrangeTagsInfo2(o1);
    doCompare(o1, o2, objectUnderTest);

    // Method is not expected to return due to exception thrown
  }

  private TagsInfo arrangeTagsInfo2(final TagsInfo o1) throws Exception {
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getInsertTimeMethod = DTUMemberMatcher.method(Tags.class, "getInsertTime");
    PowerMockito.doReturn(null).when(tags, getInsertTimeMethod).withNoArguments();
    Reflector.setField(o1, "tag", tags);
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    Reflector.setField(o1, "activityTime", timestamp);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    final Tags tags1 = PowerMockito.mock(Tags.class);
    final Timestamp timestamp1 = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    final Method getInsertTimeMethod1 = DTUMemberMatcher.method(Tags.class, "getInsertTime");
    PowerMockito.doReturn(timestamp1).when(tags1, getInsertTimeMethod1).withNoArguments();
    Reflector.setField(o2, "tag", tags1);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", false);
    
    // Act
    thrown.expect(NullPointerException.class);
    return o2;
  }

  private void doCompare(final TagsInfo o1, final TagsInfo o2, final Object objectUnderTest) throws Throwable {
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$2");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "compare",
              Reflector.forName("com.firstrain.db.obj.TagsInfo"),
              Reflector.forName("com.firstrain.db.obj.TagsInfo"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, o1, o2);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputNullPointerException9() throws Throwable {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$3");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "favoriteUserItemId", "");
    Reflector.setField(o1, "tag", null);
    Reflector.setField(o1, "activityTime", null);
    Reflector.setField(o1, "favorite", true);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    Reflector.setField(o2, "tag", null);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", true);

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$3");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "compare",
              Reflector.forName("com.firstrain.db.obj.TagsInfo"),
              Reflector.forName("com.firstrain.db.obj.TagsInfo"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, o1, o2);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputPositive() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$1");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    Reflector.setField(o1, "tag", tags);
    Reflector.setField(o1, "favoriteUserItemId", "7");
    Reflector.setField(o1, "activityTime", null);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final Tags tags1 = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    Reflector.setField(o2, "tag", tags1);
    Reflector.setField(o2, "favoriteUserItemId", "2");
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    Reflector.setField(o2, "activityTime", timestamp);
    Reflector.setField(o2, "favorite", true);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$1");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.db.obj.TagsInfo"),
            Reflector.forName("com.firstrain.db.obj.TagsInfo"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputPositive2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$2");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "favoriteUserItemId", null);
    Reflector.setField(o1, "tag", null);
    Reflector.setField(o1, "activityTime", null);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    Reflector.setField(o2, "tag", null);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", true);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.db.obj.TagsInfo"),
            Reflector.forName("com.firstrain.db.obj.TagsInfo"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputPositive3() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$3");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o1, "favoriteUserItemId", null);
    Reflector.setField(o1, "tag", null);
    Reflector.setField(o1, "activityTime", null);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    Reflector.setField(o2, "tag", null);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", true);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.db.obj.TagsInfo"),
            Reflector.forName("com.firstrain.db.obj.TagsInfo"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tags.class)
  @Test
  public void compareInputNotNullNotNullOutputPositive4() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorOrderingUtils$3");
    final TagsInfo o1 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    final TagsInfo o2 = arrangeTagsInfo3(o1);

    // Act
    doCompareAndAssert(o1, o2, objectUnderTest);
  }

  private TagsInfo arrangeTagsInfo3(final TagsInfo o1) throws Exception {
    Reflector.setField(o1, "favoriteUserItemId", null);
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getOrderMethod = DTUMemberMatcher.method(Tags.class, "getOrder");
    PowerMockito.doReturn(1).when(tags, getOrderMethod).withNoArguments();
    Reflector.setField(o1, "tag", tags);
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    Reflector.setField(o1, "activityTime", timestamp);
    Reflector.setField(o1, "favorite", false);
    final TagsInfo o2 = (TagsInfo) Reflector.getInstance("com.firstrain.db.obj.TagsInfo");
    Reflector.setField(o2, "favoriteUserItemId", null);
    final Tags tags1 = PowerMockito.mock(Tags.class);
    final Method getOrderMethod1 = DTUMemberMatcher.method(Tags.class, "getOrder");
    PowerMockito.doReturn(0).when(tags1, getOrderMethod1).withNoArguments();
    Reflector.setField(o2, "tag", tags1);
    Reflector.setField(o2, "activityTime", null);
    Reflector.setField(o2, "favorite", false);
    return o2;
  }

  private void doCompareAndAssert(final TagsInfo o1, final TagsInfo o2, final Object objectUnderTest) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorOrderingUtils$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.db.obj.TagsInfo"),
            Reflector.forName("com.firstrain.db.obj.TagsInfo"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);
    
    // Assert
    assertEquals(1, retval);
  }
}
