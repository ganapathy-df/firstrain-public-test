/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 15:53:09 GMT 2018
 */

package com.firstrain.web.controller.core;

import static org.evosuite.shaded.org.mockito.Mockito.mock;

import com.firstrain.frapi.customapirepository.impl.EntityBackTestRepositoryImpl;
import com.firstrain.frapi.customapirepository.impl.PrivateEntityRepositoryImpl;
import com.firstrain.web.service.core.EntiyBackTestService;
import com.firstrain.web.service.core.HttpClientService;
import com.firstrain.web.service.core.PrivateEntityService;
import com.firstrain.web.service.core.SearchTokenUtil;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.params.HostParams;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

public class PrivateEntityControllerESTest {

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test0() {
		PrivateEntityController privateEntityController0 = new PrivateEntityController();
		HttpClientService httpClientService0 = setupDataCreateHttpClientService(privateEntityController0);
		HttpClient httpClient0 = new HttpClient();
		HttpServletRequestWrapper httpServletRequestWrapper0 = arrangeData(httpClientService0, httpClient0, privateEntityController0); 
		// Undeclared exception!
		privateEntityController0.lookupDefinition(
				httpServletRequestWrapper0, null, "tf", "6v5%kGHCRAWco8`i");
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test1() {
		PrivateEntityController privateEntityController0 = new PrivateEntityController();
		HttpClientService httpClientService0 = setupDataCreateHttpClientService(privateEntityController0);
		HttpClient httpClient0 = new HttpClient();
		HttpServletRequestWrapper httpServletRequestWrapper0 = arrangeData(httpClientService0, httpClient0, privateEntityController0); 
		// Undeclared exception!
		privateEntityController0.list(httpServletRequestWrapper0, "i0RodLR#d");
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test2() {
		PrivateEntityController privateEntityController0 = new PrivateEntityController();
		HttpClientService httpClientService0 = setupDataCreateHttpClientService(privateEntityController0);
		HttpClientParams httpClientParams0 = new HttpClientParams();
		MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager0 =
				new MultiThreadedHttpConnectionManager();
		HttpClient httpClient0 = new HttpClient(httpClientParams0,
				multiThreadedHttpConnectionManager0);
		HttpServletRequestWrapper httpServletRequestWrapper0 = arrangeData(httpClientService0, httpClient0, privateEntityController0); 
		// Undeclared exception!
		privateEntityController0.backtestSubmit(
				httpServletRequestWrapper0, "http.connection-manager.class", "oo8");
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test3() {
		PrivateEntityController privateEntityController0 = new PrivateEntityController();
		HttpClientService httpClientService0 = setupDataCreateHttpClientService(privateEntityController0);
		HostParams hostParams0 = new HostParams();
		HttpClientParams httpClientParams0 = new HttpClientParams(hostParams0);
		HttpClient httpClient0 = new HttpClient(httpClientParams0);
		HttpServletRequestWrapper httpServletRequestWrapper0 = arrangeData(httpClientService0, httpClient0, privateEntityController0); 
		// Undeclared exception!
		privateEntityController0.backtestKill(
				httpServletRequestWrapper0, "http.protocol.reject-head-body", (-3518L));
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test4() {
		PrivateEntityController privateEntityController0 = new PrivateEntityController();
		HttpClientService httpClientService0 = setupDataCreateHttpClientService(privateEntityController0);
		HttpClientParams httpClientParams0 = new HttpClientParams();
		MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager0 =
				new MultiThreadedHttpConnectionManager();
		HttpClient httpClient0 = new HttpClient(httpClientParams0,
				multiThreadedHttpConnectionManager0);
		HttpServletRequestWrapper httpServletRequestWrapper0 = arrangeData(httpClientService0, httpClient0, privateEntityController0); 
		// Undeclared exception!
		privateEntityController0.backtestCheck(httpServletRequestWrapper0, null, 1L);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test5() {
		PrivateEntityController privateEntityController0 = new PrivateEntityController();
		HttpClientService httpClientService0 = setupDataCreateHttpClientService(privateEntityController0);
		HttpClient httpClient0 = new HttpClient();
		HttpServletRequestWrapper httpServletRequestWrapper0 = arrangeData(httpClientService0, httpClient0, privateEntityController0); 
		// Undeclared exception!
		privateEntityController0.getDefinition(
				httpServletRequestWrapper0,
				"); no one-double/Double-arg constructor/factory method",
				"); no one-double/Double-arg constructor/factory method");
	}

	private HttpClientService setupDataCreateHttpClientService(final PrivateEntityController privateEntityController0) {
		EntiyBackTestService entiyBackTestService0 = new EntiyBackTestService();
		EntityBackTestRepositoryImpl entityBackTestRepositoryImpl0 = new EntityBackTestRepositoryImpl();
		Injector.inject(
				entiyBackTestService0,
				com.firstrain.web.service.core.EntiyBackTestService.class,
				"entityBackTestRepositoryImpl",
				entityBackTestRepositoryImpl0);
		Injector.validateBean(entiyBackTestService0,
				com.firstrain.web.service.core.EntiyBackTestService.class);
		Injector.inject(
				privateEntityController0,
				com.firstrain.web.controller.core.PrivateEntityController.class,
				"entityBackTestService",
				entiyBackTestService0);
		HttpClientService httpClientService0 = new HttpClientService();
		return httpClientService0;
	}
 
	private HttpServletRequestWrapper arrangeData(final HttpClientService httpClientService0, final HttpClient httpClient0, final PrivateEntityController privateEntityController0) { 
		Injector.inject( 
				httpClientService0, com.firstrain.web.service.core.HttpClientService.class, 
				"httpClient", 
				httpClient0); 
		Injector.validateBean(httpClientService0, 
				com.firstrain.web.service.core.HttpClientService.class); 
		Injector.inject( 
				privateEntityController0, 
				com.firstrain.web.controller.core.PrivateEntityController.class, 
				"httpClientService", 
				httpClientService0); 
		PrivateEntityService privateEntityService0 = new PrivateEntityService(); 
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl(); 
		Injector.inject( 
				privateEntityService0, 
				com.firstrain.web.service.core.PrivateEntityService.class, 
				"privateEntityRepositoryImpl", 
				privateEntityRepositoryImpl0); 
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class, 
				new ViolatedAssumptionAnswer()); 
		Injector.inject( 
				privateEntityService0, 
				com.firstrain.web.service.core.PrivateEntityService.class, 
				"searchTokenUtil", 
				searchTokenUtil0); 
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor(); 
		Injector.inject( 
				privateEntityService0, 
				com.firstrain.web.service.core.PrivateEntityService.class, 
				"taskExecutor", 
				threadPoolTaskExecutor0); 
		Injector.validateBean(privateEntityService0, 
				com.firstrain.web.service.core.PrivateEntityService.class); 
		Injector.inject( 
				privateEntityController0, 
				com.firstrain.web.controller.core.PrivateEntityController.class, 
				"privateEntityService", 
				privateEntityService0); 
		HttpServletRequest httpServletRequest0 = 
				mock(HttpServletRequest.class, new ViolatedAssumptionAnswer()); 
		HttpServletRequestWrapper httpServletRequestWrapper0 = 
				new HttpServletRequestWrapper(httpServletRequest0); 
		return httpServletRequestWrapper0; 
	} 
}
