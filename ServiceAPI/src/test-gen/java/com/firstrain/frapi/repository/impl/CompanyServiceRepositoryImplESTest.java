/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:49:02 GMT 2018
 */

package com.firstrain.frapi.repository.impl;

import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertNull;

import com.firstrain.frapi.domain.ManagementChange;
import com.firstrain.frapi.domain.MgmtTurnoverData;
import com.firstrain.frapi.obj.MgmtTurnoverServiceSpec;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.solr.client.DistributedSolrSearcher;
import com.firstrain.solr.client.SearchSpec;
import com.firstrain.solr.client.SolrSearcher;
import com.firstrain.utils.MgmtChangeType;
import java.util.List;
import org.apache.commons.httpclient.params.HostParams;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class CompanyServiceRepositoryImplESTest {

	@Test(timeout = 4000, expected = Exception.class)
	public void test00() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		DistributedSolrSearcher.DistributedSearchConfig distributedSolrSearcher_DistributedSearchConfig0 = null;
		HostParams hostParams0 = new HostParams();
		HttpClientParams httpClientParams0 = new HttpClientParams(hostParams0);
		MgmtTurnoverData mgmtTurnoverData0 = new MgmtTurnoverData();
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec();
		companyServiceRepositoryImpl0
				.getMgmtTurnoverMonthlySummary(mgmtTurnoverData0, (-1880), mgmtTurnoverServiceSpec0);
	}

	@Test(timeout = 4000)
	public void test01() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		SearchSpec searchSpec0 = new SearchSpec();
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec(searchSpec0);
		mgmtTurnoverServiceSpec0.setDetails(false);
		List<ManagementChange> list0 = companyServiceRepositoryImpl0
				.getMgmtTurnoverDetails(null, mgmtTurnoverServiceSpec0);
		assertNull(list0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test02() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		companyServiceRepositoryImpl0.getMatchedCompanyForQ("VP@");
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test03() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		companyServiceRepositoryImpl0.getCompetitorCatIdsFromSolr(7);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test04() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		companyServiceRepositoryImpl0.getCompanySolrDocsForQuery("en");
	}

	@Test(timeout = 4000, expected = Exception.class)
	public void test05() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		companyServiceRepositoryImpl0.getCompanySolrDocsForQuery("");
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		DistributedSolrSearcher.DistributedSearchConfig distributedSolrSearcher_DistributedSearchConfig0 = mock(
				DistributedSolrSearcher.DistributedSearchConfig.class, new ViolatedAssumptionAnswer());
		SolrSearcher solrSearcher0 = new SolrSearcher();
		solrSearcher0.getEntitySolrServer();
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test06() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		DistributedSolrSearcher.DistributedSearchConfig distributedSolrSearcher_DistributedSearchConfig0 = mock(
				DistributedSolrSearcher.DistributedSearchConfig.class, new ViolatedAssumptionAnswer());
		SolrSearcher solrSearcher0 = new SolrSearcher();
		// Undeclared exception!
		companyServiceRepositoryImpl0.getCompanyInfoFromIndex("dnbCompanyId");
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test07() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		companyServiceRepositoryImpl0.getCompanyDetailsFromCompanyIds("Uh>zUfTClJsq", (-1050));
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test08() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		SearchSpec searchSpec0 = new SearchSpec();
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec(searchSpec0);
		MgmtChangeType[] mgmtChangeTypeArray0 = new MgmtChangeType[8];
		MgmtChangeType mgmtChangeType0 = MgmtChangeType.DEPARTURE;
		mgmtChangeTypeArray0[0] = mgmtChangeType0;
		MgmtChangeType mgmtChangeType1 = MgmtChangeType.HIRE;
		mgmtChangeTypeArray0[1] = mgmtChangeType1;
		mgmtChangeTypeArray0[2] = mgmtChangeTypeArray0[1];
		mgmtChangeTypeArray0[3] = mgmtChangeTypeArray0[1];
		mgmtChangeTypeArray0[4] = mgmtChangeType0;
		MgmtChangeType mgmtChangeType2 = MgmtChangeType.INTERNALMOVE;
		mgmtChangeTypeArray0[5] = mgmtChangeType2;
		mgmtTurnoverServiceSpec0.changeTypes = mgmtChangeTypeArray0;
		// Undeclared exception!
		companyServiceRepositoryImpl0
				.getMgmtTurnoverDetails(null, mgmtTurnoverServiceSpec0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test09() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		SearchSpec searchSpec0 = new SearchSpec();
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec(searchSpec0);
		MgmtChangeType[] mgmtChangeTypeArray0 = new MgmtChangeType[0];
		mgmtTurnoverServiceSpec0.changeTypes = mgmtChangeTypeArray0;
		// Undeclared exception!
		companyServiceRepositoryImpl0
				.getMgmtTurnoverDetails(null, mgmtTurnoverServiceSpec0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test10() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		SearchSpec searchSpec0 = new SearchSpec();
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec(searchSpec0);
		// Undeclared exception!
		companyServiceRepositoryImpl0
				.getMgmtTurnoverDetails(null, mgmtTurnoverServiceSpec0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test11() throws Exception {
		CompanyServiceRepositoryImpl companyServiceRepositoryImpl0 = new CompanyServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceRepositoryImpl0,
        com.firstrain.frapi.repository.impl.CompanyServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		companyServiceRepositoryImpl0.getBLVsCompetitorsCatIdsFromSolr((-1368), null);
	}
}
