package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.Document;
import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import com.firstrain.frapi.pojo.wrapper.EventSet;
import com.firstrain.frapi.pojo.wrapper.TweetSet;
import com.firstrain.frapi.util.DateBucketUtils;
import com.firstrain.utils.TitleUtils;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class EntityProcessingServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EntityProcessingServiceImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Document.class)
  @Test
  public void addIdToFilingsInputNotNullOutputNotNull() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final Document docFiling = PowerMockito.mock(Document.class);
    final Method getTitleMethod = DTUMemberMatcher.method(Document.class, "getTitle");
    PowerMockito.doReturn("").when(docFiling, getTitleMethod).withNoArguments();
    final Method getIdMethod = DTUMemberMatcher.method(Document.class, "getId");
    PowerMockito.doReturn("").when(docFiling, getIdMethod).withNoArguments();
    final Method getSecFormTypeMethod = DTUMemberMatcher.method(Document.class, "getSecFormType");
    PowerMockito.doReturn(null).when(docFiling, getSecFormTypeMethod).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityProcessingServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "addIdToFilings", Reflector.forName("com.firstrain.frapi.domain.Document"));
    methodUnderTest.setAccessible(true);
    final Document retval = (Document) methodUnderTest.invoke(objectUnderTest, docFiling);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TitleUtils.class, Document.class})
  @Test
  public void addIdToFilingsInputNotNullOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TitleUtils.class);

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final Document docFiling = PowerMockito.mock(Document.class);
    final Method getTitleMethod = DTUMemberMatcher.method(Document.class, "getTitle");
    PowerMockito.doReturn("").when(docFiling, getTitleMethod).withNoArguments();
    final Method getIdMethod = DTUMemberMatcher.method(Document.class, "getId");
    PowerMockito.doReturn("").when(docFiling, getIdMethod).withNoArguments();
    final Method getSecFormTypeMethod = DTUMemberMatcher.method(Document.class, "getSecFormType");
    PowerMockito.doReturn("").when(docFiling, getSecFormTypeMethod).withNoArguments();
    final Method getSecTitleMethod =
        DTUMemberMatcher.method(
            TitleUtils.class, "getSecTitle", String.class, String.class, String.class);
    PowerMockito.doReturn("")
        .when(TitleUtils.class, getSecTitleMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityProcessingServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "addIdToFilings", Reflector.forName("com.firstrain.frapi.domain.Document"));
    methodUnderTest.setAccessible(true);
    final Document retval = (Document) methodUnderTest.invoke(objectUnderTest, docFiling);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, Document.class})
  @Test
  public void addIdToFilingsInputNotNullOutputNotNull3() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest =
        (EntityProcessingServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.EntityProcessingServiceImpl");
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final Document docFiling = PowerMockito.mock(Document.class);
    final Method getIdMethod = DTUMemberMatcher.method(Document.class, "getId");
    PowerMockito.doReturn(null).when(docFiling, getIdMethod).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityProcessingServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "addIdToFilings", Reflector.forName("com.firstrain.frapi.domain.Document"));
    methodUnderTest.setAccessible(true);
    final Document retval = (Document) methodUnderTest.invoke(objectUnderTest, docFiling);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void addIdToFilingsInputNullOutputNull() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final Document docFiling = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.EntityProcessingServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "addIdToFilings", Reflector.forName("com.firstrain.frapi.domain.Document"));
    methodUnderTest.setAccessible(true);
    final Document retval = (Document) methodUnderTest.invoke(objectUnderTest, docFiling);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(DocumentSet.class)
  @Test
  public void getDocumentSetWithIdInputNotNullOutputNotNull() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    final Method getDocumentsMethod = DTUMemberMatcher.method(DocumentSet.class, "getDocuments");
    PowerMockito.doReturn(null).when(documentSet, getDocumentsMethod).withNoArguments();
    final Method isFilingMethod = DTUMemberMatcher.method(DocumentSet.class, "isFiling");
    PowerMockito.doReturn(false).when(documentSet, isFilingMethod).withNoArguments();
    final Method getDocumentBucketMethod =
        DTUMemberMatcher.method(DocumentSet.class, "getDocumentBucket");
    PowerMockito.doReturn(null).when(documentSet, getDocumentBucketMethod).withNoArguments();

    // Act
    final DocumentSet retval = objectUnderTest.getDocumentSetWithId(documentSet);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(DocumentSet.class)
  @Test
  public void getDocumentSetWithIdInputNotNullOutputNotNull2() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final DocumentSet documentSet = PowerMockito.mock(DocumentSet.class);
    final Method isFilingMethod = DTUMemberMatcher.method(DocumentSet.class, "isFiling");
    PowerMockito.doReturn(true).when(documentSet, isFilingMethod).withNoArguments();
    final Method getDocumentsMethod = DTUMemberMatcher.method(DocumentSet.class, "getDocuments");
    PowerMockito.doReturn(null).when(documentSet, getDocumentsMethod).withNoArguments();

    // Act
    final DocumentSet retval = objectUnderTest.getDocumentSetWithId(documentSet);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDocumentSetWithIdInputNullOutputNull() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final DocumentSet documentSet = null;

    // Act
    final DocumentSet retval = objectUnderTest.getDocumentSetWithId(documentSet);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EventSet.class)
  @Test
  public void getEventSetWithIdInputNotNullOutputNotNull() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    Reflector.setField(objectUnderTest, "LOG", null);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    final Method getEventsMethod = DTUMemberMatcher.method(EventSet.class, "getEvents");
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(eventSet, getEventsMethod)
        .withNoArguments();
    final HashMap hashMap = new HashMap();
    final Method getEventBucketsMethod = DTUMemberMatcher.method(EventSet.class, "getEventBuckets");
    ((PowerMockitoStubber) PowerMockito.doReturn(hashMap).doReturn(null))
        .when(eventSet, getEventBucketsMethod)
        .withNoArguments();

    // Act
    final EventSet retval = objectUnderTest.getEventSetWithId(eventSet);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EventSet.class)
  @Test
  public void getEventSetWithIdInputNotNullOutputNotNull2() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    final ArrayList arrayList = new ArrayList();
    final Method getEventsMethod = DTUMemberMatcher.method(EventSet.class, "getEvents");
    ((PowerMockitoStubber) PowerMockito.doReturn(arrayList).doReturn(null))
        .when(eventSet, getEventsMethod)
        .withNoArguments();
    final Method getEventBucketsMethod = DTUMemberMatcher.method(EventSet.class, "getEventBuckets");
    PowerMockito.doReturn(null).when(eventSet, getEventBucketsMethod).withNoArguments();

    // Act
    final EventSet retval = objectUnderTest.getEventSetWithId(eventSet);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EventSet.class)
  @Test
  public void getEventSetWithIdInputNotNullOutputNull() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    Reflector.setField(objectUnderTest, "LOG", null);
    final EventSet eventSet = PowerMockito.mock(EventSet.class);
    final Method getEventsMethod = DTUMemberMatcher.method(EventSet.class, "getEvents");
    PowerMockito.doReturn(null).when(eventSet, getEventsMethod).withNoArguments();
    final Method getEventBucketsMethod = DTUMemberMatcher.method(EventSet.class, "getEventBuckets");
    PowerMockito.doReturn(null).when(eventSet, getEventBucketsMethod).withNoArguments();

    // Act
    final EventSet retval = objectUnderTest.getEventSetWithId(eventSet);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEventSetWithIdInputNullOutputNull() {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    Reflector.setField(objectUnderTest, "LOG", null);
    final EventSet eventSet = null;

    // Act
    final EventSet retval = objectUnderTest.getEventSetWithId(eventSet);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TweetSet.class)
  @Test
  public void getTweetsWithIdInputNotNullOutputNotNull() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    final Method getTweetsMethod = DTUMemberMatcher.method(TweetSet.class, "getTweets");
    PowerMockito.doReturn(null).when(tweetSet, getTweetsMethod).withNoArguments();
    final Method getBucketedTweetsMethod =
        DTUMemberMatcher.method(TweetSet.class, "getBucketedTweets");
    PowerMockito.doReturn(null).when(tweetSet, getBucketedTweetsMethod).withNoArguments();

    // Act
    final TweetSet retval = objectUnderTest.getTweetsWithId(tweetSet);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTweetsWithIdInputNullOutputNull() throws Exception {

    // Arrange
    final EntityProcessingServiceImpl objectUnderTest = new EntityProcessingServiceImpl();
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final TweetSet tweetSet = null;

    // Act
    final TweetSet retval = objectUnderTest.getTweetsWithId(tweetSet);

    // Assert
    assertNull(retval);
  }
}
