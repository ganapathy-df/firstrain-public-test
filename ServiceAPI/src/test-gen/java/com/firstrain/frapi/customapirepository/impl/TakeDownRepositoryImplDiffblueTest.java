package com.firstrain.frapi.customapirepository.impl;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.common.db.jpa.PersistenceProvider;
import com.firstrain.db.api.TakeDownDbAPI;
import com.firstrain.db.obj.APIArticleTakeDown;
import java.lang.reflect.Method;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class TakeDownRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: TakeDownRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TakeDownDbAPI.class)
  @Test
  public void fetchSourceIdsCSVByEnterpriseIdInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final TakeDownRepositoryImpl objectUnderTest = new TakeDownRepositoryImpl();
    Reflector.setField(objectUnderTest, "LOG", null);
    final long enterpriseId = 0L;
    final Method fetchSourceIdsCSVByEnterpriseIdMethod =
        DTUMemberMatcher.method(TakeDownDbAPI.class, "fetchSourceIdsCSVByEnterpriseId", long.class);
    PowerMockito.doReturn(null)
        .when(TakeDownDbAPI.class, fetchSourceIdsCSVByEnterpriseIdMethod)
        .withArguments(anyLong());

    // Act
    final String retval = objectUnderTest.fetchSourceIdsCSVByEnterpriseId(enterpriseId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TakeDownDbAPI.class)
  @Test
  public void getTakeDownArticleInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final TakeDownRepositoryImpl objectUnderTest = new TakeDownRepositoryImpl();
    Reflector.setField(objectUnderTest, "LOG", null);
    final long articleId = 0L;
    final Method getTakeDownArticleMethod =
        DTUMemberMatcher.method(TakeDownDbAPI.class, "getTakeDownArticle", long.class);
    PowerMockito.doReturn(null)
        .when(TakeDownDbAPI.class, getTakeDownArticleMethod)
        .withArguments(anyLong());

    // Act
    final APIArticleTakeDown retval = objectUnderTest.getTakeDownArticle(articleId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    PersistenceProvider.class,
    APIArticleTakeDown.class,
    TakeDownDbAPI.class,
    TakeDownRepositoryImpl.class
  })
  @Test
  public void persistTakeDownArticleInputZeroOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final TakeDownRepositoryImpl objectUnderTest =
        (TakeDownRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.customapirepository.impl.TakeDownRepositoryImpl");
    Reflector.setField(objectUnderTest, "LOG", null);
    testTakeDown(objectUnderTest);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    TakeDownRepositoryImpl.class,
    TakeDownDbAPI.class,
    APIArticleTakeDown.class,
    Logger.class,
    PersistenceProvider.class
  })
  @Test
  public void persistTakeDownArticleInputZeroOutputNullPointerException2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final TakeDownRepositoryImpl objectUnderTest =
        (TakeDownRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.customapirepository.impl.TakeDownRepositoryImpl");
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    testTakeDown(objectUnderTest);

    // Method is not expected to return due to exception thrown
  }

  private void testTakeDown(final TakeDownRepositoryImpl objectUnderTest) throws Exception {
    final long articleId = 0L;
    final APIArticleTakeDown aPIArticleTakeDown = PowerMockito.mock(APIArticleTakeDown.class);
    PowerMockito.whenNew(APIArticleTakeDown.class).withNoArguments().thenReturn(aPIArticleTakeDown);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.persistTakeDownArticle(articleId);
  }
}
