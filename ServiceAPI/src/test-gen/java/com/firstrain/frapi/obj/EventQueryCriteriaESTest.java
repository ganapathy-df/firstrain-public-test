/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:35:42 GMT 2018
 */

package com.firstrain.frapi.obj;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.Date;
import java.util.List;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.Test;


public class EventQueryCriteriaESTest {

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test00() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = null;
		eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(300, 2884);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test01() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = null;
		eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange((-895), (-895));
	}

	@Test(timeout = 4000)
	public void test02() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				101, 205);
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 114,
				eventQueryCriteria_EventTypeRange0);
		eventQueryCriteria0.setStart(0);
		assertEquals(205, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertEquals(101, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertEquals(114, eventQueryCriteria0.getDays());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(0, eventQueryCriteria0.getStart());
	}

	@Test(timeout = 4000)
	public void test03() throws Exception {
		int[] intArray0 = new int[3];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
        null, (-498), true);
		eventQueryCriteria0.setNoOfEvents((-179));
		assertEquals((-179), eventQueryCriteria0.getNoOfEvents());
	}

	@Test(timeout = 4000)
	public void test04() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				101, 205);
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 114,
				eventQueryCriteria_EventTypeRange0);
		eventQueryCriteria0.setExcludedEventTypeIds(null, false);
		assertEquals(114, eventQueryCriteria0.getDays());
		assertEquals(101, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(205, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
	}

	@Test(timeout = 4000)
	public void test05() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				101, 205);
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 114,
				eventQueryCriteria_EventTypeRange0);
		eventQueryCriteria0.setExcludedEventTypeIds(null, true);
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(205, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertEquals(101, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertEquals(114, eventQueryCriteria0.getDays());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
	}

	@Test(timeout = 4000)
	public void test06() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				101, 205);
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 114,
				eventQueryCriteria_EventTypeRange0);
		eventQueryCriteria0.setExcludedCatIds(intArray0);
		assertEquals(114, eventQueryCriteria0.getDays());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(101, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(205, eventQueryCriteria_EventTypeRange0.getEndEventType());
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test07() throws Exception {
		int[] intArray0 = new int[0];
		int[] intArray1 = new int[7];
		MockDate mockDate0 = new MockDate(815, 0, 0);
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray1, mockDate0,
				1605, eventQueryCriteria_EventTypeRange0, false);
		// Undeclared exception!
		eventQueryCriteria0.setEventTypeIds(intArray0);
	}

	@Test(timeout = 4000)
	public void test08() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				101, 205);
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 114,
				eventQueryCriteria_EventTypeRange0);
		boolean boolean0 = eventQueryCriteria0.isSetForFutureEvent();
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(114, eventQueryCriteria0.getDays());
		assertEquals(205, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertEquals(101, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertFalse(boolean0);
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		int[] intArray0 = new int[2];
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
				eventQueryCriteria_EventTypeRange0);
		boolean boolean0 = eventQueryCriteria0.isApplyEndDateRange();
		assertEquals(180, eventQueryCriteria0.getDays());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertTrue(boolean0);
		assertEquals(500, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertEquals(1, eventQueryCriteria_EventTypeRange0.getStartEventType());
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test10() throws Exception {
		int[] intArray0 = new int[5];
		MockDate mockDate0 = new MockDate(0, 0, 0);
		EventQueryCriteria eventQueryCriteria0 = null;
		eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, mockDate0, 0);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test11() throws Exception {
		EventQueryCriteria eventQueryCriteria0 = null;
		eventQueryCriteria0 = new EventQueryCriteria(null, null, (-1468));
	}

	@Test(timeout = 4000)
	public void test12() throws Exception {
		int[] intArray0 = new int[9];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, (-4743));
		eventQueryCriteria0.getTopicIds();
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals((-4743), eventQueryCriteria0.getDays());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
	}

	@Test(timeout = 4000)
	public void test13() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				101, 205);
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 114,
				eventQueryCriteria_EventTypeRange0);
		int int0 = eventQueryCriteria0.getStart();
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(205, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertEquals(114, eventQueryCriteria0.getDays());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(101, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertEquals(0, int0);
	}

	@Test(timeout = 4000)
	public void test14() throws Exception {
		int[] intArray0 = new int[9];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, (-4743));
		int int0 = eventQueryCriteria0.getNoOfEvents();
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(300, int0);
		assertEquals((-4743), eventQueryCriteria0.getDays());
	}

	@Test(timeout = 4000)
	public void test15() throws Exception {
		int[] intArray0 = new int[2];
		MockDate mockDate0 = new MockDate(1500, (-631), 0, 0, 0);
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, mockDate0,
				0, eventQueryCriteria_EventTypeRange0, false);
		eventQueryCriteria0.getListOfEventTypeRange();
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(1, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertEquals(0, eventQueryCriteria0.getDays());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(500, eventQueryCriteria_EventTypeRange0.getEndEventType());
	}

	@Test(timeout = 4000)
	public void test17() throws Exception {
		int[] intArray0 = new int[3];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
        null, true);
		Date date0 = eventQueryCriteria0.getLastDay();
		assertEquals(180, eventQueryCriteria0.getDays());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertNull(date0);
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
	}

	@Test(timeout = 4000)
	public void test18() throws Exception {
		int[] intArray0 = new int[2];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0);
		int[] intArray1 = eventQueryCriteria0.getExcludedEventTypeIds();
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(180, eventQueryCriteria0.getDays());
		assertArrayEquals(new int[]{428}, intArray1);
	}

	@Test(timeout = 4000)
	public void test19() throws Exception {
		int[] intArray0 = new int[9];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, (-4743));
		eventQueryCriteria0.getExcludedCatIds();
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals((-4743), eventQueryCriteria0.getDays());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
	}

	@Test(timeout = 4000)
	public void test20() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				101, 205);
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 114,
				eventQueryCriteria_EventTypeRange0);
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange1 = eventQueryCriteria0
				.getEventTypeRange();
		assertEquals(101, eventQueryCriteria_EventTypeRange1.getStartEventType());
		assertEquals(205, eventQueryCriteria_EventTypeRange1.getEndEventType());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(114, eventQueryCriteria0.getDays());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
	}

	@Test(timeout = 4000)
	public void test21() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				101, 205);
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 114,
				eventQueryCriteria_EventTypeRange0);
		eventQueryCriteria0.getEventTypeIds();
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(205, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertEquals(101, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertEquals(114, eventQueryCriteria0.getDays());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
	}

	@Test(timeout = 4000)
	public void test22() throws Exception {
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, (-179),
        null);
		eventQueryCriteria0.getCompanyIds();
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals((-179), eventQueryCriteria0.getDays());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
	}

	@Test(timeout = 4000)
	public void test23() throws Exception {
		int[] intArray0 = new int[6];
		MockDate mockDate0 = new MockDate((-612), 435, 1776, 332, 5, 2213);
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, mockDate0,
				116, eventQueryCriteria_EventTypeRange0, true);
		eventQueryCriteria0.setEventTypeIds(intArray0);
		assertEquals(116, eventQueryCriteria0.getDays());
		assertEquals(500, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(1, eventQueryCriteria_EventTypeRange0.getStartEventType());
	}

	@Test(timeout = 4000)
	public void test24() throws Exception {
		int[] intArray0 = new int[2];
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
				eventQueryCriteria_EventTypeRange0, false);
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(1, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertEquals(500, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertFalse(eventQueryCriteria0.isSetForFutureEvent());
	}

	@Test(timeout = 4000)
	public void test25() throws Exception {
		int[] intArray0 = new int[3];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
        null, (-498), true);
		eventQueryCriteria0.setApplyEndDateRange(true);
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(180, eventQueryCriteria0.getDays());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test26() throws Exception {
		int[] intArray0 = new int[0];
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = EventQueryCriteria.EventTypeRange
				.getDefaultEventTypeRange();
		EventQueryCriteria eventQueryCriteria0 = null;
		eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
				eventQueryCriteria_EventTypeRange0, 0, true);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test27() throws Exception {
		int[] intArray0 = new int[2];
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				136, (-706), false);
		EventQueryCriteria eventQueryCriteria0 = null;
		eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0,
				eventQueryCriteria_EventTypeRange0, 1131, false);
	}

	@Test(timeout = 4000)
	public void test28() throws Exception {
		EventQueryCriteria.EventTypeRange eventQueryCriteria_EventTypeRange0 = new EventQueryCriteria.EventTypeRange(
				101, 205);
		int[] intArray0 = new int[4];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 114,
				eventQueryCriteria_EventTypeRange0);
		int int0 = eventQueryCriteria0.getDays();
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
		assertEquals(114, int0);
		assertEquals(205, eventQueryCriteria_EventTypeRange0.getEndEventType());
		assertEquals(101, eventQueryCriteria_EventTypeRange0.getStartEventType());
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
	}

	@Test(timeout = 4000)
	public void test29() throws Exception {
		int[] intArray0 = new int[9];
		EventQueryCriteria eventQueryCriteria0 = new EventQueryCriteria(intArray0, intArray0, 9);
		eventQueryCriteria0.setListOfEventTypeRange(null);
		assertEquals(300, eventQueryCriteria0.getNoOfEvents());
		assertEquals(9, eventQueryCriteria0.getDays());
		assertTrue(eventQueryCriteria0.isApplyEndDateRange());
	}
}
