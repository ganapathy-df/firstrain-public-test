package com.firstrain.web.service.core;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.EntityBacktest;
import com.firstrain.frapi.customapirepository.impl.EntityBackTestRepositoryImpl;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class EntiyBackTestServiceDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EntiyBackTestService */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EntityBackTestRepositoryImpl.class)
  @Test
  public void updateStateInputZeroOutputNull() throws Exception {

    // Arrange
    final EntiyBackTestService objectUnderTest = new EntiyBackTestService();
    final EntityBackTestRepositoryImpl entityBackTestRepositoryImpl =
        PowerMockito.mock(EntityBackTestRepositoryImpl.class);
    final Method updateStateMethod =
        DTUMemberMatcher.method(
            EntityBackTestRepositoryImpl.class, "updateState", String.class, long.class);
    PowerMockito.doReturn(null)
        .when(entityBackTestRepositoryImpl, updateStateMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyLong());
    Reflector.setField(
        objectUnderTest, "entityBackTestRepositoryImpl", entityBackTestRepositoryImpl);
    final long id = 0L;

    // Act
    final EntityBacktest retval = objectUnderTest.updateState(id);

    // Assert
    assertNull(retval);
  }
}
