/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 16:00:57 GMT 2018
 */

package com.firstrain.web.service.core;

import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import com.firstrain.db.obj.EntityBacktest;
import com.firstrain.frapi.customapirepository.impl.PrivateEntityRepositoryImpl;
import com.firstrain.web.domain.Brand;
import com.firstrain.web.domain.UpdateDefinition;
import com.firstrain.web.pojo.CategorizerObject;
import com.firstrain.web.response.JSONResponse;
import com.firstrain.web.wrapper.PrivateEntityWrapper;
import java.sql.Timestamp;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

public class ResponseDecoratorServiceESTest {

	@Test(timeout = 4000)
	public void test00() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EntityBacktest entityBacktest0 = new EntityBacktest();
		PrivateEntityWrapper privateEntityWrapper0 =
				responseDecoratorService0.populatePrivateEntityWrapper(entityBacktest0);
		assertNull(privateEntityWrapper0.getLastModifiedDate());
	}

	@Test(timeout = 4000)
	public void test01() {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		String string0 = responseDecoratorService0.getVersion();
		assertNull(string0);
	}

	@Test(timeout = 4000)
	public void test02() {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		JSONResponse jSONResponse0 = responseDecoratorService0.getTakeDownResponse(0, "");
		assertEquals("errorcode.0", jSONResponse0.getMessage());
		assertEquals(JSONResponse.ResStatus.ERROR, jSONResponse0.getStatus());
	}

	@Test(timeout = 4000)
	public void test03() {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Timestamp timestamp0 = new Timestamp((-2610L));
		PrivateEntityWrapper privateEntityWrapper0 =
				responseDecoratorService0.getPrivateEntityWrapper("", "", timestamp0);
		assertEquals("31 Dec 1969 23:59:57 UTC", privateEntityWrapper0.getCreatedDate());
	}

	@Test(timeout = 4000, expected = ClassCastException.class)
	public void test04() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		BeanElement beanElement0 = new BeanElement("errorcode.", resourceBundleMessageSource0);
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
		// Undeclared exception!
		responseDecoratorService0
				.getPrivateEntityWrapper(beanAttributeList0);
	}

	@Test(timeout = 4000)
	public void test05() {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		PrivateEntityWrapper privateEntityWrapper0 =
				responseDecoratorService0.getPrivateEntityWrapper(
						"{Y]/;6C8ii>Qk", "#-`AOS/", null);
		assertEquals("#-`AOS/", privateEntityWrapper0.getName());
		assertEquals("{Y]/;6C8ii>Qk", privateEntityWrapper0.getSearchToken());
	}

	@Test(timeout = 4000)
	public void test06() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		PrivateEntityWrapper privateEntityWrapper0 =
				responseDecoratorService0.getPrivateEntityWrapper(
						"2!L~AR", "2!L~AR", null, "2!L~AR");
		assertNull(privateEntityWrapper0.getLastModifiedBy());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test07() {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		UpdateDefinition updateDefinition0 = new UpdateDefinition();
		// Undeclared exception!
		responseDecoratorService0.getPrivateEntityWrapper(updateDefinition0, false, false);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test08() {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		PrivateEntityWrapper privateEntityWrapper0 = new PrivateEntityWrapper();
		// Undeclared exception!
		responseDecoratorService0.getPrivateEntityServiceResponse(
				0, privateEntityWrapper0, null);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test09() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		PrivateEntityWrapper privateEntityWrapper0 =
				responseDecoratorService0.getPrivateEntityWrapper(null);
		// Undeclared exception!
		responseDecoratorService0
				.getPrivateEntityServiceResponse((-1793), privateEntityWrapper0, "");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test10() {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Brand brand0 = new Brand();
		// Undeclared exception!
		responseDecoratorService0.getEntityListResponseForCategorizePw(
				null,
				null,
				brand0,
				null,
				"n7VBOg@mu4",
				null);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test11() {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		CategorizerObject categorizerObject0 = new CategorizerObject();
		// Undeclared exception!
		responseDecoratorService0.getEntityListResponse(categorizerObject0, "xa#z1LJx");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test12() {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource",
				resourceBundleMessageSource0);
		PrivateEntityService privateEntityService0 = new PrivateEntityService();
		PrivateEntityRepositoryImpl privateEntityRepositoryImpl0 = new PrivateEntityRepositoryImpl();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"privateEntityRepositoryImpl",
				privateEntityRepositoryImpl0);
		SearchTokenUtil searchTokenUtil0 = mock(SearchTokenUtil.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"searchTokenUtil",
				searchTokenUtil0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(
				privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class,
				"taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(privateEntityService0,
				com.firstrain.web.service.core.PrivateEntityService.class);
		Injector.inject(
				responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"privateEntityService",
				privateEntityService0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		// Undeclared exception!
		responseDecoratorService0.getEntityBacktestServiceResponse(0, "");
	}
}
