package com.firstrain.web.controller.core;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.service.EntityBriefCustomService;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.utils.JSONUtility;
import com.firstrain.web.pojo.SearchResultInputBean;
import com.firstrain.web.response.JSONResponse;
import com.firstrain.web.service.core.RequestParsingService;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class EntityCustomControllerDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EntityCustomController */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SearchResultInputBean.class,
    Logger.class,
    JSONUtility.class,
    EntityCustomController.class
  })
  @Test
  public void docCountForNDaysInputNotNullOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "entityBriefCustomService", null);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final String reqBody = "????????????????";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(true).when(logger, isDebugEnabledMethod).withNoArguments();
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final SearchResultInputBean searchResultInputBean =
        PowerMockito.mock(SearchResultInputBean.class);
    final Method getSecondaryCatIdsMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "getSecondaryCatIds");
    PowerMockito.doReturn(null)
        .when(searchResultInputBean, getSecondaryCatIdsMethod)
        .withNoArguments();
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(searchResultInputBean)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.docCountForNDays(reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, JSONUtility.class, EntityCustomController.class})
  @Test
  public void docCountForNDaysInputNotNullOutputNullPointerException2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "entityBriefCustomService", null);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final String reqBody = "????????????????";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(true).when(logger, isDebugEnabledMethod).withNoArguments();
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.docCountForNDays(reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, EntityCustomController.class})
  @Test
  public void docCountForNDaysInputNotNullOutputNullPointerException3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "entityBriefCustomService", null);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final String reqBody = "";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.docCountForNDays(reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, JSONUtility.class, EntityCustomController.class})
  @Test
  public void docCountForNDaysInputNotNullOutputNullPointerException4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "entityBriefCustomService", null);
    final RequestParsingService requestParsingService =
        (RequestParsingService)
            Reflector.getInstance("com.firstrain.web.service.core.RequestParsingService");
    Reflector.setField(objectUnderTest, "requestParsingService", requestParsingService);
    final String reqBody = "????????????????";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.docCountForNDays(reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, EntityCustomController.class})
  @Test
  public void searchResultInputNotNullOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final EntityBriefCustomService entityBriefCustomService =
        (EntityBriefCustomService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityBriefCustomService");
    Reflector.setField(objectUnderTest, "entityBriefCustomService", entityBriefCustomService);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final String reqBody = "";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.searchResult(reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, EntityCustomController.class})
  @Test
  public void searchResultInputNotNullOutputNullPointerException2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final EntityBriefCustomService entityBriefCustomService =
        (EntityBriefCustomService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityBriefCustomService");
    Reflector.setField(objectUnderTest, "entityBriefCustomService", entityBriefCustomService);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final String reqBody = "";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.searchResult(reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, JSONUtility.class, EntityCustomController.class})
  @Test
  public void searchResultInputNotNullOutputNullPointerException3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final EntityBriefCustomService entityBriefCustomService =
        (EntityBriefCustomService)
            Reflector.getInstance("com.firstrain.frapi.service.EntityBriefCustomService");
    Reflector.setField(objectUnderTest, "entityBriefCustomService", entityBriefCustomService);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final String reqBody = "?";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(0)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.searchResult(reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.frapi.pojo.wrapper.BaseSet$SectionType"},
      value = {
        SearchResultInputBean.class,
        Logger.class,
        JSONUtility.class,
        EntityCustomController.class
      })
  @Test
  public void searchResultInputNotNullOutputNullPointerException4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "entityBriefCustomService", null);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final String reqBody = "?";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(true).when(logger, isDebugEnabledMethod).withNoArguments();
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final SearchResultInputBean searchResultInputBean =
        PowerMockito.mock(SearchResultInputBean.class);
    final Method getDaysCountMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "getDaysCount");
    PowerMockito.doReturn(0).when(searchResultInputBean, getDaysCountMethod).withNoArguments();
    final ArrayList arrayList = new ArrayList();
    final Method getSecondaryCatIdsMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "getSecondaryCatIds");
    PowerMockito.doReturn(arrayList)
        .when(searchResultInputBean, getSecondaryCatIdsMethod)
        .withNoArguments();
    final Method getScopeMethod = DTUMemberMatcher.method(SearchResultInputBean.class, "getScope");
    PowerMockito.doReturn(0).when(searchResultInputBean, getScopeMethod).withNoArguments();
    final Method getTypeMethod = DTUMemberMatcher.method(SearchResultInputBean.class, "getType");
    PowerMockito.doReturn(
            "?????????????????????????????????????????????????????????????????????????????")
        .when(searchResultInputBean, getTypeMethod)
        .withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SearchResultInputBean.class, "getCount");
    PowerMockito.doReturn(0).when(searchResultInputBean, getCountMethod).withNoArguments();
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(searchResultInputBean)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.searchResult(reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.frapi.pojo.wrapper.BaseSet$SectionType"},
      value = {
        SearchResultInputBean.class,
        Logger.class,
        JSONUtility.class,
        EntityCustomController.class
      })
  @Test
  public void searchResultInputNotNullOutputNullPointerException5() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "entityBriefCustomService", null);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final String reqBody = "?";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(false).when(logger, isDebugEnabledMethod).withNoArguments();
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final SearchResultInputBean searchResultInputBean =
        PowerMockito.mock(SearchResultInputBean.class);
    final Method getDaysCountMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "getDaysCount");
    PowerMockito.doReturn(0).when(searchResultInputBean, getDaysCountMethod).withNoArguments();
    final Method getScopeMethod = DTUMemberMatcher.method(SearchResultInputBean.class, "getScope");
    PowerMockito.doReturn(0).when(searchResultInputBean, getScopeMethod).withNoArguments();
    final Method isAdvanceSortMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "isAdvanceSort");
    PowerMockito.doReturn(false).when(searchResultInputBean, isAdvanceSortMethod).withNoArguments();
    final Method getPrimaryCatIdMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "getPrimaryCatId");
    PowerMockito.doReturn(0L).when(searchResultInputBean, getPrimaryCatIdMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SearchResultInputBean.class, "getCount");
    PowerMockito.doReturn(0).when(searchResultInputBean, getCountMethod).withNoArguments();
    final Method getTypeMethod = DTUMemberMatcher.method(SearchResultInputBean.class, "getType");
    PowerMockito.doReturn(
            "?????????????????????????????????????????????????????????????????????????")
        .when(searchResultInputBean, getTypeMethod)
        .withNoArguments();
    final ArrayList arrayList = new ArrayList();
    final Method getSecondaryCatIdsMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "getSecondaryCatIds");
    PowerMockito.doReturn(arrayList)
        .when(searchResultInputBean, getSecondaryCatIdsMethod)
        .withNoArguments();
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(searchResultInputBean)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.searchResult(reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.frapi.pojo.wrapper.BaseSet$SectionType"},
      value = {
        EntityCustomController.class,
        JSONUtility.class,
        Logger.class,
        EntityBriefCustomService.class,
        SearchResultInputBean.class
      })
  @Test
  public void searchResultInputNotNullOutputNullPointerException6() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final EntityCustomController objectUnderTest =
        (EntityCustomController)
            Reflector.getInstance("com.firstrain.web.controller.core.EntityCustomController");
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final EntityBriefCustomService entityBriefCustomService =
        PowerMockito.mock(EntityBriefCustomService.class);
    final Method getWebResultsMethod =
        DTUMemberMatcher.method(
            EntityBriefCustomService.class,
            "getWebResults",
            Long.class,
            List.class,
            Integer.class,
            Integer.class,
            Integer.class,
            boolean.class);
    PowerMockito.doReturn(null)
        .when(entityBriefCustomService, getWebResultsMethod)
        .withArguments(
            or(isA(Long.class), isNull(Long.class)),
            or(isA(List.class), isNull(List.class)),
            or(isA(Integer.class), isNull(Integer.class)),
            or(isA(Integer.class), isNull(Integer.class)),
            or(isA(Integer.class), isNull(Integer.class)),
            anyBoolean());
    Reflector.setField(objectUnderTest, "entityBriefCustomService", entityBriefCustomService);
    Reflector.setField(objectUnderTest, "requestParsingService", null);
    final String reqBody = "?";
    final JSONResponse jSONResponse = PowerMockito.mock(JSONResponse.class);
    PowerMockito.whenNew(JSONResponse.class).withNoArguments().thenReturn(jSONResponse);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(false).when(logger, isDebugEnabledMethod).withNoArguments();
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final SearchResultInputBean searchResultInputBean =
        PowerMockito.mock(SearchResultInputBean.class);
    final Method getDaysCountMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "getDaysCount");
    PowerMockito.doReturn(0).when(searchResultInputBean, getDaysCountMethod).withNoArguments();
    final Method getScopeMethod = DTUMemberMatcher.method(SearchResultInputBean.class, "getScope");
    PowerMockito.doReturn(0).when(searchResultInputBean, getScopeMethod).withNoArguments();
    final Method isAdvanceSortMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "isAdvanceSort");
    PowerMockito.doReturn(false).when(searchResultInputBean, isAdvanceSortMethod).withNoArguments();
    final Method getPrimaryCatIdMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "getPrimaryCatId");
    PowerMockito.doReturn(0L).when(searchResultInputBean, getPrimaryCatIdMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(SearchResultInputBean.class, "getCount");
    PowerMockito.doReturn(0).when(searchResultInputBean, getCountMethod).withNoArguments();
    final Method getTypeMethod = DTUMemberMatcher.method(SearchResultInputBean.class, "getType");
    PowerMockito.doReturn(
            "?????????????????????????????????????????????????????????????????????????")
        .when(searchResultInputBean, getTypeMethod)
        .withNoArguments();
    final ArrayList arrayList = new ArrayList();
    final Method getSecondaryCatIdsMethod =
        DTUMemberMatcher.method(SearchResultInputBean.class, "getSecondaryCatIds");
    PowerMockito.doReturn(arrayList)
        .when(searchResultInputBean, getSecondaryCatIdsMethod)
        .withNoArguments();
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(searchResultInputBean)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.searchResult(reqBody);

    // Method is not expected to return due to exception thrown
  }
}
