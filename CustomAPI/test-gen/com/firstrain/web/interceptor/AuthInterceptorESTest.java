/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 15:52:12 GMT 2018
 */

package com.firstrain.web.interceptor;

import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertFalse;

import com.firstrain.web.service.core.EnterpriseConfigLoader;
import com.firstrain.web.service.core.IPValidatorService;
import com.firstrain.web.service.core.LoadConfigurationComponent;
import com.firstrain.web.util.ProjectConfig;
import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;

public class AuthInterceptorESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		AuthInterceptor authInterceptor0 = new AuthInterceptor();
		RequestDispatcher requestDispatcher0 =
				mock(RequestDispatcher.class, new ViolatedAssumptionAnswer());
		HttpServletRequest httpServletRequest0 =
				mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
		doReturn(requestDispatcher0).when(httpServletRequest0).getRequestDispatcher(anyString());
		doReturn(null).when(httpServletRequest0).getHeader(anyString());
		HttpServletRequestWrapper httpServletRequestWrapper0 =
				new HttpServletRequestWrapper(httpServletRequest0);
		HttpServletResponse httpServletResponse0 =
				mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 =
				new HttpServletResponseWrapper(httpServletResponse0);
		boolean boolean0 =
				authInterceptor0.preHandle(
						httpServletRequestWrapper0, httpServletResponseWrapper0, null);
		assertFalse(boolean0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test1() throws Exception {
		HttpServletRequest httpServletRequest0 =
				mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
		EnterpriseConfigLoader enterpriseConfigLoader0 = arrangeData(httpServletRequest0); 
		AuthInterceptor authInterceptor0 = new AuthInterceptor();
		EnterpriseConfigLoader enterpriseConfigLoader1 =
				mock(EnterpriseConfigLoader.class, new ViolatedAssumptionAnswer());
		doReturn(null)
				.when(enterpriseConfigLoader1)
				.getEnterpriseConfig(anyString());
		setupData(authInterceptor0, enterpriseConfigLoader1, enterpriseConfigLoader0, httpServletRequest0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test2() throws Exception {
		HttpServletRequest httpServletRequest0 =
				mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
		EnterpriseConfigLoader enterpriseConfigLoader0 = arrangeData(httpServletRequest0); 
		AuthInterceptor authInterceptor0 = new AuthInterceptor();
		Long long0 = 1683L;
		ProjectConfig.EnterpriseConfig projectConfig_EnterpriseConfig0 =
				mock(ProjectConfig.EnterpriseConfig.class, new ViolatedAssumptionAnswer());
		doReturn(long0, long0).when(projectConfig_EnterpriseConfig0).getId();
		EnterpriseConfigLoader enterpriseConfigLoader1 =
				mock(EnterpriseConfigLoader.class, new ViolatedAssumptionAnswer());
		doReturn(projectConfig_EnterpriseConfig0)
				.when(enterpriseConfigLoader1)
				.getEnterpriseConfig(anyString());
		setupData(authInterceptor0, enterpriseConfigLoader1, enterpriseConfigLoader0, httpServletRequest0);
	}

	private void setupData(final AuthInterceptor authInterceptor0, final EnterpriseConfigLoader enterpriseConfigLoader1, final EnterpriseConfigLoader enterpriseConfigLoader0, final HttpServletRequest httpServletRequest0) throws Exception {
		Injector.inject(
				authInterceptor0,
				com.firstrain.web.interceptor.AuthInterceptor.class,
				"enterpriseConfigLoader",
				enterpriseConfigLoader1);
		IPValidatorService iPValidatorService0 = new IPValidatorService();
		Injector.inject(
				iPValidatorService0,
				com.firstrain.web.service.core.IPValidatorService.class,
				"enterpriseConfigLoader",
				enterpriseConfigLoader0);
		Injector.validateBean(iPValidatorService0,
				com.firstrain.web.service.core.IPValidatorService.class);
		Injector.executePostConstruct(
				iPValidatorService0, com.firstrain.web.service.core.IPValidatorService.class);
		Injector.inject(
				authInterceptor0,
				com.firstrain.web.interceptor.AuthInterceptor.class,
				"ipValidatorService",
				iPValidatorService0);
		Injector
				.validateBean(authInterceptor0, com.firstrain.web.interceptor.AuthInterceptor.class);
		authInterceptor0.preHandle(
				httpServletRequest0, null, iPValidatorService0);
	}
 
	private EnterpriseConfigLoader arrangeData(final HttpServletRequest httpServletRequest0) { 
		doReturn(null).when(httpServletRequest0) 
				.getRequestDispatcher(anyString()); 
		doReturn("/WEB-INF/pages/errorMessage.jsp").when(httpServletRequest0) 
				.getHeader(anyString()); 
		EnterpriseConfigLoader enterpriseConfigLoader0 = new EnterpriseConfigLoader(); 
		LoadConfigurationComponent loadConfigurationComponent0 = new LoadConfigurationComponent(); 
		Injector.inject( 
				enterpriseConfigLoader0, 
				com.firstrain.web.service.core.EnterpriseConfigLoader.class, 
				"loadConfigurationComponent", 
				loadConfigurationComponent0); 
		return enterpriseConfigLoader0; 
	} 
}
