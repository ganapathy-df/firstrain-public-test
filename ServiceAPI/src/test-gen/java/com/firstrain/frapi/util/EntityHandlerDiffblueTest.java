package com.firstrain.frapi.util;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.BlendDunsInput;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.pojo.Event;
import com.firstrain.frapi.service.DnbService;
import com.firstrain.frapi.util.DefaultEnums.EventInformationEnum;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class EntityHandlerDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EntityHandler */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Event.class)
  @Test
  public void addIdInputNotNullOutputNotNull() throws Exception {

    // Arrange
    final Event event = PowerMockito.mock(Event.class);
    final Method getEventIdMethod = DTUMemberMatcher.method(Event.class, "getEventId");
    PowerMockito.doReturn(null).when(event, getEventIdMethod).withNoArguments();
    final EventInformationEnum eventInformationEnum =
        (EventInformationEnum)
            Reflector.getInstance("com.firstrain.frapi.util.DefaultEnums$EventInformationEnum");
    final Method getEventInformationEnumMethod =
        DTUMemberMatcher.method(Event.class, "getEventInformationEnum");
    PowerMockito.doReturn(eventInformationEnum)
        .when(event, getEventInformationEnumMethod)
        .withNoArguments();

    // Act
    final Event retval = EntityHandler.addId(event);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Event.class)
  @Test
  public void addIdInputNotNullOutputNotNull2() throws Exception {

    // Arrange
    final Event event = PowerMockito.mock(Event.class);
    final Method getEventIdMethod = DTUMemberMatcher.method(Event.class, "getEventId");
    PowerMockito.doReturn("").when(event, getEventIdMethod).withNoArguments();
    final EventInformationEnum eventInformationEnum =
        (EventInformationEnum)
            Reflector.getInstance("com.firstrain.frapi.util.DefaultEnums$EventInformationEnum");
    final Method getEventInformationEnumMethod =
        DTUMemberMatcher.method(Event.class, "getEventInformationEnum");
    PowerMockito.doReturn(eventInformationEnum)
        .when(event, getEventInformationEnumMethod)
        .withNoArguments();

    // Act
    final Event retval = EntityHandler.addId(event);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Event.class)
  @Test
  public void addIdInputNotNullOutputNotNull3() throws Exception {

    // Arrange
    final Event event = PowerMockito.mock(Event.class);
    final Method getEventIdMethod = DTUMemberMatcher.method(Event.class, "getEventId");
    PowerMockito.doReturn("").when(event, getEventIdMethod).withNoArguments();
    final Method getEventInformationEnumMethod =
        DTUMemberMatcher.method(Event.class, "getEventInformationEnum");
    PowerMockito.doReturn(null).when(event, getEventInformationEnumMethod).withNoArguments();

    // Act
    final Event retval = EntityHandler.addId(event);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Event.class)
  @Test
  public void addIdInputNotNullOutputNotNull4() throws Exception {

    // Arrange
    final Event event = PowerMockito.mock(Event.class);
    final Method getEventIdMethod = DTUMemberMatcher.method(Event.class, "getEventId");
    PowerMockito.doReturn("").when(event, getEventIdMethod).withNoArguments();
    final Method getEventInformationEnumMethod =
        DTUMemberMatcher.method(Event.class, "getEventInformationEnum");
    PowerMockito.doReturn(null).when(event, getEventInformationEnumMethod).withNoArguments();

    // Act
    final Event retval = EntityHandler.addId(event);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Event.class)
  @Test
  public void addIdInputNotNullOutputNotNull5() throws Exception {

    // Arrange
    final Event event = PowerMockito.mock(Event.class);
    final Method getEventIdMethod = DTUMemberMatcher.method(Event.class, "getEventId");
    PowerMockito.doReturn("").when(event, getEventIdMethod).withNoArguments();
    final Method getEventInformationEnumMethod =
        DTUMemberMatcher.method(Event.class, "getEventInformationEnum");
    PowerMockito.doReturn(null).when(event, getEventInformationEnumMethod).withNoArguments();

    // Act
    final Event retval = EntityHandler.addId(event);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Event.class)
  @Test
  public void addIdInputNotNullOutputNotNull6() throws Exception {

    // Arrange
    final Event event = PowerMockito.mock(Event.class);
    final Method getEventIdMethod = DTUMemberMatcher.method(Event.class, "getEventId");
    PowerMockito.doReturn("").when(event, getEventIdMethod).withNoArguments();
    final Method getEventInformationEnumMethod =
        DTUMemberMatcher.method(Event.class, "getEventInformationEnum");
    PowerMockito.doReturn(null).when(event, getEventInformationEnumMethod).withNoArguments();

    // Act
    final Event retval = EntityHandler.addId(event);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Event.class)
  @Test
  public void addIdInputNotNullOutputNotNull7() throws Exception {

    // Arrange
    final Event event = PowerMockito.mock(Event.class);
    final Method getEventIdMethod = DTUMemberMatcher.method(Event.class, "getEventId");
    PowerMockito.doReturn("").when(event, getEventIdMethod).withNoArguments();
    final Method getSecFormTypeMethod = DTUMemberMatcher.method(Event.class, "getSecFormType");
    PowerMockito.doReturn("").when(event, getSecFormTypeMethod).withNoArguments();
    final Method getEventInformationEnumMethod =
        DTUMemberMatcher.method(Event.class, "getEventInformationEnum");
    PowerMockito.doReturn(null).when(event, getEventInformationEnumMethod).withNoArguments();

    // Act
    final Event retval = EntityHandler.addId(event);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Event.class)
  @Test
  public void addIdInputNotNullOutputNotNull8() throws Exception {

    // Arrange
    final Event event = PowerMockito.mock(Event.class);
    final Method getEventIdMethod = DTUMemberMatcher.method(Event.class, "getEventId");
    PowerMockito.doReturn("").when(event, getEventIdMethod).withNoArguments();
    final Method getSecFormTypeMethod = DTUMemberMatcher.method(Event.class, "getSecFormType");
    PowerMockito.doReturn(null).when(event, getSecFormTypeMethod).withNoArguments();
    final Method getEventInformationEnumMethod =
        DTUMemberMatcher.method(Event.class, "getEventInformationEnum");
    PowerMockito.doReturn(null).when(event, getEventInformationEnumMethod).withNoArguments();

    // Act
    final Event retval = EntityHandler.addId(event);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void constructorOutputUnsupportedOperationException() throws Throwable {

    // Act, creating object to test constructor
    thrown.expect(UnsupportedOperationException.class);
    try {
      final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.EntityHandler");
      final Constructor<?> ctor = classUnderTest.getDeclaredConstructor();
      ctor.setAccessible(true);
      final Object objectUnderTest = ctor.newInstance();
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(DnbService.class)
  @Test
  public void generateEntityInputNotNullNullNullOutputNull() throws Exception {

    // Arrange
    final DnbService dnbService = PowerMockito.mock(DnbService.class);
    PowerMockito.when(
            dnbService.getDnbEntity(
                or(isA(String.class), isNull(String.class)),
                or(isA(BlendDunsInput.class), isNull(BlendDunsInput.class))))
        .thenReturn(null);
    final String token = null;
    final BlendDunsInput bdi = null;

    // Act
    final Entity retval = EntityHandler.generateEntity(dnbService, token, bdi);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void generateEntityInputNullNotNullNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DnbService dnbService = null;
    final String token = "";
    final BlendDunsInput bdi = null;
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    final Entity retval = EntityHandler.generateEntity(dnbService, token, bdi);

    // Assert
    assertNull(retval);
  }
}
