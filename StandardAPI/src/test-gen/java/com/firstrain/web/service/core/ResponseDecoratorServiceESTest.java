/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 18:47:08 GMT 2018
 */

package com.firstrain.web.service.core;

import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import com.firstrain.frapi.domain.EntityStatus;
import com.firstrain.frapi.domain.HistoricalStat;
import com.firstrain.frapi.domain.MonitorConfig;
import com.firstrain.frapi.domain.MonitorDetails;
import com.firstrain.frapi.domain.SectionSpec;
import com.firstrain.frapi.domain.VisualizationData;
import com.firstrain.frapi.pojo.AuthAPIResponse;
import com.firstrain.frapi.pojo.EmailResponse;
import com.firstrain.frapi.pojo.EntityBriefInfo;
import com.firstrain.frapi.pojo.MonitorAPIResponse;
import com.firstrain.frapi.pojo.MonitorEmailAPIResponse;
import com.firstrain.frapi.pojo.SearchAPIResponse;
import com.firstrain.frapi.pojo.UserAPIResponse;
import com.firstrain.frapi.pojo.wrapper.BaseSet;
import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import com.firstrain.frapi.pojo.wrapper.TweetSet;
import com.firstrain.frapi.util.DefaultEnums;
import com.firstrain.web.pojo.Document;
import com.firstrain.web.pojo.MetaData;
import com.firstrain.web.pojo.Tweet;
import com.firstrain.web.response.EntityDataResponse;
import com.openpojo.random.util.ComparableDelayed;
import java.time.ZoneId;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.ui.ExtendedModelMap;

public class ResponseDecoratorServiceESTest {

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test00() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EntityDataResponse entityDataResponse0 = new EntityDataResponse();
		SectionSpec sectionSpec0 = new SectionSpec();
		HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class,
				new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(
				httpServletResponse0);
		// Undeclared exception!
		responseDecoratorService0
				.setChartDataForWebVolume(entityDataResponse0, null, sectionSpec0, false,
						httpServletResponseWrapper0);
	}

	@Test(timeout = 4000)
	public void test01() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		responseDecoratorService0.makeTweetsFieldsNullable(null);
	}

	@Test(timeout = 4000, expected = ClassCastException.class)
	public void test02() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		ComparableDelayed comparableDelayed0 = new ComparableDelayed();
		BeanElement beanElement0 = new BeanElement("TYPE_MGMT_CHANGE_INTERIM_FINANCIAL_OFFICER",
				comparableDelayed0);
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
		// Undeclared exception!
		responseDecoratorService0.makeTweetsFieldsNullable(beanAttributeList0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test03() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		UserAPIResponse userAPIResponse0 = new UserAPIResponse();
		// Undeclared exception!
		responseDecoratorService0.getUserResponse(userAPIResponse0, "frContentGl");
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test04() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		UserAPIResponse userAPIResponse0 = new UserAPIResponse();
		// Undeclared exception!
		responseDecoratorService0.getUserIdResponse(userAPIResponse0, "Txu");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test05() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		// Undeclared exception!
		responseDecoratorService0.getSuccessMsg("");
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test06() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		MonitorAPIResponse monitorAPIResponse0 = new MonitorAPIResponse();
		// Undeclared exception!
		responseDecoratorService0.getMonitorWrapperResponse(monitorAPIResponse0, "");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test07() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		MonitorAPIResponse monitorAPIResponse0 = new MonitorAPIResponse();
		// Undeclared exception!
		responseDecoratorService0.getMonitorInfoResponse(monitorAPIResponse0, "p!G7^HR';^");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test08() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EntityStatus entityStatus0 = new EntityStatus();
		// Undeclared exception!
		responseDecoratorService0.getMonitorEntityResponse(entityStatus0);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test09() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		MonitorDetails monitorDetails0 = new MonitorDetails();
		// Undeclared exception!
		responseDecoratorService0.getMonitorDetailsResponse(monitorDetails0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test10() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		MonitorConfig monitorConfig0 = new MonitorConfig();
		// Undeclared exception!
		responseDecoratorService0.getMonitorConfigResponse(monitorConfig0);
	}

	@Test(timeout = 4000, expected = ClassCastException.class)
	public void test11() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Namespace namespace0 = new Namespace("", "");
		SectionSpec sectionSpec0 = new SectionSpec();
		BeanElement beanElement0 = new BeanElement("", namespace0, sectionSpec0);
		Class<Object> class0 = Object.class;
		BeanMetaData beanMetaData0 = new BeanMetaData(class0);
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
		// Undeclared exception!
		responseDecoratorService0
				.getMetaData(null, beanAttributeList0, beanAttributeList0);
	}

	@Test(timeout = 4000, expected = ClassCastException.class)
	public void test12() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		VisualizationData.ChartType visualizationData_ChartType0 = VisualizationData.ChartType.TREE_MONITOR_SEARCH;
		VisualizationData.Graph visualizationData_Graph0 = new VisualizationData.Graph(null,
				visualizationData_ChartType0);
		BeanElement beanElement0 = new BeanElement("Dom", visualizationData_Graph0);
		Class<HistoricalStat> class0 = HistoricalStat.class;
		BeanMetaData beanMetaData0 = new BeanMetaData(class0);
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
		// Undeclared exception!
		responseDecoratorService0
				.getMetaData(beanAttributeList0, beanAttributeList0, beanAttributeList0);
	}

	@Test(timeout = 4000)
	public void test13() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EntityDataResponse entityDataResponse0 = new EntityDataResponse();
		MetaData metaData0 = responseDecoratorService0.getMetaDataEntitiyResponse(entityDataResponse0);
		assertNull(metaData0.getFt());
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test14() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EntityBriefInfo entityBriefInfo0 = new EntityBriefInfo();
		DefaultEnums.INPUT_ENTITY_TYPE defaultEnums_INPUT_ENTITY_TYPE0 = DefaultEnums.INPUT_ENTITY_TYPE.REGION;
		// Undeclared exception!
		responseDecoratorService0
				.getMatchedEntityDataResponse(entityBriefInfo0, defaultEnums_INPUT_ENTITY_TYPE0);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test15() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		BaseSet.SectionType baseSet_SectionType0 = BaseSet.SectionType.C;
		TweetSet tweetSet0 = new TweetSet(baseSet_SectionType0);
		Short short0 = SectionSpec.DEFAULT_COUNT;
		// Undeclared exception!
		responseDecoratorService0.getItemWrapperResponse(tweetSet0, "", short0, true);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test16() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		// Undeclared exception!
		responseDecoratorService0.getItemWrapperResponse(null, "visual-init.min.js");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test17() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EntityBriefInfo entityBriefInfo0 = new EntityBriefInfo();
		// Undeclared exception!
		responseDecoratorService0.getEntityPeersResponse(entityBriefInfo0, "<LIST>");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test18() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EntityBriefInfo entityBriefInfo0 = new EntityBriefInfo();
		// Undeclared exception!
		responseDecoratorService0.getEntityMapResponse(entityBriefInfo0, "eJH");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test19() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		SearchAPIResponse searchAPIResponse0 = new SearchAPIResponse();
		ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
		// Undeclared exception!
		responseDecoratorService0.getEntityDataResponse(searchAPIResponse0, "' for '",
				null, extendedModelMap0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test20() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		MonitorEmailAPIResponse monitorEmailAPIResponse0 = new MonitorEmailAPIResponse();
		// Undeclared exception!
		responseDecoratorService0.getEntityDataResponse(monitorEmailAPIResponse0, "}a:#M:}ZRjOPmW]a.4");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test21() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		MonitorAPIResponse monitorAPIResponse0 = new MonitorAPIResponse();
		Short short0 = new Short((short) 0);
		// Undeclared exception!
		responseDecoratorService0.getEntityDataResponse(monitorAPIResponse0, "",
				null, short0, false);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test22() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EntityBriefInfo entityBriefInfo0 = new EntityBriefInfo();
		HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class,
				new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(
				httpServletResponse0);
		// Undeclared exception!
		responseDecoratorService0.getEntityDataResponse(entityBriefInfo0, ";Kla)P05<u.~",
				null,
				httpServletResponseWrapper0, null, false, false,
				";Kla)P05<u.~");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test23() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EntityBriefInfo entityBriefInfo0 = new EntityBriefInfo();
		HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class,
				new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(
				httpServletResponse0);
		Short short0 = SectionSpec.DEFAULT_COUNT;
		// Undeclared exception!
		responseDecoratorService0.getEntityDataResponse(entityBriefInfo0, "WnF:.#w",
				null,
				httpServletResponseWrapper0, short0, false);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test24() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		EmailResponse emailResponse0 = new EmailResponse();
		// Undeclared exception!
		responseDecoratorService0.getEmailResponse(emailResponse0, ")QH}VC}o)@G3.");
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test25() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Class<com.firstrain.frapi.domain.Document> class0 = com.firstrain.frapi.domain.Document.class;
		BeanMetaData beanMetaData0 = new BeanMetaData(class0);
		Namespace namespace0 = new Namespace("", "~X6AKseV l#oGZO^");
		QName qName0 = new QName("", namespace0);
		ComparableDelayed comparableDelayed0 = new ComparableDelayed();
		BeanElement beanElement0 = new BeanElement(qName0, comparableDelayed0);
		BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
		// Undeclared exception!
		responseDecoratorService0.getDnBEntityStatusResponse(beanAttributeList0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test26() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		// Undeclared exception!
		responseDecoratorService0.getDeleteUserResponse("G");
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test27() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		SearchAPIResponse searchAPIResponse0 = new SearchAPIResponse();
		Map<String, String> map0 = ZoneId.SHORT_IDS;
		// Undeclared exception!
		responseDecoratorService0.getConversationStartersResponse(searchAPIResponse0, map0,
				null, 537, 9447);
	}

	@Test(timeout = 4000, expected = RuntimeException.class)
	public void test28() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		AuthAPIResponse authAPIResponse0 = new AuthAPIResponse();
		// Undeclared exception!
		responseDecoratorService0.getAuthKeyResponse(authAPIResponse0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test29() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		resourceBundleMessageSource0.setUseCodeAsDefaultMessage(true);
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		MonitorAPIResponse monitorAPIResponse0 = new MonitorAPIResponse();
		// Undeclared exception!
		responseDecoratorService0.getAddRemoveEntityResponse(monitorAPIResponse0, "");
	}

	@Test(timeout = 4000)
	public void test30() throws Exception {
		ResponseDecoratorService responseDecoratorService0 = new ResponseDecoratorService();
		ResourceBundleMessageSource resourceBundleMessageSource0 = new ResourceBundleMessageSource();
		Injector.inject(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class,
				"messageSource", resourceBundleMessageSource0);
		Injector.validateBean(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		Injector.executePostConstruct(responseDecoratorService0,
				com.firstrain.web.service.core.ResponseDecoratorService.class);
		boolean boolean0 = responseDecoratorService0.excludeTweetInfo(0L);
		assertTrue(boolean0);
	}
}
