package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.Tweet;
import com.firstrain.frapi.domain.TwitterSpec;
import com.firstrain.frapi.pojo.NotableDetails;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.DateBucketUtils;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.solr.client.util.SolrServerReader;
import com.firstrain.utils.object.PerfActivityType;
import com.firstrain.utils.object.PerfMonitor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.common.SolrDocumentList;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class TwitterServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: TwitterServiceImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tweet.class)
  @Test
  public void compareInputNotNullNotNullOutputNegative() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    Reflector.setField(objectUnderTest, "this$0", null);
    final long[] longArray = {3L};
    Reflector.setField(objectUnderTest, "val$tweetIds", longArray);
    final Tweet o1 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("3").when(o1, getTweetIdMethod).withNoArguments();
    final Tweet o2 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod1 = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("2").when(o2, getTweetIdMethod1).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.Tweet"),
            Reflector.forName("com.firstrain.frapi.domain.Tweet"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tweet.class)
  @Test
  public void compareInputNotNullNotNullOutputPositive() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$1");
    Reflector.setField(objectUnderTest, "this$0", null);
    final Tweet o1 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("\"\"\"####").when(o1, getTweetIdMethod).withNoArguments();
    final Tweet o2 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod1 = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("\"\"\"!\"\"\"").when(o2, getTweetIdMethod1).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$1");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.Tweet"),
            Reflector.forName("com.firstrain.frapi.domain.Tweet"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(2, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tweet.class)
  @Test
  public void compareInputNotNullNotNullOutputPositive2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    Reflector.setField(objectUnderTest, "this$0", null);
    final long[] longArray = {2L};
    Reflector.setField(objectUnderTest, "val$tweetIds", longArray);
    final Tweet o1 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("0").when(o1, getTweetIdMethod).withNoArguments();
    final Tweet o2 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod1 = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("2").when(o2, getTweetIdMethod1).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.Tweet"),
            Reflector.forName("com.firstrain.frapi.domain.Tweet"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tweet.class)
  @Test
  public void compareInputNotNullNotNullOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    Reflector.setField(objectUnderTest, "this$0", null);
    final long[] longArray = {0L};
    Reflector.setField(objectUnderTest, "val$tweetIds", longArray);
    final Tweet o1 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("0").when(o1, getTweetIdMethod).withNoArguments();
    final Tweet o2 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod1 = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("0").when(o2, getTweetIdMethod1).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.Tweet"),
            Reflector.forName("com.firstrain.frapi.domain.Tweet"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tweet.class)
  @Test
  public void compareInputNotNullNotNullOutputZero2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    Reflector.setField(objectUnderTest, "this$0", null);
    final long[] longArray = {3L};
    Reflector.setField(objectUnderTest, "val$tweetIds", longArray);
    final Tweet o1 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("1").when(o1, getTweetIdMethod).withNoArguments();
    final Tweet o2 = PowerMockito.mock(Tweet.class);
    final Method getTweetIdMethod1 = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn("2").when(o2, getTweetIdMethod1).withNoArguments();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.domain.Tweet"),
            Reflector.forName("com.firstrain.frapi.domain.Tweet"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputZeroNegativeOutputNegative() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    final int[] intArray = {0};
    Reflector.setField(objectUnderTest, "val$intCatIds", intArray);
    final Integer o1 = 0;
    final Integer o2 = -2_147_483_648;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("java.lang.Integer"),
            Reflector.forName("java.lang.Integer"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputZeroNegativeOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    final int[] intArray = {16_384};
    Reflector.setField(objectUnderTest, "val$intCatIds", intArray);
    final Integer o1 = 0;
    final Integer o2 = -2_147_467_264;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("java.lang.Integer"),
            Reflector.forName("java.lang.Integer"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputZeroPositiveOutputPositive() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    final int[] intArray = {16_384};
    Reflector.setField(objectUnderTest, "val$intCatIds", intArray);
    final Integer o1 = 0;
    final Integer o2 = 16_384;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("java.lang.Integer"),
            Reflector.forName("java.lang.Integer"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputZeroZeroOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    final int[] intArray = {0};
    Reflector.setField(objectUnderTest, "val$intCatIds", intArray);
    final Integer o1 = 0;
    final Integer o2 = 0;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("java.lang.Integer"),
            Reflector.forName("java.lang.Integer"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIndexInput0ZeroOutputNegative() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    Reflector.setField(objectUnderTest, "val$intCatIds", null);
    final int[] arr = {};
    final int a = 0;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getIndex", Reflector.forName("int[]"), Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, arr, a);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIndexInput0ZeroOutputNegative2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    Reflector.setField(objectUnderTest, "this$0", null);
    Reflector.setField(objectUnderTest, "val$tweetIds", null);
    final long[] arr = {};
    final long a = 0L;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getIndex", Reflector.forName("long[]"), Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, arr, a);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIndexInput1NegativeOutputNegative() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    Reflector.setField(objectUnderTest, "val$intCatIds", null);
    final int[] arr = {0};
    final int a = -2_147_483_648;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getIndex", Reflector.forName("int[]"), Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, arr, a);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIndexInput1NegativeOutputNegative2() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    Reflector.setField(objectUnderTest, "this$0", null);
    Reflector.setField(objectUnderTest, "val$tweetIds", null);
    final long[] arr = {0L};
    final long a = -9_223_372_036_854_775_808L;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getIndex", Reflector.forName("long[]"), Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, arr, a);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIndexInput1NegativeOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    Reflector.setField(objectUnderTest, "this$0", null);
    Reflector.setField(objectUnderTest, "val$tweetIds", null);
    final long[] arr = {-1L};
    final long a = -1L;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$3");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getIndex", Reflector.forName("long[]"), Reflector.forName("long"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, arr, a);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getIndexInput1ZeroOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    Reflector.setField(objectUnderTest, "this$0", null);
    Reflector.setField(objectUnderTest, "val$intCatIds", null);
    final int[] arr = {0};
    final int a = 0;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl$2");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getIndex", Reflector.forName("int[]"), Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, arr, a);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    NotableDetails.class,
    TwitterServiceImpl.class,
    PerfMonitor.class,
    Logger.class,
    EntityBaseServiceRepository.class,
    SolrServerReader.class,
    SolrDocumentList.class
  })
  @Test
  public void getNotableDetailsInputPositiveNegativeFalseOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final TwitterServiceImpl objectUnderTest = arrangeTwitterServiceImpl();
    final long tweetId = arrangeData(objectUnderTest);
    final long groupId = -9_223_372_036_854_775_807L;
    final boolean isIpad = arrangeAndMock();
    final NotableDetails retval = arrangeAndDoGetNotableDetails(groupId, isIpad, objectUnderTest, tweetId);

    // Assert
    assertNotNull(retval);
  }

  private TwitterServiceImpl arrangeTwitterServiceImpl() throws InvocationTargetException {
    final TwitterServiceImpl objectUnderTest =
        (TwitterServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl");
    final String[] stringArray = {};
    Reflector.setField(objectUnderTest, "TWEET_GROUP_FIELDS", stringArray);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    final String[] stringArray1 = {};
    Reflector.setField(objectUnderTest, "TWITTER_FIELDS", stringArray1);
    Reflector.setField(objectUnderTest, "MAX_ENTITY_FOR_ROUND_ROBIN", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    PowerMockito.when(entityBaseServiceRepository.getTwitterServer()).thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    return objectUnderTest;
  }

  private NotableDetails arrangeAndDoGetNotableDetails(final long groupId, final boolean isIpad, final TwitterServiceImpl objectUnderTest, final long tweetId) throws Exception {
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method isEmptyMethod = DTUMemberMatcher.method(SolrDocumentList.class, "isEmpty");
    PowerMockito.doReturn(true).when(solrDocumentList, isEmptyMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            String.class,
            boolean.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(String.class), isNull(String.class)),
            anyBoolean(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    
    // Act
    final NotableDetails retval = objectUnderTest.getNotableDetails(tweetId, groupId, isIpad);
    return retval;
  }

  private long arrangeData(final TwitterServiceImpl objectUnderTest) throws InvocationTargetException {
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(servicesAPIUtil, "LOG", logger1);
    final ConvertUtil convertUtil1 =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil1, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil1, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil1, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger2 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil1, "LOG", logger2);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil1);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final long tweetId = 3L;
    return tweetId;
  }

  private boolean arrangeAndMock() throws Exception {
    final boolean isIpad = false;
    final NotableDetails notableDetails = PowerMockito.mock(NotableDetails.class);
    PowerMockito.whenNew(NotableDetails.class).withNoArguments().thenReturn(notableDetails);
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    return isIpad;
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    NotableDetails.class,
    TwitterServiceImpl.class,
    EntityBaseServiceRepository.class,
    SolrServerReader.class,
    Logger.class,
    PerfMonitor.class
  })
  @Test
  public void getNotableDetailsInputZeroPositiveFalseOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final TwitterServiceImpl objectUnderTest = arrangeTwitterServiceImpl2();
    final long tweetId = arrangeTweetData(objectUnderTest);
    final long groupId = 8L;
    final boolean isIpad = arrangeData3();
    arrangeDoGetNotableDetailsAndAssert(groupId, isIpad, objectUnderTest, tweetId);
  }

  private TwitterServiceImpl arrangeTwitterServiceImpl2() throws InvocationTargetException {
    final TwitterServiceImpl objectUnderTest =
        (TwitterServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl");
    Reflector.setField(objectUnderTest, "TWEET_GROUP_FIELDS", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    final String[] stringArray = {};
    Reflector.setField(objectUnderTest, "TWITTER_FIELDS", stringArray);
    Reflector.setField(objectUnderTest, "MAX_ENTITY_FOR_ROUND_ROBIN", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    PowerMockito.when(entityBaseServiceRepository.getTwitterServer()).thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    return objectUnderTest;
  }

  private void arrangeDoGetNotableDetailsAndAssert(final long groupId, final boolean isIpad, final TwitterServiceImpl objectUnderTest, final long tweetId) throws Exception {
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            String.class,
            boolean.class,
            java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(String.class), isNull(String.class)),
            anyBoolean(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    
    // Act
    final NotableDetails retval = objectUnderTest.getNotableDetails(tweetId, groupId, isIpad);
    
    // Assert
    assertNotNull(retval);
  }

  private long arrangeTweetData(final TwitterServiceImpl objectUnderTest) throws InvocationTargetException {
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(servicesAPIUtil, "LOG", logger1);
    final ConvertUtil convertUtil1 =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil1, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil1, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil1, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger2 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil1, "LOG", logger2);
    Reflector.setField(servicesAPIUtil, "convertUtil", convertUtil1);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final long tweetId = 0L;
    return tweetId;
  }

  private boolean arrangeData3() throws Exception {
    final boolean isIpad = false;
    final NotableDetails notableDetails = PowerMockito.mock(NotableDetails.class);
    PowerMockito.whenNew(NotableDetails.class).withNoArguments().thenReturn(notableDetails);
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    return isIpad;
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTweetsInput0NullOutputIllegalArgumentException() throws Throwable {

    // Arrange
    final TwitterServiceImpl objectUnderTest = arrangeTwitterServiceImpl3();
    final HashMap tweetMap = new HashMap();
    final TwitterSpec tSpec = null;

    // Act
    arrangeData(objectUnderTest, tSpec, tweetMap);

    // Method is not expected to return due to exception thrown
  }

  private TwitterServiceImpl arrangeTwitterServiceImpl3() {
    final TwitterServiceImpl objectUnderTest = new TwitterServiceImpl();
    Reflector.setField(objectUnderTest, "TWEET_GROUP_FIELDS", null);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "TWITTER_FIELDS", null);
    Reflector.setField(objectUnderTest, "MAX_ENTITY_FOR_ROUND_ROBIN", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    return objectUnderTest;
  }

  private void arrangeData(final TwitterServiceImpl objectUnderTest, final TwitterSpec tSpec, final HashMap tweetMap) throws Throwable {
    thrown.expect(IllegalArgumentException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.frapi.service.impl.TwitterServiceImpl");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getTweets",
              Reflector.forName("java.util.Map"),
              Reflector.forName("com.firstrain.frapi.domain.TwitterSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, tweetMap, tSpec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrDocumentList.class, SolrServerReader.class,
    EntityBaseServiceRepository.class, Logger.class
  })
  @Test
  public void getTweetUsersInputZeroNegativeOutput0() throws Exception {

    // Setup mocks
    final TwitterServiceImpl objectUnderTest = arrangeTwitterServiceImpl4();
    final long groupId = 0L;
    final long tweetId = arrangeData4();

    // Act
    final List<Tweet> retval = objectUnderTest.getTweetUsers(groupId, tweetId);

    // Assert
    final ArrayList<Tweet> arrayList = new ArrayList<Tweet>();
    assertEquals(arrayList, retval);
  }

  private TwitterServiceImpl arrangeTwitterServiceImpl4() throws InvocationTargetException {
    PowerMockito.mockStatic(SolrServerReader.class);
    
    // Arrange
    final TwitterServiceImpl objectUnderTest =
        (TwitterServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.TwitterServiceImpl");
    final String[] stringArray = {};
    Reflector.setField(objectUnderTest, "TWEET_GROUP_FIELDS", stringArray);
    Reflector.setField(objectUnderTest, "industryClassificationMap", null);
    Reflector.setField(objectUnderTest, "TWITTER_FIELDS", null);
    Reflector.setField(objectUnderTest, "MAX_ENTITY_FOR_ROUND_ROBIN", 0);
    final DateBucketUtils dateBucketUtils = new DateBucketUtils();
    Reflector.setField(dateBucketUtils, "MAX_BUCKET_SIZE", 0);
    Reflector.setField(objectUnderTest, "dateBucketUtils", dateBucketUtils);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    PowerMockito.when(entityBaseServiceRepository.getTwitterServer()).thenReturn(solrServer);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    return objectUnderTest;
  }

  private long arrangeData4() throws Exception {
    final long tweetId = -9L;
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method isEmptyMethod = DTUMemberMatcher.method(SolrDocumentList.class, "isEmpty");
    PowerMockito.doReturn(true).when(solrDocumentList, isEmptyMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            String.class,
            boolean.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(String.class), isNull(String.class)),
            anyBoolean(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    return tweetId;
  }
}
