package com.firstrain.frapi.util;

import static org.junit.Assert.assertEquals;

import com.diffblue.deeptestutils.Reflector;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

public class MonitorAnalyticsUtilDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: MonitorAnalyticsUtil */
  // Test generated by Diffblue Deeptest.

  @Test
  public void addCountOutputVoid() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount");
    Reflector.setField(objectUnderTest, "count", 0);
    Reflector.setField(objectUnderTest, "id", 0);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("addCount");
    methodUnderTest.setAccessible(true);
    methodUnderTest.invoke(objectUnderTest);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputNegative() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance(
            "com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCountComparator");
    final Object o1 =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount");
    Reflector.setField(o1, "count", 1);
    Reflector.setField(o1, "id", 0);
    final Object o2 =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount");
    Reflector.setField(o2, "count", 0);
    Reflector.setField(o2, "id", 0);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCountComparator");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount"),
            Reflector.forName("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputPositive() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance(
            "com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCountComparator");
    final Object o1 =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount");
    Reflector.setField(o1, "count", 0);
    Reflector.setField(o1, "id", 0);
    final Object o2 =
        Reflector.getInstance("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount");
    Reflector.setField(o2, "count", 0);
    Reflector.setField(o2, "id", 0);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCountComparator");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount"),
            Reflector.forName("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void constructorInputZeroOutputVoid() throws Exception {

    // Arrange
    final int id = 0;

    // Act, creating object to test constructor
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.MonitorAnalyticsUtil$EntityCount");
    final Constructor<?> ctor = classUnderTest.getDeclaredConstructor(Reflector.forName("int"));
    ctor.setAccessible(true);
    final Object objectUnderTest = ctor.newInstance(id);
  }
}
