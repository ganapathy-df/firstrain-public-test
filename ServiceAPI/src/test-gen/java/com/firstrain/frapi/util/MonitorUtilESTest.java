/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:40:30 GMT 2018
 */

package com.firstrain.frapi.util;

import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;

import com.firstrain.db.obj.Items;
import com.firstrain.db.obj.Tags;
import com.firstrain.frapi.obj.MonitorObj;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.service.EntityProcessingService;
import com.firstrain.solr.client.SearchTokenEntry;
import java.util.List;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class MonitorUtilESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		MonitorObj monitorObj0 = new MonitorObj();
		SearchTokenEntry.Relation searchTokenEntry_Relation0 = SearchTokenEntry.Relation.MUST_HAVE;
		SearchTokenEntry searchTokenEntry0 = new SearchTokenEntry("doc.similar.hueristics",
				searchTokenEntry_Relation0);
		searchTokenEntry0.detectedAs(787, "doc.similar.hueristics");
		monitorUtil0.setEntityType(monitorObj0, searchTokenEntry0);
		assertEquals(MonitorObj.Type.TYPE_BUSINESS_LINE, monitorObj0.getType());
	}

	@Test(timeout = 4000)
	public void test1() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		MonitorObj monitorObj0 = new MonitorObj("`Dp?~", "`Dp?~");
		SearchTokenEntry.Relation searchTokenEntry_Relation0 = SearchTokenEntry.Relation.MUST_NOT_HAVE;
		SearchTokenEntry searchTokenEntry0 = new SearchTokenEntry("`Dp?~", searchTokenEntry_Relation0);
		searchTokenEntry0.detectedAs(778, "`Dp?~", "o?@N_MK{@'iR/6!)", "pWGxZ");
		monitorUtil0.setEntityType(monitorObj0, searchTokenEntry0);
		assertEquals(MonitorObj.Type.TYPE_CONTENT_TYPE, monitorObj0.getType());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test2() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		SearchTokenEntry.Relation searchTokenEntry_Relation0 = SearchTokenEntry.Relation.DEFAULT;
		SearchTokenEntry searchTokenEntry0 = new SearchTokenEntry("RJ!mQ'w} 4;$>",
				searchTokenEntry_Relation0, true);
		searchTokenEntry0.type = 512;
		// Undeclared exception!
		monitorUtil0.setEntityType(null, searchTokenEntry0);
	}

	@Test(timeout = 4000)
	public void test3() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		MonitorObj monitorObj0 = new MonitorObj();
		SearchTokenEntry.Relation searchTokenEntry_Relation0 = SearchTokenEntry.Relation.MUST_HAVE;
		SearchTokenEntry searchTokenEntry0 = new SearchTokenEntry("doc.similar.hueristics",
				searchTokenEntry_Relation0);
		searchTokenEntry0.detectedAs(770, "doc.similar.hueristics");
		monitorUtil0.setEntityType(monitorObj0, searchTokenEntry0);
		assertEquals(MonitorObj.Type.TYPE_TOPIC, monitorObj0.getType());
	}

	@Test(timeout = 4000)
	public void test4() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		MonitorObj monitorObj0 = new MonitorObj();
		SearchTokenEntry.Relation searchTokenEntry_Relation0 = SearchTokenEntry.Relation.MUST_HAVE;
		SearchTokenEntry searchTokenEntry0 = new SearchTokenEntry("doc.similar.hueristics",
				searchTokenEntry_Relation0);
		searchTokenEntry0.detectedAs(788, "doc.similar.hueristics");
		monitorUtil0.setEntityType(monitorObj0, searchTokenEntry0);
		assertEquals(MonitorObj.Type.TYPE_PERSON, monitorObj0.getType());
	}

	@Test(timeout = 4000)
	public void test5() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		MonitorObj monitorObj0 = new MonitorObj();
		SearchTokenEntry.Relation searchTokenEntry_Relation0 = SearchTokenEntry.Relation.MUST_HAVE;
		SearchTokenEntry searchTokenEntry0 = new SearchTokenEntry("doc.similar.hueristics",
				searchTokenEntry_Relation0);
		searchTokenEntry0.detectedAs(786, "doc.similar.hueristics");
		monitorUtil0.setEntityType(monitorObj0, searchTokenEntry0);
		assertEquals(MonitorObj.Type.TYPE_INDUSTRY, monitorObj0.getType());
	}

	@Test(timeout = 4000)
	public void test6() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		MonitorObj monitorObj0 = new MonitorObj("`Dp?~", "`Dp?~");
		SearchTokenEntry.Relation searchTokenEntry_Relation0 = SearchTokenEntry.Relation.MUST_NOT_HAVE;
		SearchTokenEntry searchTokenEntry0 = new SearchTokenEntry("`Dp?~", searchTokenEntry_Relation0);
		monitorUtil0.setEntityType(monitorObj0, searchTokenEntry0);
		assertEquals(MonitorObj.Type.TYPE_DEFAULT, monitorObj0.getType());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test7() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Tags.SearchOrderType tags_SearchOrderType0 = Tags.SearchOrderType.CUSTOM;
		Tags tags0 = new Tags();
		monitorUtil0.getOrderedSearches(null, tags_SearchOrderType0, tags0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test8() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Tags tags0 = new Tags();
		Tags.SearchOrderType tags_SearchOrderType0 = Tags.SearchOrderType.NAME;
		monitorUtil0.getOrderedSearches(null, tags_SearchOrderType0, tags0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test9() throws Exception {
		MonitorUtil monitorUtil0 = new MonitorUtil();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				entityBaseServiceRepository0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Tags.SearchOrderType tags_SearchOrderType0 = Tags.SearchOrderType.DATE;
		monitorUtil0.getOrderedSearches(null, tags_SearchOrderType0, null);
	}
}
