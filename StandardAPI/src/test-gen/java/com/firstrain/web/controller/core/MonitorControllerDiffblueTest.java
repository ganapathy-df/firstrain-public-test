package com.firstrain.web.controller.core;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.service.MonitorService;
import com.firstrain.web.service.core.FreemarkerTemplateService;
import com.firstrain.web.service.core.RequestParsingService;
import com.firstrain.web.service.core.ResponseDecoratorService;
import freemarker.template.Configuration;
import java.lang.reflect.Method;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class MonitorControllerDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: MonitorController */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void createInputNotNullNullNullOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final MonitorController objectUnderTest =
        (MonitorController)
            Reflector.getInstance("com.firstrain.web.controller.core.MonitorController");
    Reflector.setField(objectUnderTest, "storageService", null);
    Reflector.setField(objectUnderTest, "monitorService", null);
    final FreemarkerTemplateService freemarkerTemplateService =
        (FreemarkerTemplateService)
            Reflector.getInstance("com.firstrain.web.service.core.FreemarkerTemplateService");
    final Configuration configuration =
        (Configuration) Reflector.getInstance("freemarker.template.Configuration");
    Reflector.setField(freemarkerTemplateService, "ftlConfig", configuration);
    Reflector.setField(objectUnderTest, "ftlService", freemarkerTemplateService);
    final RequestParsingService requestParsingService =
        (RequestParsingService)
            Reflector.getInstance("com.firstrain.web.service.core.RequestParsingService");
    Reflector.setField(objectUnderTest, "requestParsingService", requestParsingService);
    Reflector.setField(objectUnderTest, "monitorBriefService", null);
    final ResponseDecoratorService responseDecoratorService =
        (ResponseDecoratorService)
            Reflector.getInstance("com.firstrain.web.service.core.ResponseDecoratorService");
    Reflector.setField(objectUnderTest, "responseDecoratorService", responseDecoratorService);
    final HttpServletRequest request =
        (HttpServletRequest) Reflector.getInstance("javax.servlet.http.HttpServletRequest");
    final HttpServletResponse response = null;
    final String reqBody = null;
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.create(request, response, reqBody);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void getListEmailsInputNotNullNullNullNullNullFalseOutputNullPointerException()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final MonitorController objectUnderTest =
        (MonitorController)
            Reflector.getInstance("com.firstrain.web.controller.core.MonitorController");
    Reflector.setField(objectUnderTest, "storageService", null);
    final MonitorService monitorService =
        (MonitorService) Reflector.getInstance("com.firstrain.frapi.service.MonitorService");
    Reflector.setField(objectUnderTest, "monitorService", monitorService);
    final FreemarkerTemplateService freemarkerTemplateService =
        (FreemarkerTemplateService)
            Reflector.getInstance("com.firstrain.web.service.core.FreemarkerTemplateService");
    final Configuration configuration =
        (Configuration) Reflector.getInstance("freemarker.template.Configuration");
    Reflector.setField(freemarkerTemplateService, "ftlConfig", configuration);
    Reflector.setField(objectUnderTest, "ftlService", freemarkerTemplateService);
    final RequestParsingService requestParsingService =
        (RequestParsingService)
            Reflector.getInstance("com.firstrain.web.service.core.RequestParsingService");
    Reflector.setField(objectUnderTest, "requestParsingService", requestParsingService);
    Reflector.setField(objectUnderTest, "monitorBriefService", null);
    Reflector.setField(objectUnderTest, "responseDecoratorService", null);
    final HttpServletRequest request =
        (HttpServletRequest) Reflector.getInstance("javax.servlet.http.HttpServletRequest");
    final HttpServletResponse response = null;
    final String monitorId = null;
    final String startDate = null;
    final String endDate = null;
    final boolean debug = false;
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getListEmails(request, response, monitorId, startDate, endDate, debug);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getMonitorServiceOutputNull() throws Exception {

    // Arrange
    final MonitorController objectUnderTest = new MonitorController();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.MonitorController");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("getMonitorService");
    methodUnderTest.setAccessible(true);
    final MonitorService retval = (MonitorService) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getRequestParsingServiceOutputNull() throws Exception {

    // Arrange
    final MonitorController objectUnderTest = new MonitorController();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.MonitorController");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("getRequestParsingService");
    methodUnderTest.setAccessible(true);
    final RequestParsingService retval =
        (RequestParsingService) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getResponseDecoratorServiceOutputNull() throws Exception {

    // Arrange
    final MonitorController objectUnderTest = new MonitorController();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.controller.core.MonitorController");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("getResponseDecoratorService");
    methodUnderTest.setAccessible(true);
    final ResponseDecoratorService retval =
        (ResponseDecoratorService) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertNull(retval);
  }
}
