package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.common.db.jpa.PersistenceProvider;
import com.firstrain.db.api.FRAPIArticleDbAPI;
import com.firstrain.db.api.TakeDownDbAPI;
import com.firstrain.db.obj.APIArticleHide;
import com.firstrain.db.obj.APIArticleTakeDown;
import java.lang.reflect.Method;
import java.util.List;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class RestrictContentRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: RestrictContentRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TakeDownDbAPI.class)
  @Test
  public void fetchSourceIdsCSVByEnterpriseIdInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final RestrictContentRepositoryImpl objectUnderTest = new RestrictContentRepositoryImpl();
    final long enterpriseId = 0L;
    final Method fetchSourceIdsCSVByEnterpriseIdMethod =
        DTUMemberMatcher.method(TakeDownDbAPI.class, "fetchSourceIdsCSVByEnterpriseId", long.class);
    PowerMockito.doReturn(null)
        .when(TakeDownDbAPI.class, fetchSourceIdsCSVByEnterpriseIdMethod)
        .withArguments(anyLong());

    // Act
    final String retval = objectUnderTest.fetchSourceIdsCSVByEnterpriseId(enterpriseId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(FRAPIArticleDbAPI.class)
  @Test
  public void getAllHiddenArticlesInputZeroNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FRAPIArticleDbAPI.class);

    // Arrange
    final RestrictContentRepositoryImpl objectUnderTest = new RestrictContentRepositoryImpl();
    final long enterpriseId = 0L;
    final String articlePrefix = null;
    final Method getAllHiddenArticlesMethod =
        DTUMemberMatcher.method(
            FRAPIArticleDbAPI.class, "getAllHiddenArticles", long.class, String.class);
    PowerMockito.doReturn(null)
        .when(FRAPIArticleDbAPI.class, getAllHiddenArticlesMethod)
        .withArguments(anyLong(), or(isA(String.class), isNull(String.class)));

    // Act
    final List<APIArticleHide> retval =
        objectUnderTest.getAllHiddenArticles(enterpriseId, articlePrefix);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(FRAPIArticleDbAPI.class)
  @Test
  public void getArticleInputZeroNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FRAPIArticleDbAPI.class);

    // Arrange
    final RestrictContentRepositoryImpl objectUnderTest = new RestrictContentRepositoryImpl();
    final long enterpriseId = 0L;
    final String articleId = null;
    final Method getArticleMethod =
        DTUMemberMatcher.method(FRAPIArticleDbAPI.class, "getArticle", long.class, String.class);
    PowerMockito.doReturn(null)
        .when(FRAPIArticleDbAPI.class, getArticleMethod)
        .withArguments(anyLong(), or(isA(String.class), isNull(String.class)));

    // Act
    final APIArticleHide retval = objectUnderTest.getArticle(enterpriseId, articleId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TakeDownDbAPI.class)
  @Test
  public void getTakeDownArticleInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final RestrictContentRepositoryImpl objectUnderTest = new RestrictContentRepositoryImpl();
    final long articleId = 0L;
    final Method getTakeDownArticleMethod =
        DTUMemberMatcher.method(TakeDownDbAPI.class, "getTakeDownArticle", long.class);
    PowerMockito.doReturn(null)
        .when(TakeDownDbAPI.class, getTakeDownArticleMethod)
        .withArguments(anyLong());

    // Act
    final APIArticleTakeDown retval = objectUnderTest.getTakeDownArticle(articleId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    FRAPIArticleDbAPI.class,
    PersistenceProvider.class,
    APIArticleHide.class,
    RestrictContentRepositoryImpl.class
  })
  @Test
  public void persistArticleInputZeroNullOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(FRAPIArticleDbAPI.class);

    // Arrange
    final RestrictContentRepositoryImpl objectUnderTest = new RestrictContentRepositoryImpl();
    final long enterpriseId = 0L;
    final String articleId = null;
    final APIArticleHide aPIArticleHide = PowerMockito.mock(APIArticleHide.class);
    PowerMockito.whenNew(APIArticleHide.class).withNoArguments().thenReturn(aPIArticleHide);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.persistArticle(enterpriseId, articleId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    TakeDownDbAPI.class, APIArticleTakeDown.class,
    RestrictContentRepositoryImpl.class, PersistenceProvider.class
  })
  @Test
  public void persistTakeDownArticleInputNegativeOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TakeDownDbAPI.class);

    // Arrange
    final RestrictContentRepositoryImpl objectUnderTest = new RestrictContentRepositoryImpl();
    final long articleId = -8_446_744_073_709_551_616L;
    final APIArticleTakeDown aPIArticleTakeDown = PowerMockito.mock(APIArticleTakeDown.class);
    PowerMockito.whenNew(APIArticleTakeDown.class).withNoArguments().thenReturn(aPIArticleTakeDown);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.persistTakeDownArticle(articleId);

    // Method is not expected to return due to exception thrown
  }
}
