/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:18:53 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.anyLong;
import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;

import com.firstrain.db.obj.APIAccount;
import com.firstrain.db.obj.APIAuthKey;
import com.firstrain.frapi.pojo.APIDefinitionPojo;
import com.firstrain.frapi.pojo.AuthAPIResponse;
import com.firstrain.frapi.repository.AuthServiceRepository;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.Test;


public class AuthServiceImplESTest {

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test0() throws Exception {
		AuthServiceImpl authServiceImpl0 = new AuthServiceImpl();
		APIAuthKey aPIAuthKey0 = new APIAuthKey();
		APIAccount aPIAccount0 = mock(APIAccount.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(aPIAccount0).getApiVersion();
		doReturn(0L).when(aPIAccount0).getEnterpriseId();
		doReturn(null).when(aPIAccount0).getExcludedAPICSV();
		doReturn(null).when(aPIAccount0).getExcludedSectionCSV();
		doReturn(null).when(aPIAccount0).getIncludedAPICSV();
		doReturn(null).when(aPIAccount0).getVersionEndDate();
		doReturn(null).when(aPIAccount0).getVersionStartDate();
		AuthServiceRepository authServiceRepository0 = mock(AuthServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(aPIAccount0).when(authServiceRepository0).getAccountById(anyLong());
		doReturn(aPIAuthKey0).when(authServiceRepository0).getAuthKeyDetails(anyString());
		Injector.inject(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class, "apiAuthRepository",
        authServiceRepository0);
		Injector.validateBean(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class);
		authServiceImpl0.getAuthKeyDetails("");
	}

	@Test(timeout = 4000)
	public void test1() throws Exception {
		AuthServiceImpl authServiceImpl0 = new AuthServiceImpl();
		AuthServiceRepository authServiceRepository0 = mock(AuthServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(authServiceRepository0).getAuthKeyDetails(anyString());
		Injector.inject(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class, "apiAuthRepository",
        authServiceRepository0);
		Injector.validateBean(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class);
		AuthAPIResponse authAPIResponse0 = authServiceImpl0.getAuthKeyDetails("$f=/>/y@4wku");
		assertEquals(109, authAPIResponse0.getStatusCode());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test2() throws Exception {
		AuthServiceImpl authServiceImpl0 = new AuthServiceImpl();
		String string0 = ",-keCGo0WJ3:B";
		APIAuthKey aPIAuthKey0 = new APIAuthKey();
		APIAccount aPIAccount0 = mock(APIAccount.class, new ViolatedAssumptionAnswer());
		APIAccount aPIAccount1 = mock(APIAccount.class, new ViolatedAssumptionAnswer());
		authServiceImpl0.getAPIDefinitions();
	}

	@Test(timeout = 4000)
	public void test3() throws Exception {
		AuthServiceImpl authServiceImpl0 = new AuthServiceImpl();
		AuthServiceRepository authServiceRepository0 = mock(AuthServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(authServiceRepository0).getAPIDefinitionList();
		Injector.inject(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class, "apiAuthRepository",
        authServiceRepository0);
		Injector.validateBean(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class);
		List<APIDefinitionPojo> list0 = authServiceImpl0.getAPIDefinitions();
		assertEquals(0, list0.size());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test4() throws Exception {
		AuthServiceImpl authServiceImpl0 = new AuthServiceImpl();
		long long0 = 0L;
		String string0 = "Could not instantiate configurator [";
		int int0 = 129;
		MockInstant.now();
		authServiceImpl0.generateAuthKey("", "Error during fetching API definitions: ", "");
	}

	@Test(timeout = 4000)
	public void test5() throws Exception {
		AuthServiceImpl authServiceImpl0 = new AuthServiceImpl();
		AuthServiceRepository authServiceRepository0 = mock(AuthServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(authServiceRepository0)
				.getAccount(anyString(), anyString(), anyString());
		Injector.inject(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class, "apiAuthRepository",
        authServiceRepository0);
		Injector.validateBean(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class);
		AuthAPIResponse authAPIResponse0 = authServiceImpl0.generateAuthKey("", "", "");
		assertEquals(105, authAPIResponse0.getStatusCode());
	}

	@Test(timeout = 4000)
	public void test6() throws Exception {
		AuthServiceImpl authServiceImpl0 = new AuthServiceImpl();
		AuthServiceRepository authServiceRepository0 = mock(AuthServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class, "apiAuthRepository",
        authServiceRepository0);
		Injector.validateBean(authServiceImpl0, com.firstrain.frapi.service.impl.AuthServiceImpl.class);
		ArrayList<String> arrayList0 = authServiceImpl0.csvToArrayList("$ou:td6C`&2m17R");
		assertEquals(1, arrayList0.size());
	}
}
