package com.firstrain.feed.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.content.similarity.measures.DiceCoefficientStrategy;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.util.ContentType;
import com.firstrain.solr.client.DocCatEntry;
import com.firstrain.solr.client.DocEntry;
import com.firstrain.solr.client.EntityEntry;
import com.firstrain.web.pojo.Source;
import java.io.File;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrRequest.METHOD;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.request.QueryRequest;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.apache.solr.common.params.SolrParams;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class FeedUtilsDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: FeedUtils */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Entity.class, FeedUtils.class, EntityEntry.class})
  @Test
  public void convertEntityFromEntityEntryInputNotNullZeroZeroOutputNotNull() throws Exception {

    // Arrange
    final EntityEntry entry = PowerMockito.mock(EntityEntry.class);
    final Method getTypeMethod = DTUMemberMatcher.method(EntityEntry.class, "getType");
    PowerMockito.doReturn(768).when(entry, getTypeMethod).withNoArguments();
    final Method getIdMethod = DTUMemberMatcher.method(EntityEntry.class, "getId");
    PowerMockito.doReturn("").when(entry, getIdMethod).withNoArguments();
    final Method getPrimaryTickerMethod =
        DTUMemberMatcher.method(EntityEntry.class, "getPrimaryTicker");
    PowerMockito.doReturn("").when(entry, getPrimaryTickerMethod).withNoArguments();
    final Method getNameMethod = DTUMemberMatcher.method(EntityEntry.class, "getName");
    PowerMockito.doReturn("").when(entry, getNameMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(EntityEntry.class, "getSearchToken");
    PowerMockito.doReturn("").when(entry, getSearchTokenMethod).withNoArguments();
    Reflector.setField(entry, "type", 0);
    Reflector.setField(entry, "id", null);
    final short band = (short) 0;
    final short relevance = (short) 0;
    final Entity entity = PowerMockito.mock(Entity.class);
    PowerMockito.whenNew(Entity.class).withNoArguments().thenReturn(entity);

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.feed.utils.FeedUtils");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "convertEntityFromEntityEntry",
            Reflector.forName("com.firstrain.solr.client.EntityEntry"),
            Reflector.forName("short"),
            Reflector.forName("short"));
    methodUnderTest.setAccessible(true);
    final Entity retval = (Entity) methodUnderTest.invoke(null, entry, band, relevance);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void convertEntityFromEntityEntryInputNullZeroZeroOutputNull() throws Exception {

    // Arrange
    final EntityEntry entry = null;
    final short band = (short) 0;
    final short relevance = (short) 0;

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.feed.utils.FeedUtils");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "convertEntityFromEntityEntry",
            Reflector.forName("com.firstrain.solr.client.EntityEntry"),
            Reflector.forName("short"),
            Reflector.forName("short"));
    methodUnderTest.setAccessible(true);
    final Entity retval = (Entity) methodUnderTest.invoke(null, entry, band, relevance);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Source.class, FeedUtils.class, EntityEntry.class})
  @Test
  public void convertSourceFromEntityEntryInputNotNullZeroOutputNotNull() throws Exception {

    // Arrange
    final EntityEntry entry = PowerMockito.mock(EntityEntry.class);
    final Method getNameMethod = DTUMemberMatcher.method(EntityEntry.class, "getName");
    PowerMockito.doReturn(null).when(entry, getNameMethod).withNoArguments();
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(EntityEntry.class, "getSearchToken");
    PowerMockito.doReturn(null).when(entry, getSearchTokenMethod).withNoArguments();
    Reflector.setField(entry, "type", 0);
    Reflector.setField(entry, "id", null);
    final short band = (short) 0;
    final Source source = PowerMockito.mock(Source.class);
    PowerMockito.whenNew(Source.class).withNoArguments().thenReturn(source);

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.feed.utils.FeedUtils");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "convertSourceFromEntityEntry",
            Reflector.forName("com.firstrain.solr.client.EntityEntry"),
            Reflector.forName("short"));
    methodUnderTest.setAccessible(true);
    final Source retval = (Source) methodUnderTest.invoke(null, entry, band);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({EntityEntry.class, DocCatEntry.class, ContentType.class})
  @Test
  public void getEntityPOJOListInput1NotNullTrueOutput0() throws Exception {

    // Arrange
    final ArrayList<DocCatEntry> docEntryList = new ArrayList<DocCatEntry>();
    final DocCatEntry docCatEntry = PowerMockito.mock(DocCatEntry.class);
    final EntityEntry entityEntry = PowerMockito.mock(EntityEntry.class);
    final Method getIdMethod = DTUMemberMatcher.method(EntityEntry.class, "getId");
    PowerMockito.doReturn("9").when(entityEntry, getIdMethod).withNoArguments();
    Reflector.setField(entityEntry, "type", 0);
    Reflector.setField(entityEntry, "id", "");
    final Method getEntityMethod = DTUMemberMatcher.method(DocCatEntry.class, "getEntity");
    PowerMockito.doReturn(entityEntry).when(docCatEntry, getEntityMethod).withNoArguments();
    Reflector.setField(docCatEntry, "entity", null);
    Reflector.setField(docCatEntry, "band", (short) 0);
    Reflector.setField(docCatEntry, "relevanceNormalized", (short) 0);
    docEntryList.add(docCatEntry);
    final ContentType contentType = PowerMockito.mock(ContentType.class);
    final Method getIdMethod1 = DTUMemberMatcher.method(ContentType.class, "getId");
    PowerMockito.doReturn(25).when(contentType, getIdMethod1).withNoArguments();
    final boolean doCheck = true;

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.feed.utils.FeedUtils");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntityPOJOList",
            Reflector.forName("java.util.List"),
            Reflector.forName("com.firstrain.frapi.util.ContentType"),
            Reflector.forName("boolean"));
    methodUnderTest.setAccessible(true);
    final List<Entity> retval =
        (List<Entity>) methodUnderTest.invoke(null, docEntryList, contentType, doCheck);

    // Assert
    final ArrayList<Entity> arrayList = new ArrayList<Entity>();
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    QueryRequest.class,
    SolrDocumentList.class,
    QueryResponse.class,
    FeedUtils.class,
    SolrDocument.class,
    SolrQuery.class
  })
  @Test
  public void getIndustryCatIdInputNotNullNullOutputZero() throws Exception {

    // Arrange
    final String token = "!!!!!!!!";
    final SolrServer entitySolrServer = null;
    final QueryRequest queryRequest = PowerMockito.mock(QueryRequest.class);
    final QueryResponse queryResponse = PowerMockito.mock(QueryResponse.class);
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method getNumFoundMethod = DTUMemberMatcher.method(SolrDocumentList.class, "getNumFound");
    PowerMockito.doReturn(1L).when(solrDocumentList, getNumFoundMethod).withNoArguments();
    final SolrDocument solrDocument = PowerMockito.mock(SolrDocument.class);
    final Method getFieldValueMethod =
        DTUMemberMatcher.method(SolrDocument.class, "getFieldValue", String.class);
    PowerMockito.doReturn(0)
        .when(solrDocument, getFieldValueMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method getMethod = DTUMemberMatcher.method(SolrDocumentList.class, "get", int.class);
    PowerMockito.doReturn(solrDocument).when(solrDocumentList, getMethod).withArguments(anyInt());
    final Method getResultsMethod = DTUMemberMatcher.method(QueryResponse.class, "getResults");
    PowerMockito.doReturn(solrDocumentList).when(queryResponse, getResultsMethod).withNoArguments();
    final Method processMethod =
        DTUMemberMatcher.method(QueryRequest.class, "process", SolrServer.class);
    PowerMockito.doReturn(queryResponse)
        .when(queryRequest, processMethod)
        .withArguments(or(isA(SolrServer.class), isNull(SolrServer.class)));
    PowerMockito.whenNew(QueryRequest.class)
        .withParameterTypes(SolrParams.class, METHOD.class)
        .withArguments(
            or(isA(SolrParams.class), isNull(SolrParams.class)),
            or(isA(METHOD.class), isNull(METHOD.class)))
        .thenReturn(queryRequest);
    final SolrQuery solrQuery = PowerMockito.mock(SolrQuery.class);
    final SolrQuery solrQuery1 = PowerMockito.mock(SolrQuery.class);
    final Method setRowsMethod = DTUMemberMatcher.method(SolrQuery.class, "setRows", Integer.class);
    PowerMockito.doReturn(solrQuery1)
        .when(solrQuery, setRowsMethod)
        .withArguments(or(isA(Integer.class), isNull(Integer.class)));
    final SolrQuery solrQuery2 = PowerMockito.mock(SolrQuery.class);
    final Method setQueryMethod =
        DTUMemberMatcher.method(SolrQuery.class, "setQuery", String.class);
    PowerMockito.doReturn(solrQuery2)
        .when(solrQuery, setQueryMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final SolrQuery solrQuery3 = PowerMockito.mock(SolrQuery.class);
    final Method setStartMethod =
        DTUMemberMatcher.method(SolrQuery.class, "setStart", Integer.class);
    PowerMockito.doReturn(solrQuery3)
        .when(solrQuery, setStartMethod)
        .withArguments(or(isA(Integer.class), isNull(Integer.class)));
    final Method setQueryTypeMethod =
        DTUMemberMatcher.method(SolrQuery.class, "setQueryType", String.class);
    PowerMockito.doReturn(null)
        .when(solrQuery, setQueryTypeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.whenNew(SolrQuery.class).withNoArguments().thenReturn(solrQuery);

    // Act
    final long retval = FeedUtils.getIndustryCatId(token, entitySolrServer);

    // Assert
    assertEquals(0L, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTrimmedSummaryInputNotNullNotNullOutputNotNull() throws Exception {

    // Arrange
    final String summary = "";
    final DocEntry doc = (DocEntry) Reflector.getInstance("com.firstrain.solr.client.DocEntry");
    Reflector.setField(doc, "matchedCompanies", null);
    Reflector.setField(doc, "matchedContentTypes", null);
    Reflector.setField(doc, "summary", null);
    Reflector.setField(doc, "sitedocId", null);
    Reflector.setField(doc, "matchedTopics", null);
    Reflector.setField(doc, "title", "");
    final ArrayList arrayList = new ArrayList();
    Reflector.setField(doc, "catEntries", arrayList);
    Reflector.setField(doc, "bodyLength", 27_524_933);
    Reflector.setField(doc, "otrQuotes", null);

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.feed.utils.FeedUtils");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getTrimmedSummary",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.solr.client.DocEntry"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(null, summary, doc);

    // Assert
    assertEquals("...", retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({File.class, FeedUtils.class})
  @Test
  public void getUniqueFileNameInputNotNullNotNullOutputNotNull() throws Exception {

    // Arrange
    final String location = "DDDDDD";
    final String fileName = "\'\'\'\'\'\'\'\'\'\'";
    final File file1 = PowerMockito.mock(File.class);
    PowerMockito.when(file1.exists()).thenReturn(false);
    Reflector.setField(file1, "prefixLength", 0);
    Reflector.setField(file1, "path", "DDDDDD/\'\'\'\'\'\'\'\'\'\'_2.json");
    final File file = PowerMockito.mock(File.class);
    PowerMockito.when(file.exists()).thenReturn(true);
    Reflector.setField(file, "prefixLength", 0);
    Reflector.setField(file, "path", "DDDDDD/\'\'\'\'\'\'\'\'\'\'_1.json");
    PowerMockito.whenNew(File.class)
        .withParameterTypes(String.class)
        .withArguments(or(isA(String.class), isNull(String.class)))
        .thenReturn(file)
        .thenReturn(file1);

    // Act
    final String retval = FeedUtils.getUniqueFileName(location, fileName);

    // Assert
    assertEquals("\'\'\'\'\'\'\'\'\'\'_2", retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(DiceCoefficientStrategy.class)
  @Test
  public void similarSummaryInputNullNullOutputFalse() throws Exception {

    // Arrange
    final FeedUtils objectUnderTest =
        (FeedUtils) Reflector.getInstance("com.firstrain.feed.utils.FeedUtils");
    final DiceCoefficientStrategy diceCoefficientStrategy =
        PowerMockito.mock(DiceCoefficientStrategy.class);
    final Method scoreMethod =
        DTUMemberMatcher.method(
            DiceCoefficientStrategy.class, "score", String.class, String.class, int.class);
    PowerMockito.doReturn(0.0)
        .when(diceCoefficientStrategy, scoreMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt());
    Reflector.setField(objectUnderTest, "diceMeasure", diceCoefficientStrategy);
    final String summary1 = null;
    final String summary2 = null;

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.feed.utils.FeedUtils");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "similarSummary",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(objectUnderTest, summary1, summary2);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(DiceCoefficientStrategy.class)
  @Test
  public void similarSummaryInputNullNullOutputTrue() throws Exception {

    // Arrange
    final FeedUtils objectUnderTest =
        (FeedUtils) Reflector.getInstance("com.firstrain.feed.utils.FeedUtils");
    final DiceCoefficientStrategy diceCoefficientStrategy =
        PowerMockito.mock(DiceCoefficientStrategy.class);
    final Method scoreMethod =
        DTUMemberMatcher.method(
            DiceCoefficientStrategy.class, "score", String.class, String.class, int.class);
    PowerMockito.doReturn(0x1.333b333333333p-3 /* 0.150015 */)
        .when(diceCoefficientStrategy, scoreMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt());
    Reflector.setField(objectUnderTest, "diceMeasure", diceCoefficientStrategy);
    final String summary1 = null;
    final String summary2 = null;

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.feed.utils.FeedUtils");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "similarSummary",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean) methodUnderTest.invoke(objectUnderTest, summary1, summary2);

    // Assert
    assertEquals(true, retval);
  }
}
