package com.firstrain.web.service.staticdata;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.Tweet;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.pojo.wrapper.TweetSet;
import com.firstrain.web.pojo.Content;
import com.firstrain.web.pojo.EntityStandard;
import java.lang.reflect.Method;
import java.util.ArrayList;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class ResponseDecoratorServiceDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: ResponseDecoratorService */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TweetSet.class)
  @Test
  public void getItemWrapperResponseInputNotNullNullOutputIndexOutOfBoundsException()
      throws Exception {

    // Arrange
    final ResponseDecoratorService objectUnderTest = new ResponseDecoratorService();
    final TweetSet tweetSet = PowerMockito.mock(TweetSet.class);
    final ArrayList arrayList = new ArrayList();
    final Method getTweetsMethod = DTUMemberMatcher.method(TweetSet.class, "getTweets");
    PowerMockito.doReturn(arrayList).when(tweetSet, getTweetsMethod).withNoArguments();
    final String msgKey = null;

    // Act
    thrown.expect(IndexOutOfBoundsException.class);
    objectUnderTest.getItemWrapperResponse(tweetSet, msgKey);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    com.firstrain.web.pojo.Tweet.class,
    Tweet.class,
    Content.class,
    ResponseDecoratorService.class
  })
  @Test
  public void getTweetContentInput1OutputNotNull() throws Exception {

    // Arrange
    final ResponseDecoratorService objectUnderTest = new ResponseDecoratorService();
    final ArrayList<Tweet> tweetLstRst = new ArrayList<Tweet>();
    final Tweet tweet = arrrangeTweet();
    final Method getNameMethod = arrangeMethod(tweet);
    arrangeData(getNameMethod, objectUnderTest, tweet, tweetLstRst);
  }

  private Tweet arrrangeTweet() throws Exception {
    final Tweet tweet = PowerMockito.mock(Tweet.class);
    final Method getTweetMethod = DTUMemberMatcher.method(Tweet.class, "getTweet");
    PowerMockito.doReturn(null).when(tweet, getTweetMethod).withNoArguments();
    final Method getUserImageMethod = DTUMemberMatcher.method(Tweet.class, "getUserImage");
    PowerMockito.doReturn(null).when(tweet, getUserImageMethod).withNoArguments();
    final Method getCoreTweetMethod = DTUMemberMatcher.method(Tweet.class, "getCoreTweet");
    PowerMockito.doReturn(null).when(tweet, getCoreTweetMethod).withNoArguments();
    final Method getDescriptionMethod = DTUMemberMatcher.method(Tweet.class, "getDescription");
    PowerMockito.doReturn(null).when(tweet, getDescriptionMethod).withNoArguments();
    final Method getTweetIdMethod = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn(null).when(tweet, getTweetIdMethod).withNoArguments();
    return tweet;
  }

  private void arrangeData(final Method getNameMethod, final ResponseDecoratorService objectUnderTest, final Tweet tweet, final ArrayList<Tweet> tweetLstRst) throws Exception {
    PowerMockito.doReturn(null).when(tweet, getNameMethod).withNoArguments();
    final Method getEntityMethod = DTUMemberMatcher.method(Tweet.class, "getEntity");
    PowerMockito.doReturn(null).when(tweet, getEntityMethod).withNoArguments();
    final Method getExpandedLinksMethod = DTUMemberMatcher.method(Tweet.class, "getExpandedLinks");
    PowerMockito.doReturn(null).when(tweet, getExpandedLinksMethod).withNoArguments();
    tweetLstRst.add(tweet);
    final com.firstrain.web.pojo.Tweet tweet1 =
        PowerMockito.mock(com.firstrain.web.pojo.Tweet.class);
    PowerMockito.whenNew(com.firstrain.web.pojo.Tweet.class).withNoArguments().thenReturn(tweet1);
    final Content content = PowerMockito.mock(Content.class);
    PowerMockito.whenNew(Content.class).withNoArguments().thenReturn(content);
    
    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.staticdata.ResponseDecoratorService");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getTweetContent", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final Content retval = (Content) methodUnderTest.invoke(objectUnderTest, tweetLstRst);
    
    // Assert
    assertNotNull(retval);
  }

  private Method arrangeMethod(final Tweet tweet) throws Exception {
    final Method getTitleMethod = DTUMemberMatcher.method(Tweet.class, "getTitle");
    PowerMockito.doReturn(null).when(tweet, getTitleMethod).withNoArguments();
    final Method getTweetCreationDateMethod =
        DTUMemberMatcher.method(Tweet.class, "getTweetCreationDate");
    PowerMockito.doReturn(null).when(tweet, getTweetCreationDateMethod).withNoArguments();
    final Method getScreenNameMethod = DTUMemberMatcher.method(Tweet.class, "getScreenName");
    PowerMockito.doReturn(null).when(tweet, getScreenNameMethod).withNoArguments();
    final Method getNameMethod = DTUMemberMatcher.method(Tweet.class, "getName");
    return getNameMethod;
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({com.firstrain.web.pojo.Tweet.class, Tweet.class, ResponseDecoratorService.class})
  @Test
  public void tweetConvertorInputNotNullOutputNotNull() throws Exception {

    // Arrange
    final ResponseDecoratorService objectUnderTest = new ResponseDecoratorService();
    final Tweet tweetRst = arrangeTweet();
    final Method getTweetCreationDateMethod =
        DTUMemberMatcher.method(Tweet.class, "getTweetCreationDate");
    arrangeData(getTweetCreationDateMethod, tweetRst);
    arrangeDoTweetConvertorAndAssert(objectUnderTest, tweetRst);
  }

  private void arrangeData(final Method getTweetCreationDateMethod, final Tweet tweetRst) throws Exception {
    PowerMockito.doReturn(null).when(tweetRst, getTweetCreationDateMethod).withNoArguments();
    final Method getNameMethod = DTUMemberMatcher.method(Tweet.class, "getName");
    PowerMockito.doReturn(null).when(tweetRst, getNameMethod).withNoArguments();
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    final Method getExpandedLinksMethod = DTUMemberMatcher.method(Tweet.class, "getExpandedLinks");
    PowerMockito.doReturn(arrayList).when(tweetRst, getExpandedLinksMethod).withNoArguments();
    final Method getEntityMethod = DTUMemberMatcher.method(Tweet.class, "getEntity");
    PowerMockito.doReturn(null).when(tweetRst, getEntityMethod).withNoArguments();
    final Method getDescriptionMethod = DTUMemberMatcher.method(Tweet.class, "getDescription");
    PowerMockito.doReturn(null).when(tweetRst, getDescriptionMethod).withNoArguments();
    final Method getCoreTweetMethod = DTUMemberMatcher.method(Tweet.class, "getCoreTweet");
    PowerMockito.doReturn(null).when(tweetRst, getCoreTweetMethod).withNoArguments();
  }

  private void arrangeDoTweetConvertorAndAssert(final ResponseDecoratorService objectUnderTest, final Tweet tweetRst) throws Exception {
    final Method getTweetIdMethod = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn(null).when(tweetRst, getTweetIdMethod).withNoArguments();
    final Method getScreenNameMethod = DTUMemberMatcher.method(Tweet.class, "getScreenName");
    PowerMockito.doReturn(null).when(tweetRst, getScreenNameMethod).withNoArguments();
    final com.firstrain.web.pojo.Tweet tweet =
        PowerMockito.mock(com.firstrain.web.pojo.Tweet.class);
    PowerMockito.whenNew(com.firstrain.web.pojo.Tweet.class).withNoArguments().thenReturn(tweet);
    
    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.staticdata.ResponseDecoratorService");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "tweetConvertor", Reflector.forName("com.firstrain.frapi.domain.Tweet"));
    methodUnderTest.setAccessible(true);
    final com.firstrain.web.pojo.Tweet retval =
        (com.firstrain.web.pojo.Tweet) methodUnderTest.invoke(objectUnderTest, tweetRst);
    
    // Assert
    assertNotNull(retval);
  }

  private Tweet arrangeTweet() throws Exception {
    final Tweet tweetRst = PowerMockito.mock(Tweet.class);
    final Method getTweetMethod = DTUMemberMatcher.method(Tweet.class, "getTweet");
    PowerMockito.doReturn(null).when(tweetRst, getTweetMethod).withNoArguments();
    final Method getUserImageMethod = DTUMemberMatcher.method(Tweet.class, "getUserImage");
    PowerMockito.doReturn(null).when(tweetRst, getUserImageMethod).withNoArguments();
    final Method getTitleMethod = DTUMemberMatcher.method(Tweet.class, "getTitle");
    PowerMockito.doReturn(null).when(tweetRst, getTitleMethod).withNoArguments();
    return tweetRst;
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    ResponseDecoratorService.class,
    Entity.class,
    EntityStandard.class,
    com.firstrain.web.pojo.Tweet.class,
    Tweet.class
  })
  @Test
  public void tweetConvertorInputNotNullOutputNotNull2() throws Exception {

    // Arrange
    final ResponseDecoratorService objectUnderTest = new ResponseDecoratorService();
    final Tweet tweetRst = PowerMockito.mock(Tweet.class);
    final Method getTweetMethod = DTUMemberMatcher.method(Tweet.class, "getTweet");
    PowerMockito.doReturn(null).when(tweetRst, getTweetMethod).withNoArguments();
    final Method getUserImageMethod = DTUMemberMatcher.method(Tweet.class, "getUserImage");
    PowerMockito.doReturn(null).when(tweetRst, getUserImageMethod).withNoArguments();
    final Method getTitleMethod = DTUMemberMatcher.method(Tweet.class, "getTitle");
    PowerMockito.doReturn(null).when(tweetRst, getTitleMethod).withNoArguments();
    final Method getTweetCreationDateMethod =
        DTUMemberMatcher.method(Tweet.class, "getTweetCreationDate");
    PowerMockito.doReturn(null).when(tweetRst, getTweetCreationDateMethod).withNoArguments();
    final Method getNameMethod = DTUMemberMatcher.method(Tweet.class, "getName");
    PowerMockito.doReturn(null).when(tweetRst, getNameMethod).withNoArguments();
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    final Method getExpandedLinksMethod = DTUMemberMatcher.method(Tweet.class, "getExpandedLinks");
    PowerMockito.doReturn(arrayList).when(tweetRst, getExpandedLinksMethod).withNoArguments();
    final Entity entity = PowerMockito.mock(Entity.class);
    final Method getNameMethod1 = DTUMemberMatcher.method(Entity.class, "getName");
    PowerMockito.doReturn(null).when(entity, getNameMethod1).withNoArguments();
    final Method getSearchTokenMethod = DTUMemberMatcher.method(Entity.class, "getSearchToken");
    PowerMockito.doReturn(null).when(entity, getSearchTokenMethod).withNoArguments();
    final Method getEntityMethod = DTUMemberMatcher.method(Tweet.class, "getEntity");
    PowerMockito.doReturn(entity).when(tweetRst, getEntityMethod).withNoArguments();
    final Method getDescriptionMethod = DTUMemberMatcher.method(Tweet.class, "getDescription");
    PowerMockito.doReturn(null).when(tweetRst, getDescriptionMethod).withNoArguments();
    final Method getCoreTweetMethod = DTUMemberMatcher.method(Tweet.class, "getCoreTweet");
    PowerMockito.doReturn(null).when(tweetRst, getCoreTweetMethod).withNoArguments();
    final Method getTweetIdMethod = DTUMemberMatcher.method(Tweet.class, "getTweetId");
    PowerMockito.doReturn(null).when(tweetRst, getTweetIdMethod).withNoArguments();
    final Method getScreenNameMethod = DTUMemberMatcher.method(Tweet.class, "getScreenName");
    PowerMockito.doReturn(null).when(tweetRst, getScreenNameMethod).withNoArguments();
    final com.firstrain.web.pojo.Tweet tweet =
        PowerMockito.mock(com.firstrain.web.pojo.Tweet.class);
    PowerMockito.whenNew(com.firstrain.web.pojo.Tweet.class).withNoArguments().thenReturn(tweet);
    final EntityStandard entityStandard = PowerMockito.mock(EntityStandard.class);
    PowerMockito.whenNew(EntityStandard.class).withNoArguments().thenReturn(entityStandard);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.staticdata.ResponseDecoratorService");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "tweetConvertor", Reflector.forName("com.firstrain.frapi.domain.Tweet"));
    methodUnderTest.setAccessible(true);
    final com.firstrain.web.pojo.Tweet retval =
        (com.firstrain.web.pojo.Tweet) methodUnderTest.invoke(objectUnderTest, tweetRst);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void tweetConvertorInputNullOutputNull() throws Exception {

    // Arrange
    final ResponseDecoratorService objectUnderTest = new ResponseDecoratorService();
    final Tweet tweetRst = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.web.service.staticdata.ResponseDecoratorService");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "tweetConvertor", Reflector.forName("com.firstrain.frapi.domain.Tweet"));
    methodUnderTest.setAccessible(true);
    final com.firstrain.web.pojo.Tweet retval =
        (com.firstrain.web.pojo.Tweet) methodUnderTest.invoke(objectUnderTest, tweetRst);

    // Assert
    assertNull(retval);
  }
}
