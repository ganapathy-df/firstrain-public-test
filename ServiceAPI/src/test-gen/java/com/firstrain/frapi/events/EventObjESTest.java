/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:44:11 GMT 2018
 */

package com.firstrain.frapi.events;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import com.firstrain.obj.IEntityInfo;
import java.util.Date;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.Test;


public class EventObjESTest {

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test00() throws Exception {
		EventObj eventObj0 = new EventObj();
		// Undeclared exception!
		eventObj0.toString();
	}

	@Test(timeout = 4000)
	public void test01() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setTrigger(true);
		assertTrue(eventObj0.isTrigger());
	}

	@Test(timeout = 4000)
	public void test02() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setScore(415);
		assertEquals(415.0, eventObj0.getScore(), 0.01);
	}

	@Test(timeout = 4000)
	public void test03() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setReportDate(null);
		assertEquals((-1), eventObj0.getEventId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEntityIdFlagAndDayId(eventObj0);
	}

	@Test(timeout = 4000)
	public void test04() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setLinkable(true);
		assertTrue(eventObj0.isLinkable());
	}

	@Test(timeout = 4000)
	public void test05() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setFlag((-3150));
		assertEquals((-3150), eventObj0.getFlag());
	}

	@Test(timeout = 4000)
	public void test06() throws Exception {
		EventObj eventObj0 = new EventObj();
		IEvents.EventTypeEnum iEvents_EventTypeEnum0 = IEvents.EventTypeEnum.TYPE_EIGHT_K_EVENT_ITEM_3_01;
		eventObj0.setEventType(iEvents_EventTypeEnum0);
		assertEquals((-1), eventObj0.getEventId());
		assertDayIdScoreAndFlag(eventObj0);
		assertEquals((-1L), eventObj0.getEntityId());
	}

	@Test(timeout = 4000)
	public void test07() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setEventId(139);
		assertEquals(139, eventObj0.getEventId());
	}

	@Test(timeout = 4000)
	public void test08() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setEventExpired(true);
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1L), eventObj0.getEntityId());
		assertDayIdScoreAndFlag(eventObj0);
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		EventObj eventObj0 = new EventObj();
		IEvents.EventEntityTypeEnum iEvents_EventEntityTypeEnum0 = IEvents.EventEntityTypeEnum.TYPE_TOPIC;
		eventObj0.setEventEntityType(iEvents_EventEntityTypeEnum0);
		assertScoreEntityIdAndDayId(eventObj0);
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getFlag());
	}

	@Test(timeout = 4000)
	public void test10() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setEntityInfo(null);
		assertEquals((-1), eventObj0.getDayId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1L), eventObj0.getEntityId());
	}

	@Test(timeout = 4000)
	public void test11() throws Exception {
		EventObj eventObj0 = new EventObj();
		assertEquals((-1L), eventObj0.getEntityId());

		eventObj0.setEntityId(0L);
		assertEquals((-1), eventObj0.getEventId());
	}

	@Test(timeout = 4000)
	public void test12() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setDescription("Appender \"");
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getDayId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1L), eventObj0.getEntityId());
	}

	@Test(timeout = 4000)
	public void test13() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setDayId((-1234));
		assertEquals((-1234), eventObj0.getDayId());
	}

	@Test(timeout = 4000)
	public void test14() throws Exception {
		EventObj eventObj0 = new EventObj();
		MockDate mockDate0 = new MockDate();
		eventObj0.setDate(mockDate0);
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getDayId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
	}

	@Test(timeout = 4000)
	public void test15() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setConfigXml("vh!:g|H~1\"");
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getDayId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
	}

	@Test(timeout = 4000)
	public void test16() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setCaption("");
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getFlag());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getDayId());
	}

	@Test(timeout = 4000)
	public void test17() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.isTrigger();
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getDayId());
		assertEquals((-1L), eventObj0.getEntityId());
	}

	@Test(timeout = 4000)
	public void test18() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.isLinkable();
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getDayId());
		assertEquals((-1), eventObj0.getFlag());
	}

	@Test(timeout = 4000)
	public void test19() throws Exception {
		EventObj eventObj0 = new EventObj();
		boolean boolean0 = eventObj0.hasExpired();
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getEventId());
		assertTrue(boolean0);
		assertDayIdEntityIdAndFlag(eventObj0);
	}

	@Test(timeout = 4000)
	public void test20() throws Exception {
		EventObj eventObj0 = new EventObj();
		double double0 = eventObj0.getScore();
		assertEquals(0.0, double0, 0.01);
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1), eventObj0.getDayId());
		assertEquals((-1L), eventObj0.getEntityId());
	}

	@Test(timeout = 4000)
	public void test21() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.getReportDate();
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getDayId());
		assertEquals((-1), eventObj0.getEventId());
	}

	@Test(timeout = 4000)
	public void test22() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.getPrimaryEvidenceEntityIds();
		assertScoreEntityIdAndDayId(eventObj0);
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getFlag());
	}

	@Test(timeout = 4000)
	public void test23() throws Exception {
		EventObj eventObj0 = new EventObj();
		int int0 = eventObj0.getFlag();
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), int0);
		assertEquals((-1), eventObj0.getDayId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
	}

	@Test(timeout = 4000)
	public void test24() throws Exception {
		EventObj eventObj0 = new EventObj();
		int int0 = eventObj0.getEventTypeId();
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals(0, int0);
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getDayId());
		assertEquals((-1), eventObj0.getFlag());
	}

	@Test(timeout = 4000)
	public void test25() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.getEventType();
		assertEquals((-1), eventObj0.getEventId());
		assertDayIdScoreAndFlag(eventObj0);
		assertEquals((-1L), eventObj0.getEntityId());
	}

	@Test(timeout = 4000)
	public void test26() throws Exception {
		EventObj eventObj0 = new EventObj();
		int int0 = eventObj0.getEventId();
		assertEquals((-1), int0);
		assertDayIdEntityIdAndFlag(eventObj0);
		assertEquals(0.0, eventObj0.getScore(), 0.01);
	}

	private void assertDayIdEntityIdAndFlag(final EventObj eventObj0) {
		assertEquals((-1), eventObj0.getDayId());
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getFlag());
	}

	@Test(timeout = 4000)
	public void test27() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.getEventGroup();
		assertScoreEntityIdAndDayId(eventObj0);
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1), eventObj0.getEventId());
	}

	@Test(timeout = 4000)
	public void test28() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.getEventEntityType();
		assertEntityIdFlagAndDayId(eventObj0);
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getEventId());
	}

	@Test(timeout = 4000)
	public void test29() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.getEntityInfo();
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertDayIdEntityIdAndEventId(eventObj0);
		assertEquals((-1), eventObj0.getFlag());
	}

	@Test(timeout = 4000)
	public void test30() throws Exception {
		EventObj eventObj0 = new EventObj();
		long long0 = eventObj0.getEntityId();
		assertEquals((-1), eventObj0.getEventId());
		assertDayIdScoreAndFlag(eventObj0);
		assertEquals((-1L), long0);
	}

	private void assertDayIdScoreAndFlag(final EventObj eventObj0) {
		assertEquals((-1), eventObj0.getDayId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getFlag());
	}

	@Test(timeout = 4000)
	public void test31() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.getDescription();
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getDayId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
	}

	@Test(timeout = 4000)
	public void test32() throws Exception {
		EventObj eventObj0 = new EventObj();
		int int0 = eventObj0.getDayId();
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), int0);
		assertEquals((-1), eventObj0.getFlag());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getEventId());
	}

	@Test(timeout = 4000)
	public void test33() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.getDate();
		assertScoreEntityIdAndDayId(eventObj0);
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1), eventObj0.getEventId());
	}

	private void assertScoreEntityIdAndDayId(final EventObj eventObj0) {
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getDayId());
	}

	@Test(timeout = 4000)
	public void test34() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.getConfigXml();
		assertDayIdEntityIdAndEventId(eventObj0);
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getFlag());
	}

	private void assertDayIdEntityIdAndEventId(final EventObj eventObj0) {
		assertEquals((-1), eventObj0.getDayId());
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getEventId());
	}

	@Test(timeout = 4000)
	public void test35() throws Exception {
		EventObj eventObj0 = new EventObj();
		IEvents.EventGroupEnum iEvents_EventGroupEnum0 = IEvents.EventGroupEnum.GROUP_WEB_VOLUME;
		eventObj0.setEventGroup(iEvents_EventGroupEnum0);
		eventObj0.getCaption();
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getEventId());
		assertEquals((-1), eventObj0.getDayId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
	}

	@Test(timeout = 4000)
	public void test36() throws Exception {
		EventObj eventObj0 = new EventObj();
		eventObj0.setEventTypeId(415);
		eventObj0.getProperties();
		assertEquals(415, eventObj0.getEventTypeId());
	}

	@Test(timeout = 4000)
	public void test37() throws Exception {
		EventObj eventObj0 = new EventObj();
		IEvents.EventGroupEnum iEvents_EventGroupEnum0 = IEvents.EventGroupEnum.GROUP_WEB_VOLUME;
		eventObj0.setEventGroup(iEvents_EventGroupEnum0);
		eventObj0.getLink();
		eventObj0.getUrl();
		assertEquals((-1), eventObj0.getEventId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEntityIdFlagAndDayId(eventObj0);
	}

	private void assertEntityIdFlagAndDayId(final EventObj eventObj0) {
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1), eventObj0.getDayId());
	}

	@Test(timeout = 4000)
	public void test38() throws Exception {
		EventObj eventObj0 = new EventObj();
		Long long0 = (-1L);
		eventObj0.addPrimaryEvidence(long0);
		assertEquals((-1), eventObj0.getDayId());
		assertEquals((-1), eventObj0.getFlag());
		assertEquals((-1L), eventObj0.getEntityId());
		assertEquals(0.0, eventObj0.getScore(), 0.01);
		assertEquals((-1), eventObj0.getEventId());
	}
}
