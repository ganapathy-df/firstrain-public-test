package com.firstrain.frapi.util;

import static org.junit.Assert.assertEquals;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.Tags;
import com.firstrain.frapi.pojo.MonitorAPIResponse;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class TagsValidatorDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: TagsValidator */
  // Test generated by Diffblue Deeptest.

  @Test
  public void constructorOutputUnsupportedOperationException() throws Throwable {

    // Act, creating object to test constructor
    thrown.expect(UnsupportedOperationException.class);
    try {
      final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.TagsValidator");
      final Constructor<?> ctor = classUnderTest.getDeclaredConstructor();
      ctor.setAccessible(true);
      final Object objectUnderTest = ctor.newInstance();
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.db.obj.BaseItem$FLAGS"},
      value = {Tags.class})
  @Test
  public void isEntityNotFoundInputNotNullNegativeNotNullOutputFalse() throws Exception {

    // Arrange
    final Tags tag = PowerMockito.mock(Tags.class);
    final Method getFlagsMethod = DTUMemberMatcher.method(Tags.class, "getFlags");
    PowerMockito.doReturn(null).when(tag, getFlagsMethod).withNoArguments();
    final long monitorId = -3L;
    final MonitorAPIResponse monitorAPIResponse =
        (MonitorAPIResponse) Reflector.getInstance("com.firstrain.frapi.pojo.MonitorAPIResponse");

    // Act
    final boolean retval = TagsValidator.isEntityNotFound(tag, monitorId, monitorAPIResponse);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, MonitorAPIResponse.class})
  @Test
  public void isEntityNotFoundInputNullNegativeNotNullOutputTrue() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final Tags tag = null;
    final long monitorId = -3L;
    final MonitorAPIResponse monitorAPIResponse = PowerMockito.mock(MonitorAPIResponse.class);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    final boolean retval = TagsValidator.isEntityNotFound(tag, monitorId, monitorAPIResponse);

    // Assert
    assertEquals(true, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(MonitorAPIResponse.class)
  @Test
  public void isIllegalArgumentInput0NotNullOutputTrue() throws Exception {

    // Arrange
    final ArrayList<String> entityList = new ArrayList<String>();
    final MonitorAPIResponse monitorAPIResponse = PowerMockito.mock(MonitorAPIResponse.class);

    // Act
    final boolean retval = TagsValidator.isIllegalArgument(entityList, monitorAPIResponse);

    // Assert
    assertEquals(true, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void isIllegalArgumentInput1NotNullOutputFalse() throws Exception {

    // Arrange
    final ArrayList<String> entityList = new ArrayList<String>();
    entityList.add(null);
    final MonitorAPIResponse monitorAPIResponse =
        (MonitorAPIResponse) Reflector.getInstance("com.firstrain.frapi.pojo.MonitorAPIResponse");

    // Act
    final boolean retval = TagsValidator.isIllegalArgument(entityList, monitorAPIResponse);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Tags.class, MonitorAPIResponse.class})
  @Test
  public void isInsufficientPrivilegeInputNotNull0NotNullOutputTrue() throws Exception {

    // Arrange
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getOwnedByMethod = DTUMemberMatcher.method(Tags.class, "getOwnedBy");
    PowerMockito.doReturn(3_959_783_936L).when(tags, getOwnedByMethod).withNoArguments();
    final java.util.HashSet<Long> allGroupIds = new java.util.HashSet<Long>();
    final MonitorAPIResponse monitorAPIResponse = PowerMockito.mock(MonitorAPIResponse.class);

    // Act
    final boolean retval =
        TagsValidator.isInsufficientPrivilege(tags, allGroupIds, monitorAPIResponse);

    // Assert
    assertEquals(true, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tags.class)
  @Test
  public void isInsufficientPrivilegeInputNotNull1NotNullOutputFalse() throws Exception {

    // Arrange
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getOwnedByMethod = DTUMemberMatcher.method(Tags.class, "getOwnedBy");
    PowerMockito.doReturn(1_812_300_288L).when(tags, getOwnedByMethod).withNoArguments();
    final java.util.HashSet<Long> allGroupIds = new java.util.HashSet<Long>();
    allGroupIds.add(1_812_300_288L);
    final MonitorAPIResponse monitorAPIResponse =
        (MonitorAPIResponse) Reflector.getInstance("com.firstrain.frapi.pojo.MonitorAPIResponse");

    // Act
    final boolean retval =
        TagsValidator.isInsufficientPrivilege(tags, allGroupIds, monitorAPIResponse);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(
      fullyQualifiedNames = {"com.firstrain.db.obj.BaseItem$OwnedByType"},
      value = {Tags.class})
  @Test
  public void userDoesNotOwnMonitorInputNotNullNotNullOutputFalse() throws Exception {

    // Arrange
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getOwnedByTypeMethod = DTUMemberMatcher.method(Tags.class, "getOwnedByType");
    PowerMockito.doReturn(null).when(tags, getOwnedByTypeMethod).withNoArguments();
    final MonitorAPIResponse monitorAPIResponse =
        (MonitorAPIResponse) Reflector.getInstance("com.firstrain.frapi.pojo.MonitorAPIResponse");

    // Act
    final boolean retval = TagsValidator.userDoesNotOwnMonitor(tags, monitorAPIResponse);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tags.class)
  @Test
  public void userDoesNotOwnMonitorInputNotNullZeroNotNullOutputFalse() throws Exception {

    // Arrange
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getOwnedByMethod = DTUMemberMatcher.method(Tags.class, "getOwnedBy");
    PowerMockito.doReturn(0L).when(tags, getOwnedByMethod).withNoArguments();
    final long frUserId = 0L;
    final MonitorAPIResponse monitorAPIResponse =
        (MonitorAPIResponse) Reflector.getInstance("com.firstrain.frapi.pojo.MonitorAPIResponse");

    // Act
    final boolean retval = TagsValidator.userDoesNotOwnMonitor(tags, frUserId, monitorAPIResponse);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Tags.class, MonitorAPIResponse.class})
  @Test
  public void userDoesNotOwnMonitorInputNotNullZeroNotNullOutputTrue() throws Exception {

    // Arrange
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getOwnedByMethod = DTUMemberMatcher.method(Tags.class, "getOwnedBy");
    PowerMockito.doReturn(1L).when(tags, getOwnedByMethod).withNoArguments();
    final long frUserId = 0L;
    final MonitorAPIResponse monitorAPIResponse = PowerMockito.mock(MonitorAPIResponse.class);

    // Act
    final boolean retval = TagsValidator.userDoesNotOwnMonitor(tags, frUserId, monitorAPIResponse);

    // Assert
    assertEquals(true, retval);
  }
}
