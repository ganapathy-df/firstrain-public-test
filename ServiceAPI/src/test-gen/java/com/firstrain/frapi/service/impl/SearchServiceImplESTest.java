/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:18:41 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;

import com.firstrain.frapi.domain.Parameter;
import com.firstrain.frapi.pojo.EnterprisePref;
import com.firstrain.frapi.pojo.SearchAPIResponse;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.SearchServiceRepository;
import com.firstrain.frapi.service.EntityProcessingService;
import com.firstrain.frapi.service.RestrictContentService;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.EntityInfoCache;
import com.firstrain.solr.client.EntityInfoCacheLucene;
import com.firstrain.solr.client.SearchResult;
import org.apache.solr.client.solrj.SolrServer;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class SearchServiceImplESTest {

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test0() throws Exception {
		SearchServiceImpl searchServiceImpl0 = new SearchServiceImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector
				.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "entityProcessingService",
						entityProcessingService0);
		RestrictContentService restrictContentService0 = mock(RestrictContentService.class,
				new ViolatedAssumptionAnswer());
		Injector
				.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "restrictContentService",
						restrictContentService0);
		EntityInfoCache.CacheSearchSpec entityInfoCache_CacheSearchSpec0 = new EntityInfoCache.CacheSearchSpec();
		EntityInfoCacheLucene entityInfoCacheLucene0 = new EntityInfoCacheLucene(null,
				entityInfoCache_CacheSearchSpec0);
		SearchResult searchResult0 = new SearchResult();
		SearchServiceRepository searchServiceRepository0 = mock(SearchServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(entityInfoCacheLucene0, entityInfoCacheLucene0, entityInfoCacheLucene0,
				entityInfoCacheLucene0, null).when(searchServiceRepository0)
				.getEntityInfoCache();
		Injector
				.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "searchServiceRepository",
						searchServiceRepository0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "servicesAPIUtil",
				servicesAPIUtil0);
		Injector.validateBean(searchServiceImpl0,
				com.firstrain.frapi.service.impl.SearchServiceImpl.class);
		Parameter parameter0 = new Parameter();
		EnterprisePref enterprisePref0 = new EnterprisePref();
		searchServiceImpl0
				.getMultiSectionWebResults(entityInfoCache_CacheSearchSpec0.fieldNames, null,
						"1?mc*2N4MA`Q*", parameter0, enterprisePref0);
	}

	@Test(timeout = 4000)
	public void test1() throws Exception {
		SearchServiceImpl searchServiceImpl0 = new SearchServiceImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "convertUtil",
				convertUtil0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector
				.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "entityProcessingService",
						entityProcessingService0);
		RestrictContentService restrictContentService0 = mock(RestrictContentService.class,
				new ViolatedAssumptionAnswer());
		Injector
				.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "restrictContentService",
						restrictContentService0);
		SearchServiceRepository searchServiceRepository0 = mock(SearchServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector
				.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "searchServiceRepository",
						searchServiceRepository0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(searchServiceImpl0, com.firstrain.frapi.service.impl.SearchServiceImpl.class, "servicesAPIUtil",
				servicesAPIUtil0);
		Injector.validateBean(searchServiceImpl0,
				com.firstrain.frapi.service.impl.SearchServiceImpl.class);
		String[] stringArray0 = new String[0];
		int[] intArray0 = new int[8];
		Parameter parameter0 = new Parameter();
		EnterprisePref enterprisePref0 = new EnterprisePref();
		SearchAPIResponse searchAPIResponse0 = searchServiceImpl0
				.getMultiSectionWebResults(stringArray0, intArray0, ".|Ke*hj'G@m", parameter0,
						enterprisePref0);
		assertEquals(104, searchAPIResponse0.getStatusCode());
	}
}
