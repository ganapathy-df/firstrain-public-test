package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.firstrain.frapi.obj.MonitorObj;
import com.firstrain.frapi.service.impl.RegionExcelUtilImpl.Region;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

public class RegionExcelUtilImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: RegionExcelUtilImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void addChildInputNullOutputVoid() throws Exception {

    // Arrange
    final Region objectUnderTest =
        (Region)
            Reflector.getInstance("com.firstrain.frapi.service.impl.RegionExcelUtilImpl$Region");
    final ArrayList<MonitorObj> arrayList = new ArrayList<MonitorObj>();
    objectUnderTest.children = arrayList;
    final MonitorObj monitorObj = new MonitorObj();
    monitorObj.setDate(null);
    monitorObj.setDocumentCount(0);
    monitorObj.setExclude(false);
    monitorObj.setInclude(false);
    monitorObj.setId(null);
    monitorObj.setSelected(false);
    monitorObj.setType(MonitorObj.Type.TYPE_TURNOVER_HIRE);
    monitorObj.setBizLines(false);
    monitorObj.setToken(null);
    monitorObj.setDefaultURL(null);
    monitorObj.setTitle(null);
    monitorObj.setTokenList(null);
    objectUnderTest.parent = monitorObj;
    Reflector.setField(objectUnderTest, "this$0", null);
    final MonitorObj child = null;

    // Act
    objectUnderTest.addChild(child);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getChildrenOutputNull() throws Exception {

    // Arrange
    final Region objectUnderTest =
        (Region)
            Reflector.getInstance("com.firstrain.frapi.service.impl.RegionExcelUtilImpl$Region");
    objectUnderTest.children = null;
    final MonitorObj monitorObj = new MonitorObj();
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    monitorObj.setDate(timestamp);
    monitorObj.setDocumentCount(0);
    monitorObj.setExclude(false);
    monitorObj.setInclude(false);
    monitorObj.setId("");
    monitorObj.setSelected(false);
    monitorObj.setType(null);
    monitorObj.setBizLines(false);
    monitorObj.setToken(null);
    monitorObj.setDefaultURL("");
    monitorObj.setTitle(null);
    monitorObj.setTokenList(null);
    objectUnderTest.parent = monitorObj;
    Reflector.setField(objectUnderTest, "this$0", null);

    // Act
    final List<MonitorObj> retval = objectUnderTest.getChildren();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getParentOutputNotNull() throws Exception {

    // Arrange
    final Region objectUnderTest =
        (Region)
            Reflector.getInstance("com.firstrain.frapi.service.impl.RegionExcelUtilImpl$Region");
    objectUnderTest.children = null;
    final MonitorObj monitorObj = new MonitorObj();
    final Timestamp timestamp = (Timestamp) Reflector.getInstance("java.sql.Timestamp");
    monitorObj.setDate(timestamp);
    monitorObj.setDocumentCount(0);
    monitorObj.setExclude(false);
    monitorObj.setInclude(false);
    monitorObj.setId("");
    monitorObj.setSelected(false);
    monitorObj.setType(null);
    monitorObj.setBizLines(false);
    monitorObj.setToken(null);
    monitorObj.setDefaultURL(null);
    monitorObj.setTitle(null);
    monitorObj.setTokenList(null);
    objectUnderTest.parent = monitorObj;
    Reflector.setField(objectUnderTest, "this$0", null);

    // Act
    final MonitorObj retval = objectUnderTest.getParent();

    // Assert
    assertNotNull(retval);
    assertNotNull(retval.getDate());
    assertEquals(0, retval.getDocumentCount());
    assertEquals(false, Reflector.getInstanceField(retval, "exclude"));
    assertEquals(false, Reflector.getInstanceField(retval, "include"));
    assertEquals("", retval.getId());
    assertEquals(false, Reflector.getInstanceField(retval, "selected"));
    assertNull(retval.getType());
    assertEquals(false, Reflector.getInstanceField(retval, "bizLines"));
    assertNull(retval.getToken());
    assertNull(retval.getDefaultURL());
    assertNull(retval.getTitle());
    assertNull(Reflector.getInstanceField(retval, "tokenList"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getRegionNameVsSearchTokenOutputNull() {

    // Arrange
    final RegionExcelUtilImpl objectUnderTest = new RegionExcelUtilImpl();
    Reflector.setField(objectUnderTest, "regionNameVsSearchToken", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(objectUnderTest, "regionVsParentRegion", hashMap);
    Reflector.setField(objectUnderTest, "regionVsCountryCode", null);
    Reflector.setField(objectUnderTest, "regions", null);

    // Act
    final Map<String, String> retval = objectUnderTest.getRegionNameVsSearchToken();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getRegionsOutputNull() {

    // Arrange
    final RegionExcelUtilImpl objectUnderTest = new RegionExcelUtilImpl();

    // Act
    final List<Region> retval = objectUnderTest.getRegions();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getRegionVsCountryCodeOutputNull() {

    // Arrange
    final RegionExcelUtilImpl objectUnderTest = new RegionExcelUtilImpl();
    Reflector.setField(objectUnderTest, "regionNameVsSearchToken", null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(objectUnderTest, "regionVsParentRegion", hashMap);
    Reflector.setField(objectUnderTest, "regionVsCountryCode", null);
    Reflector.setField(objectUnderTest, "regions", null);

    // Act
    final Map<String, String> retval = objectUnderTest.getRegionVsCountryCode();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getRegionVsParentRegionOutputNull() {

    // Arrange
    final RegionExcelUtilImpl objectUnderTest = new RegionExcelUtilImpl();

    // Act
    final Map<String, String> retval = objectUnderTest.getRegionVsParentRegion();

    // Assert
    assertNull(retval);
  }
}
