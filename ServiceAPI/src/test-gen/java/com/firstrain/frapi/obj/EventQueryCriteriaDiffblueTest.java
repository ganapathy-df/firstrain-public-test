package com.firstrain.frapi.obj;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.List;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

public class EventQueryCriteriaDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EventQueryCriteria */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getAllowableRangeStringOutputNotNull() throws Exception {

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("getAllowableRangeString");
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(null);

    // Assert
    assertEquals("[1:500]", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getCompanyIdsOutputNull() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    final EventQueryCriteria.EventTypeRange eventTypeRange =
        (EventQueryCriteria.EventTypeRange)
            Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    Reflector.setField(eventTypeRange, "endEventType", 0);
    Reflector.setField(eventTypeRange, "startEventType", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", eventTypeRange);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final int[] retval = objectUnderTest.getCompanyIds();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDaysOutputZero() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", null);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final int retval = objectUnderTest.getDays();

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEndEventTypeOutputZero() throws Exception {

    // Arrange
    final EventQueryCriteria.EventTypeRange objectUnderTest =
        (EventQueryCriteria.EventTypeRange)
            Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    Reflector.setField(objectUnderTest, "endEventType", 0);
    Reflector.setField(objectUnderTest, "startEventType", 0);

    // Act
    final int retval = objectUnderTest.getEndEventType();

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEventTypeIdsOutputNull() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    final EventQueryCriteria.EventTypeRange eventTypeRange =
        (EventQueryCriteria.EventTypeRange)
            Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    Reflector.setField(eventTypeRange, "endEventType", 0);
    Reflector.setField(eventTypeRange, "startEventType", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", eventTypeRange);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final int[] retval = objectUnderTest.getEventTypeIds();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEventTypeRangeOutputNull() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", null);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final EventQueryCriteria.EventTypeRange retval = objectUnderTest.getEventTypeRange();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getExcludedCatIdsOutputNull() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    final EventQueryCriteria.EventTypeRange eventTypeRange =
        (EventQueryCriteria.EventTypeRange)
            Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    Reflector.setField(eventTypeRange, "endEventType", 0);
    Reflector.setField(eventTypeRange, "startEventType", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", eventTypeRange);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final int[] retval = objectUnderTest.getExcludedCatIds();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getExcludedEventTypeIdsOutputNull() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    final EventQueryCriteria.EventTypeRange eventTypeRange =
        (EventQueryCriteria.EventTypeRange)
            Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    Reflector.setField(eventTypeRange, "endEventType", 0);
    Reflector.setField(eventTypeRange, "startEventType", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", eventTypeRange);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final int[] retval = objectUnderTest.getExcludedEventTypeIds();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getLastDayAsStringOutputNullPointerException() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    Reflector.setField(objectUnderTest, "start", 0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    Reflector.setField(objectUnderTest, "excludedCatIds", null);
    Reflector.setField(objectUnderTest, "noOfEvents", 0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    Reflector.setField(objectUnderTest, "listOfEventTypeRange", null);
    Reflector.setField(objectUnderTest, "applyEndDateRange", false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", null);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getLastDayAsString();

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getLastDayOutputNull() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    final EventQueryCriteria.EventTypeRange eventTypeRange =
        (EventQueryCriteria.EventTypeRange)
            Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    Reflector.setField(eventTypeRange, "endEventType", 0);
    Reflector.setField(eventTypeRange, "startEventType", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", eventTypeRange);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final Date retval = objectUnderTest.getLastDay();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getListOfEventTypeRangeOutputNull() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    final EventQueryCriteria.EventTypeRange eventTypeRange =
        (EventQueryCriteria.EventTypeRange)
            Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    Reflector.setField(eventTypeRange, "endEventType", 0);
    Reflector.setField(eventTypeRange, "startEventType", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", eventTypeRange);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final List<EventQueryCriteria.EventTypeRange> retval =
        objectUnderTest.getListOfEventTypeRange();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getStartEventTypeOutputZero() throws Exception {

    // Arrange
    final EventQueryCriteria.EventTypeRange objectUnderTest =
        (EventQueryCriteria.EventTypeRange)
            Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    Reflector.setField(objectUnderTest, "endEventType", 0);
    Reflector.setField(objectUnderTest, "startEventType", 0);

    // Act
    final int retval = objectUnderTest.getStartEventType();

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getStartOutputZero() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", null);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final int retval = objectUnderTest.getStart();

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTopicIdsOutputNull() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    final EventQueryCriteria.EventTypeRange eventTypeRange =
        (EventQueryCriteria.EventTypeRange)
            Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria$EventTypeRange");
    Reflector.setField(eventTypeRange, "endEventType", 0);
    Reflector.setField(eventTypeRange, "startEventType", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", eventTypeRange);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final int[] retval = objectUnderTest.getTopicIds();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void isAllowableEventTypeInputZeroOutputFalse() {

    // Arrange
    final int eventTypeId = 0;

    // Act
    final boolean retval = EventQueryCriteria.EventTypeRange.isAllowableEventType(eventTypeId);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void isApplyEndDateRangeOutputFalse() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", null);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final boolean retval = objectUnderTest.isApplyEndDateRange();

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void isSetForFutureEventOutputFalse() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    final Date date = new Date();
    Reflector.setField(date, "fastTime", 0L);
    Reflector.setField(objectUnderTest, "lastDay", date);
    Reflector.setField(objectUnderTest, "days", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", null);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final boolean retval = objectUnderTest.isSetForFutureEvent();

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void isSetForFutureEventOutputTrue() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", null);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);

    // Act
    final boolean retval = objectUnderTest.isSetForFutureEvent();

    // Assert
    assertEquals(true, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void setEventTypeIdsInputNullOutputIllegalArgumentException() throws Exception {

    // Arrange
    final EventQueryCriteria objectUnderTest =
        (EventQueryCriteria) Reflector.getInstance("com.firstrain.frapi.obj.EventQueryCriteria");
    objectUnderTest.setStart(0);
    Reflector.setField(objectUnderTest, "eventTypeIds", null);
    objectUnderTest.setExcludedCatIds(null);
    objectUnderTest.setNoOfEvents(0);
    Reflector.setField(objectUnderTest, "companyIds", null);
    objectUnderTest.setListOfEventTypeRange(null);
    objectUnderTest.setApplyEndDateRange(false);
    Reflector.setField(objectUnderTest, "sdf", null);
    Reflector.setField(objectUnderTest, "topicIds", null);
    Reflector.setField(objectUnderTest, "lastDay", null);
    Reflector.setField(objectUnderTest, "days", 0);
    Reflector.setField(objectUnderTest, "eventTypeRange", null);
    Reflector.setField(objectUnderTest, "excludedEventTypeIds", null);
    final int[] eventTypeIds = null;

    // Act
    thrown.expect(IllegalArgumentException.class);
    objectUnderTest.setEventTypeIds(eventTypeIds);

    // Method is not expected to return due to exception thrown
  }
}
