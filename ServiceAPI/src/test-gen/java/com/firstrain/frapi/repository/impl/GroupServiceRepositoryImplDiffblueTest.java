package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.api.GroupsDbAPI;
import com.firstrain.db.obj.Groups;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class GroupServiceRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: GroupServiceRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(GroupsDbAPI.class)
  @Test
  public void getGroupIdsWhereActorHasDefaultprivilegesInputZeroZero1Output0() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(GroupsDbAPI.class);

    // Arrange
    final GroupServiceRepositoryImpl objectUnderTest = new GroupServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "LOG", null);
    final long userId = 0L;
    final long ownerId = 0L;
    final HashSet<Long> groupIdsWithDefaultMapping = new HashSet<Long>();
    groupIdsWithDefaultMapping.add(-9_223_301_668_109_304_383L);
    final HashSet hashSet = new HashSet();
    final Method getAllParentGroupIdsByGroupIdMethod =
        DTUMemberMatcher.method(
            GroupsDbAPI.class,
            "getAllParentGroupIdsByGroupId",
            String.class,
            long.class,
            long.class);
    PowerMockito.doReturn(hashSet)
        .when(GroupsDbAPI.class, getAllParentGroupIdsByGroupIdMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyLong(), anyLong());

    // Act
    final Set<Long> retval =
        objectUnderTest.getGroupIdsWhereActorHasDefaultprivileges(
            userId, ownerId, groupIdsWithDefaultMapping);

    // Assert
    final HashSet<Long> hashSet1 = new HashSet<Long>();
    assertEquals(hashSet1, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getGroupIdsWhereActorHasDefaultprivilegesInputZeroZeroNotNullOutput0() {

    // Arrange
    final GroupServiceRepositoryImpl objectUnderTest = new GroupServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "LOG", null);
    final long userId = 0L;
    final long ownerId = 0L;
    final HashSet groupIdsWithDefaultMapping = new HashSet();

    // Act
    final Set<Long> retval =
        objectUnderTest.getGroupIdsWhereActorHasDefaultprivileges(
            userId, ownerId, groupIdsWithDefaultMapping);

    // Assert
    final HashSet<Long> hashSet = new HashSet<Long>();
    assertEquals(hashSet, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getGroupIdsWhereActorHasDefaultprivilegesInputZeroZeroNullOutput0() {

    // Arrange
    final GroupServiceRepositoryImpl objectUnderTest = new GroupServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "LOG", null);
    final long userId = 0L;
    final long ownerId = 0L;
    final Set<Long> groupIdsWithDefaultMapping = null;

    // Act
    final Set<Long> retval =
        objectUnderTest.getGroupIdsWhereActorHasDefaultprivileges(
            userId, ownerId, groupIdsWithDefaultMapping);

    // Assert
    final HashSet<Long> hashSet = new HashSet<Long>();
    assertEquals(hashSet, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(GroupsDbAPI.class)
  @Test
  public void getGroupsByIdsInputNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(GroupsDbAPI.class);

    // Arrange
    final GroupServiceRepositoryImpl objectUnderTest = new GroupServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "LOG", null);
    final Set<Long> groupIds = null;
    final Method getGroupByIdsMethod =
        DTUMemberMatcher.method(GroupsDbAPI.class, "getGroupByIds", String.class, Collection.class);
    PowerMockito.doReturn(null)
        .when(GroupsDbAPI.class, getGroupByIdsMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final List<Groups> retval = objectUnderTest.getGroupsByIds(groupIds);

    // Assert
    assertNull(retval);
  }
}
