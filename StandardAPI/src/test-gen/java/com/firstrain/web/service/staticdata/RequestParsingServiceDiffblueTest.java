package com.firstrain.web.service.staticdata;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.utils.JSONUtility;
import com.firstrain.web.pojo.Content;
import com.firstrain.web.pojo.Document;
import com.firstrain.web.pojo.EntityData;
import com.firstrain.web.pojo.EntityStandard;
import com.firstrain.web.pojo.MetaData;
import com.firstrain.web.pojo.Tweet;
import com.firstrain.web.response.EntityDataResponse;
import com.firstrain.web.wrapper.EntityDataWrapper;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class RequestParsingServiceDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: RequestParsingService */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getChartScriptInputNullNullOutputNullPointerException() throws Throwable {

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String type = null;
    final String Id = null;

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.web.service.staticdata.RequestParsingService");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getChartScript",
              Reflector.forName("java.lang.String"),
              Reflector.forName("java.lang.String"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, type, Id);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getChartScriptInputNullNullOutputNullPointerException2() throws Throwable {

    // Arrange
    final RequestParsingService objectUnderTest =
        (RequestParsingService)
            Reflector.getInstance("com.firstrain.web.service.staticdata.RequestParsingService");
    Reflector.setField(objectUnderTest, "appBaseUrl", "");
    Reflector.setField(objectUnderTest, "messageSource", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.web.service.BaseRequestParsingService"),
        objectUnderTest,
        "messageSource",
        null);
    final String type = null;
    final String Id = null;

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.web.service.staticdata.RequestParsingService");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getChartScript",
              Reflector.forName("java.lang.String"),
              Reflector.forName("java.lang.String"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, type, Id);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({RequestParsingService.class, EntityDataResponse.class})
  @Test
  public void getMetaDataEntitiyResponseInputNotNullOutputNotNull() throws Exception {

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final EntityDataResponse entityDataResponse = PowerMockito.mock(EntityDataResponse.class);
    final Method getResultMethod = DTUMemberMatcher.method(EntityDataResponse.class, "getResult");
    PowerMockito.doReturn(null).when(entityDataResponse, getResultMethod).withNoArguments();
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final MetaData retval = objectUnderTest.getMetaDataEntitiyResponse(entityDataResponse);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({RequestParsingService.class, EntityDataWrapper.class, EntityDataResponse.class})
  @Test
  public void getMetaDataEntitiyResponseInputNotNullOutputNotNull2() throws Exception {

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final EntityDataResponse entityDataResponse = PowerMockito.mock(EntityDataResponse.class);
    final EntityDataWrapper entityDataWrapper1 = PowerMockito.mock(EntityDataWrapper.class);
    final Method getDataMethod = DTUMemberMatcher.method(EntityDataWrapper.class, "getData");
    PowerMockito.doReturn(null).when(entityDataWrapper1, getDataMethod).withNoArguments();
    final EntityDataWrapper entityDataWrapper = PowerMockito.mock(EntityDataWrapper.class);
    final Method getResultMethod = DTUMemberMatcher.method(EntityDataResponse.class, "getResult");
    ((PowerMockitoStubber) PowerMockito.doReturn(entityDataWrapper).doReturn(entityDataWrapper1))
        .when(entityDataResponse, getResultMethod)
        .withNoArguments();
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final MetaData retval = objectUnderTest.getMetaDataEntitiyResponse(entityDataResponse);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    RequestParsingService.class,
    EntityDataResponse.class,
    EntityDataWrapper.class,
    EntityData.class,
    Content.class
  })
  @Test
  public void getMetaDataEntitiyResponseInputNotNullOutputNotNull3() throws Exception {

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final EntityDataResponse entityDataResponse = PowerMockito.mock(EntityDataResponse.class);
    final EntityDataWrapper entityDataWrapper1 = PowerMockito.mock(EntityDataWrapper.class);
    final EntityData entityData = PowerMockito.mock(EntityData.class);
    final Method getFrMethod = DTUMemberMatcher.method(EntityData.class, "getFr");
    PowerMockito.doReturn(null).when(entityData, getFrMethod).withNoArguments();
    final Content content = PowerMockito.mock(Content.class);
    final Method getTweetsMethod = DTUMemberMatcher.method(Content.class, "getTweets");
    PowerMockito.doReturn(null).when(content, getTweetsMethod).withNoArguments();
    final Method getFtMethod = DTUMemberMatcher.method(EntityData.class, "getFt");
    PowerMockito.doReturn(content).when(entityData, getFtMethod).withNoArguments();
    final Method getDataMethod = DTUMemberMatcher.method(EntityDataWrapper.class, "getData");
    PowerMockito.doReturn(entityData).when(entityDataWrapper1, getDataMethod).withNoArguments();
    final EntityDataWrapper entityDataWrapper = PowerMockito.mock(EntityDataWrapper.class);
    final Method getResultMethod = DTUMemberMatcher.method(EntityDataResponse.class, "getResult");
    ((PowerMockitoStubber) PowerMockito.doReturn(entityDataWrapper).doReturn(entityDataWrapper1))
        .when(entityDataResponse, getResultMethod)
        .withNoArguments();
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final MetaData retval = objectUnderTest.getMetaDataEntitiyResponse(entityDataResponse);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Tweet.class,
    MetaData.class,
    RequestParsingService.class,
    Document.class,
    EntityStandard.class
  })
  @Test
  public void getMetaDataInput11OutputNotNull4() throws Exception {

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final ArrayList<Document> docuemntLst = new ArrayList<Document>();
    final Document document = PowerMockito.mock(Document.class);
    final ArrayList<Tweet> tweetLst = arrangeTweetList(docuemntLst, document);
    arrangeDoGetMetaDataAndAssert(docuemntLst, objectUnderTest, tweetLst);
  }

  private ArrayList<Tweet> arrangeTweetList(final ArrayList<Document> docuemntLst, final Document document) throws Exception {
    final ArrayList arrayList = new ArrayList();
    final EntityStandard entityStandard = PowerMockito.mock(EntityStandard.class);
    final Method getNameMethod = DTUMemberMatcher.method(EntityStandard.class, "getName");
    PowerMockito.doReturn("EEEEEEEEE").when(entityStandard, getNameMethod).withNoArguments();
    arrayList.add(entityStandard);
    final Method getEntityMethod = DTUMemberMatcher.method(Document.class, "getEntity");
    PowerMockito.doReturn(arrayList).when(document, getEntityMethod).withNoArguments();
    docuemntLst.add(document);
    final ArrayList<Tweet> tweetLst = new ArrayList<Tweet>();
    final Tweet tweet = PowerMockito.mock(Tweet.class);
    final EntityStandard entityStandard1 = PowerMockito.mock(EntityStandard.class);
    final Method getNameMethod1 = DTUMemberMatcher.method(EntityStandard.class, "getName");
    PowerMockito.doReturn("XXXXXXX").when(entityStandard1, getNameMethod1).withNoArguments();
    final Method getEntityMethod1 = DTUMemberMatcher.method(Tweet.class, "getEntity");
    PowerMockito.doReturn(entityStandard1).when(tweet, getEntityMethod1).withNoArguments();
    tweetLst.add(tweet);
    return tweetLst;
  }

  private void arrangeDoGetMetaDataAndAssert(final ArrayList<Document> docuemntLst, final RequestParsingService objectUnderTest, final ArrayList<Tweet> tweetLst) throws Exception {
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);
    
    // Act
    final MetaData retval = objectUnderTest.getMetaData(docuemntLst, tweetLst);
    
    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(RequestParsingService.class)
  @Test
  public void getMetaDataInputNull0OutputNotNull() throws Exception {

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final List<Document> docuemntLst = null;
    final ArrayList<Tweet> tweetLst = new ArrayList<Tweet>();
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final MetaData retval = objectUnderTest.getMetaData(docuemntLst, tweetLst);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(RequestParsingService.class)
  @Test
  public void getMetaDataInputNullNullOutputNotNull() throws Exception {

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final List<Document> docuemntLst = null;
    final List<Tweet> tweetLst = null;
    final MetaData metaData = PowerMockito.mock(MetaData.class);
    PowerMockito.whenNew(MetaData.class).withNoArguments().thenReturn(metaData);

    // Act
    final MetaData retval = objectUnderTest.getMetaData(docuemntLst, tweetLst);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(JSONUtility.class)
  @Test
  public void getSerializedMetadataInputNotNullNotNullNotNullNotNullNotNullOutputNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String sections = "";
    final String ft = "";
    final String fq = "A";
    final String results = "AAAAA";
    final String htmlFrag = "";
    final Method serializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "serialize", Object.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, serializeMethod)
        .withArguments(or(isA(Object.class), isNull(Object.class)));

    // Act
    final String retval =
        objectUnderTest.getSerializedMetadata(sections, ft, fq, results, htmlFrag);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(JSONUtility.class)
  @Test
  public void getSerializedMetadataInputNotNullNotNullNotNullNotNullNullOutputNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String sections = "";
    final String ft = "AA";
    final String fq = "";
    final String results = "";
    final String htmlFrag = null;
    final Method serializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "serialize", Object.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, serializeMethod)
        .withArguments(or(isA(Object.class), isNull(Object.class)));

    // Act
    final String retval =
        objectUnderTest.getSerializedMetadata(sections, ft, fq, results, htmlFrag);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(JSONUtility.class)
  @Test
  public void getSerializedMetadataInputNotNullNotNullNotNullNotNullNullOutputNull2()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String sections = " ";
    final String ft = "";
    final String fq = "";
    final String results = "";
    final String htmlFrag = null;
    final Method serializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "serialize", Object.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, serializeMethod)
        .withArguments(or(isA(Object.class), isNull(Object.class)));

    // Act
    final String retval =
        objectUnderTest.getSerializedMetadata(sections, ft, fq, results, htmlFrag);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(JSONUtility.class)
  @Test
  public void getSerializedMetadataInputNotNullNotNullNullNotNullNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String sections = "";
    final String ft = "AA";
    final String fq = null;
    final String results = "";
    final String htmlFrag = null;
    final Method serializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "serialize", Object.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, serializeMethod)
        .withArguments(or(isA(Object.class), isNull(Object.class)));

    // Act
    final String retval =
        objectUnderTest.getSerializedMetadata(sections, ft, fq, results, htmlFrag);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(JSONUtility.class)
  @Test
  public void getSerializedMetadataInputNotNullNotNullNullNullNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String sections = "";
    final String ft = "AA";
    final String fq = null;
    final String results = null;
    final String htmlFrag = null;
    final Method serializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "serialize", Object.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, serializeMethod)
        .withArguments(or(isA(Object.class), isNull(Object.class)));

    // Act
    final String retval =
        objectUnderTest.getSerializedMetadata(sections, ft, fq, results, htmlFrag);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(JSONUtility.class)
  @Test
  public void getSerializedMetadataInputNotNullNullNullNullNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String sections = " ";
    final String ft = null;
    final String fq = null;
    final String results = null;
    final String htmlFrag = null;
    final Method serializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "serialize", Object.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, serializeMethod)
        .withArguments(or(isA(Object.class), isNull(Object.class)));

    // Act
    final String retval =
        objectUnderTest.getSerializedMetadata(sections, ft, fq, results, htmlFrag);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(JSONUtility.class)
  @Test
  public void getSerializedMetadataInputNullNotNullNotNullNotNullNotNullOutputNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String sections = null;
    final String ft = "";
    final String fq = "A";
    final String results = "AAAAA";
    final String htmlFrag = "";
    final Method serializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "serialize", Object.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, serializeMethod)
        .withArguments(or(isA(Object.class), isNull(Object.class)));

    // Act
    final String retval =
        objectUnderTest.getSerializedMetadata(sections, ft, fq, results, htmlFrag);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(JSONUtility.class)
  @Test
  public void getSerializedMetadataInputNullNotNullNotNullNullNotNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String sections = null;
    final String ft = "";
    final String fq = "A";
    final String results = null;
    final String htmlFrag = "A";
    final Method serializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "serialize", Object.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, serializeMethod)
        .withArguments(or(isA(Object.class), isNull(Object.class)));

    // Act
    final String retval =
        objectUnderTest.getSerializedMetadata(sections, ft, fq, results, htmlFrag);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getSerializedMetadataInputNullNotNullNullNullNotNullOutputNull() {

    // Arrange
    final RequestParsingService objectUnderTest = new RequestParsingService();
    final String sections = null;
    final String ft = "";
    final String fq = null;
    final String results = null;
    final String htmlFrag = "";

    // Act
    final String retval =
        objectUnderTest.getSerializedMetadata(sections, ft, fq, results, htmlFrag);

    // Assert
    assertNull(retval);
  }
}
