package com.firstrain.frapi.customapirepository.impl;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.common.db.jpa.PersistenceProvider;
import com.firstrain.db.api.DocCategorizeFeedbackDbAPI;
import com.firstrain.db.api.DocCategorizeResponseHistoryDbAPI;
import com.firstrain.db.obj.DocCategorizeFeedback;
import com.firstrain.db.obj.DocCategorizeResponseHistory;
import java.lang.reflect.Method;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class DocCategorizeRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: DocCategorizeRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    Logger.class,
    PersistenceProvider.class,
    DocCategorizeRepositoryImpl.class,
    DocCategorizeFeedback.class,
    DocCategorizeFeedbackDbAPI.class
  })
  @Test
  public void insertIntoDocCategorizeFeedbackInputNullOutputNullPointerException()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(DocCategorizeFeedbackDbAPI.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocCategorizeRepositoryImpl objectUnderTest = new DocCategorizeRepositoryImpl();
    final String feedback = null;
    final DocCategorizeFeedback docCategorizeFeedback =
        PowerMockito.mock(DocCategorizeFeedback.class);
    PowerMockito.whenNew(DocCategorizeFeedback.class)
        .withNoArguments()
        .thenReturn(docCategorizeFeedback);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.insertIntoDocCategorizeFeedback(feedback);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocCategorizeFeedbackDbAPI.class,
    PersistenceProvider.class,
    Logger.class,
    DocCategorizeRepositoryImpl.class,
    DocCategorizeFeedback.class
  })
  @Test
  public void insertIntoDocCategorizeFeedbackInputNullOutputNullPointerException2()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(DocCategorizeFeedbackDbAPI.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocCategorizeRepositoryImpl objectUnderTest = new DocCategorizeRepositoryImpl();
    final String feedback = null;
    final DocCategorizeFeedback docCategorizeFeedback =
        PowerMockito.mock(DocCategorizeFeedback.class);
    PowerMockito.whenNew(DocCategorizeFeedback.class)
        .withNoArguments()
        .thenReturn(docCategorizeFeedback);
    arrangeAndExpectException();
    objectUnderTest.insertIntoDocCategorizeFeedback(feedback);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    DocCategorizeResponseHistory.class,
    Logger.class,
    PersistenceProvider.class,
    DocCategorizeRepositoryImpl.class,
    DocCategorizeResponseHistoryDbAPI.class
  })
  @Test
  public void
      insertIntoDocCategorizeResponseHistoryInputPositiveNullNullNullOutputNullPointerException()
          throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(DocCategorizeResponseHistoryDbAPI.class);
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocCategorizeRepositoryImpl objectUnderTest = new DocCategorizeRepositoryImpl();
    final Long docId = 277_089_815_165_961L;
    final String taxonomyDirective = null;
    final String serviceRes = null;
    final String actualRes = null;
    final DocCategorizeResponseHistory docCategorizeResponseHistory =
        PowerMockito.mock(DocCategorizeResponseHistory.class);
    PowerMockito.whenNew(DocCategorizeResponseHistory.class)
        .withNoArguments()
        .thenReturn(docCategorizeResponseHistory);
    arrangeAndExpectException();
    objectUnderTest.insertIntoDocCategorizeResponseHistory(
        docId, taxonomyDirective, serviceRes, actualRes);

    // Method is not expected to return due to exception thrown
  }

  private void arrangeAndExpectException() throws Exception {
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    
    // Act
    thrown.expect(NullPointerException.class);
  }
}
