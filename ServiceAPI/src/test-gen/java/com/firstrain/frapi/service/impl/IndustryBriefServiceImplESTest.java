/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:20:43 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.any;
import static org.evosuite.shaded.org.mockito.Mockito.anyBoolean;
import static org.evosuite.shaded.org.mockito.Mockito.anyList;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertNull;

import com.firstrain.frapi.domain.TwitterSpec;
import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.service.EntityBaseService;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.solr.client.EntityInfoCacheLucene;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.solr.common.SolrDocumentList;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class IndustryBriefServiceImplESTest {

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test0() throws Exception {
		IndustryBriefServiceImpl industryBriefServiceImpl0 = new IndustryBriefServiceImpl();
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository1);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		Injector.validateBean(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class);
		Set<String> set0 = EntityInfoCacheLucene.categoryTypes;
		TwitterSpec twitterSpec0 = new TwitterSpec();
		industryBriefServiceImpl0.getWebResults(set0, "", twitterSpec0);
	}

	@Test(timeout = 4000)
	public void test1() throws Exception {
		IndustryBriefServiceImpl industryBriefServiceImpl0 = new IndustryBriefServiceImpl();
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository1);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		Injector.validateBean(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class);
		TwitterSpec twitterSpec0 = new TwitterSpec();
		DocumentSet documentSet0 = industryBriefServiceImpl0
				.getWebResults(null, "%(-+3Ik{&q", twitterSpec0);
		assertNull(documentSet0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test3() throws Exception {
		IndustryBriefServiceImpl industryBriefServiceImpl0 = new IndustryBriefServiceImpl();
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class,
				"entityBaseService", entityBaseService0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository1 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository1);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		Injector.validateBean(industryBriefServiceImpl0,
				com.firstrain.frapi.service.impl.IndustryBriefServiceImpl.class);
		AtomicBoolean atomicBoolean0 = new AtomicBoolean();
		industryBriefServiceImpl0
				.getVirtualMonitor("066t", "<B|uZ]&M", "066t", atomicBoolean0, null);
	}
}
