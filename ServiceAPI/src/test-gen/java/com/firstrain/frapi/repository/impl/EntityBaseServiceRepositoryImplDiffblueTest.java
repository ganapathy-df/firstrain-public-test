package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.content.similarity.DocumentSimilarityUtil;
import com.firstrain.frapi.config.ServiceConfig;
import com.firstrain.frapi.config.ServiceException;
import com.firstrain.obj.IEntityInfo;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.DistributedSolrSearcher;
import com.firstrain.solr.client.HotListEntry;
import com.firstrain.solr.client.SolrSearcher;
import com.firstrain.solr.client.util.SolrServerReader;
import com.firstrain.utils.FR_ArrayUtils;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.common.SolrDocumentList;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class EntityBaseServiceRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EntityBaseServiceRepositoryImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void compareInputNotNullNotNullOutputZero() throws Exception {

    // Arrange
    final Object objectUnderTest =
        Reflector.getInstance(
            "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl$1");
    Reflector.setField(objectUnderTest, "this$0", null);
    final HotListEntry o1 =
        (HotListEntry) Reflector.getInstance("com.firstrain.solr.client.HotListEntry");
    Reflector.setField(o1, "docCount", 0);
    final HotListEntry o2 =
        (HotListEntry) Reflector.getInstance("com.firstrain.solr.client.HotListEntry");
    Reflector.setField(o2, "docCount", 0);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl$1");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "compare",
            Reflector.forName("com.firstrain.solr.client.HotListEntry"),
            Reflector.forName("com.firstrain.solr.client.HotListEntry"));
    methodUnderTest.setAccessible(true);
    final int retval = (int) methodUnderTest.invoke(objectUnderTest, o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void constructorOutputVoid() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act, creating object to test constructor
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDocImageServerOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final SolrServer retval = objectUnderTest.getDocImageServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDocSolrServerOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final SolrServer retval = objectUnderTest.getDocSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDocumentSimilarityUtilOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    serviceConfig.setSecSolrServer(null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    serviceConfig.setEntitySolrServer(null);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    serviceConfig.setFaviconSolrServer(null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final DocumentSimilarityUtil retval = objectUnderTest.getDocumentSimilarityUtil();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEntityInfoCacheOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final IEntityInfoCache retval = objectUnderTest.getEntityInfoCache();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEntitySolrServerOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final SolrServer retval = objectUnderTest.getEntitySolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEventServerOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final SolrServer retval = objectUnderTest.getEventServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getFavIconServerOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final SolrServer retval = objectUnderTest.getFavIconServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getPeopleServerOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final SolrServer retval = objectUnderTest.getPeopleServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getSearcherOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final SolrSearcher retval = objectUnderTest.getSearcher();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getServiceConfigOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final ServiceConfig retval = objectUnderTest.getServiceConfig();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(StringUtils.class)
  @Test
  public void getSolrDocForSourceSearchTokenInputNotNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String searchToken = "";
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(true)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final SolrDocumentList retval = objectUnderTest.getSolrDocForSourceSearchToken(searchToken);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, SolrServerReader.class, StringUtils.class})
  @Test
  public void getSolrDocForSourceSearchTokenInputNotNullOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(false).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String searchToken = "";
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final SolrDocumentList retval = objectUnderTest.getSolrDocForSourceSearchToken(searchToken);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, SolrServerReader.class, StringUtils.class})
  @Test
  public void getSolrDocForSourceSearchTokenInputNotNullOutputNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(StringUtils.class);
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(true).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String searchToken = "";
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            java.lang.String[].class);
    PowerMockito.doReturn(null)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method isEmptyMethod =
        DTUMemberMatcher.method(StringUtils.class, "isEmpty", String.class);
    PowerMockito.doReturn(false)
        .when(StringUtils.class, isEmptyMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final SolrDocumentList retval = objectUnderTest.getSolrDocForSourceSearchToken(searchToken);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getSolrDocFromIndustryAndBizlineCatIdsInput0Null1TrueTrueOutputNull()
      throws Exception {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final ArrayList<String> industryCatIds = new ArrayList<String>();
    final List<String> bizLineCatds = null;
    final String[] FIELDS_TO_RETURN = {null};
    final boolean needAllEntities = true;
    final boolean isCustomized = true;

    // Act
    final SolrDocumentList retval =
        objectUnderTest.getSolrDocFromIndustryAndBizlineCatIds(
            industryCatIds, bizLineCatds, FIELDS_TO_RETURN, needAllEntities, isCustomized);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrDocumentList.class,
    Logger.class,
    IEntityInfoCache.class,
    IEntityInfo.class,
    SolrServerReader.class
  })
  @Test
  public void getSolrDocFromIndustryAndBizlineCatIdsInput1Null1FalseFalseOutputNotNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(false).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getSectorCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSectorCatId");
    PowerMockito.doReturn(-2_147_418_111).when(iEntityInfo, getSectorCatIdMethod).withNoArguments();
    final Method getIndustryCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getIndustryCatId");
    PowerMockito.doReturn(-2_147_483_647)
        .when(iEntityInfo, getIndustryCatIdMethod)
        .withNoArguments();
    final Method getSegmentCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSegmentCatId");
    PowerMockito.doReturn(0).when(iEntityInfo, getSegmentCatIdMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final ArrayList<String> industryCatIds = new ArrayList<String>();
    industryCatIds.add(null);
    final List<String> bizLineCatds = null;
    final String[] FIELDS_TO_RETURN = {null};
    final boolean needAllEntities = false;
    final boolean isCustomized = false;
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method sizeMethod = DTUMemberMatcher.method(SolrDocumentList.class, "size");
    PowerMockito.doReturn(82_370).when(solrDocumentList, sizeMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            String.class,
            boolean.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(String.class), isNull(String.class)),
            anyBoolean(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));

    // Act
    final SolrDocumentList retval =
        objectUnderTest.getSolrDocFromIndustryAndBizlineCatIds(
            industryCatIds, bizLineCatds, FIELDS_TO_RETURN, needAllEntities, isCustomized);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getSolrDocFromIndustryAndBizlineCatIdsInput001TrueTrueOutputNull() throws Exception {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterGroupServer", solrServer);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer1);
    final ArrayList<String> industryCatIds = new ArrayList<String>();
    final ArrayList<String> bizLineCatds = new ArrayList<String>();
    final String[] FIELDS_TO_RETURN = {null};
    final boolean needAllEntities = true;
    final boolean isCustomized = true;

    // Act
    final SolrDocumentList retval =
        objectUnderTest.getSolrDocFromIndustryAndBizlineCatIds(
            industryCatIds, bizLineCatds, FIELDS_TO_RETURN, needAllEntities, isCustomized);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrDocumentList.class, Logger.class, IEntityInfoCache.class,
    SolrServerReader.class, IEntityInfo.class, FR_ArrayUtils.class
  })
  @Test
  public void getSolrDocFromIndustryAndBizlineCatIdsInput21NullFalseFalseOutputNotNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FR_ArrayUtils.class);
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(false).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "favIconServer", solrServer1);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo1 = PowerMockito.mock(IEntityInfo.class);
    final Method getIndustryCatIdMethod1 =
        DTUMemberMatcher.method(IEntityInfo.class, "getIndustryCatId");
    PowerMockito.doReturn(0).when(iEntityInfo1, getIndustryCatIdMethod1).withNoArguments();
    final Method getSegmentCatIdMethod1 =
        DTUMemberMatcher.method(IEntityInfo.class, "getSegmentCatId");
    PowerMockito.doReturn(0).when(iEntityInfo1, getSegmentCatIdMethod1).withNoArguments();
    final Method getSectorCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSectorCatId");
    PowerMockito.doReturn(-2_147_483_647)
        .when(iEntityInfo1, getSectorCatIdMethod)
        .withNoArguments();
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getIndustryCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getIndustryCatId");
    PowerMockito.doReturn(-2_147_483_647)
        .when(iEntityInfo, getIndustryCatIdMethod)
        .withNoArguments();
    final Method getSegmentCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSegmentCatId");
    PowerMockito.doReturn(1).when(iEntityInfo, getSegmentCatIdMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(iEntityInfo).doReturn(iEntityInfo1))
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterServer", solrServer2);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final ArrayList<String> industryCatIds = new ArrayList<String>();
    industryCatIds.add("");
    industryCatIds.add("\"\"\"");
    final ArrayList<String> bizLineCatds = new ArrayList<String>();
    bizLineCatds.add(null);
    final String[] FIELDS_TO_RETURN = null;
    final boolean needAllEntities = false;
    final boolean isCustomized = false;
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method sizeMethod = DTUMemberMatcher.method(SolrDocumentList.class, "size");
    PowerMockito.doReturn(1_073_742_018).when(solrDocumentList, sizeMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            String.class,
            boolean.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(String.class), isNull(String.class)),
            anyBoolean(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method getStringFromCollectionMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "getStringFromCollection", Collection.class, String.class);
    PowerMockito.doReturn(
            "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"")
        .when(FR_ArrayUtils.class, getStringFromCollectionMethod)
        .withArguments(
            or(isA(Collection.class), isNull(Collection.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final SolrDocumentList retval =
        objectUnderTest.getSolrDocFromIndustryAndBizlineCatIds(
            industryCatIds, bizLineCatds, FIELDS_TO_RETURN, needAllEntities, isCustomized);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrDocumentList.class, Logger.class, IEntityInfoCache.class,
    SolrServerReader.class, IEntityInfo.class, FR_ArrayUtils.class
  })
  @Test
  public void getSolrDocFromIndustryAndBizlineCatIdsInput21NullFalseFalseOutputNotNull2()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FR_ArrayUtils.class);
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(false).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "favIconServer", solrServer1);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo1 = PowerMockito.mock(IEntityInfo.class);
    final Method getIndustryCatIdMethod1 =
        DTUMemberMatcher.method(IEntityInfo.class, "getIndustryCatId");
    PowerMockito.doReturn(0).when(iEntityInfo1, getIndustryCatIdMethod1).withNoArguments();
    final Method getSegmentCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSegmentCatId");
    PowerMockito.doReturn(1).when(iEntityInfo1, getSegmentCatIdMethod).withNoArguments();
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getIndustryCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getIndustryCatId");
    PowerMockito.doReturn(1).when(iEntityInfo, getIndustryCatIdMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(iEntityInfo).doReturn(iEntityInfo1))
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterServer", solrServer2);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final ArrayList<String> industryCatIds = new ArrayList<String>();
    industryCatIds.add("\"");
    industryCatIds.add("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"");
    final ArrayList<String> bizLineCatds = new ArrayList<String>();
    bizLineCatds.add(null);
    final String[] FIELDS_TO_RETURN = null;
    final boolean needAllEntities = false;
    final boolean isCustomized = false;
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method sizeMethod = DTUMemberMatcher.method(SolrDocumentList.class, "size");
    PowerMockito.doReturn(1_073_742_018).when(solrDocumentList, sizeMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            String.class,
            boolean.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(String.class), isNull(String.class)),
            anyBoolean(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method getStringFromCollectionMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "getStringFromCollection", Collection.class, String.class);
    PowerMockito.doReturn(
            "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"")
        .when(FR_ArrayUtils.class, getStringFromCollectionMethod)
        .withArguments(
            or(isA(Collection.class), isNull(Collection.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final SolrDocumentList retval =
        objectUnderTest.getSolrDocFromIndustryAndBizlineCatIds(
            industryCatIds, bizLineCatds, FIELDS_TO_RETURN, needAllEntities, isCustomized);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrDocumentList.class, Logger.class, IEntityInfoCache.class,
    SolrServerReader.class, IEntityInfo.class, FR_ArrayUtils.class
  })
  @Test
  public void getSolrDocFromIndustryAndBizlineCatIdsInput21NullFalseTrueOutputNotNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FR_ArrayUtils.class);
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(false).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "favIconServer", solrServer1);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo1 = PowerMockito.mock(IEntityInfo.class);
    final Method getIndustryCatIdMethod1 =
        DTUMemberMatcher.method(IEntityInfo.class, "getIndustryCatId");
    PowerMockito.doReturn(0).when(iEntityInfo1, getIndustryCatIdMethod1).withNoArguments();
    final Method getSegmentCatIdMethod1 =
        DTUMemberMatcher.method(IEntityInfo.class, "getSegmentCatId");
    PowerMockito.doReturn(0).when(iEntityInfo1, getSegmentCatIdMethod1).withNoArguments();
    final Method getSectorCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSectorCatId");
    PowerMockito.doReturn(-2_147_483_647)
        .when(iEntityInfo1, getSectorCatIdMethod)
        .withNoArguments();
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getIndustryCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getIndustryCatId");
    PowerMockito.doReturn(-2_147_483_647)
        .when(iEntityInfo, getIndustryCatIdMethod)
        .withNoArguments();
    final Method getSegmentCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSegmentCatId");
    PowerMockito.doReturn(1).when(iEntityInfo, getSegmentCatIdMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(iEntityInfo).doReturn(iEntityInfo1))
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterServer", solrServer2);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final ArrayList<String> industryCatIds = new ArrayList<String>();
    industryCatIds.add("");
    industryCatIds.add("\"\"\"");
    final ArrayList<String> bizLineCatds = new ArrayList<String>();
    bizLineCatds.add(null);
    final String[] FIELDS_TO_RETURN = null;
    final boolean needAllEntities = false;
    final boolean isCustomized = true;
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method sizeMethod = DTUMemberMatcher.method(SolrDocumentList.class, "size");
    PowerMockito.doReturn(1_073_741_984).when(solrDocumentList, sizeMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            String.class,
            boolean.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(String.class), isNull(String.class)),
            anyBoolean(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method getStringFromCollectionMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "getStringFromCollection", Collection.class, String.class);
    PowerMockito.doReturn(
            "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"")
        .when(FR_ArrayUtils.class, getStringFromCollectionMethod)
        .withArguments(
            or(isA(Collection.class), isNull(Collection.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final SolrDocumentList retval =
        objectUnderTest.getSolrDocFromIndustryAndBizlineCatIds(
            industryCatIds, bizLineCatds, FIELDS_TO_RETURN, needAllEntities, isCustomized);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    SolrDocumentList.class,
    SolrServerReader.class,
    FR_ArrayUtils.class,
    Logger.class
  })
  @Test
  public void getSolrDocFromIndustryAndBizlineCatIdsInputNull1NullFalseFalseOutputNotNull()
      throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FR_ArrayUtils.class);
    PowerMockito.mockStatic(SolrServerReader.class);

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(false).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "favIconServer", solrServer1);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterServer", solrServer2);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final List<String> industryCatIds = null;
    final ArrayList<String> bizLineCatds = new ArrayList<String>();
    bizLineCatds.add(null);
    final String[] FIELDS_TO_RETURN = null;
    final boolean needAllEntities = false;
    final boolean isCustomized = false;
    final SolrDocumentList solrDocumentList = PowerMockito.mock(SolrDocumentList.class);
    final Method sizeMethod = DTUMemberMatcher.method(SolrDocumentList.class, "size");
    PowerMockito.doReturn(450).when(solrDocumentList, sizeMethod).withNoArguments();
    final Method retrieveNSolrDocsMethod =
        DTUMemberMatcher.method(
            SolrServerReader.class,
            "retrieveNSolrDocs",
            SolrServer.class,
            String.class,
            int.class,
            int.class,
            String.class,
            boolean.class,
            java.lang.String[].class);
    PowerMockito.doReturn(solrDocumentList)
        .when(SolrServerReader.class, retrieveNSolrDocsMethod)
        .withArguments(
            or(isA(SolrServer.class), isNull(SolrServer.class)),
            or(isA(String.class), isNull(String.class)),
            anyInt(),
            anyInt(),
            or(isA(String.class), isNull(String.class)),
            anyBoolean(),
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)));
    final Method getStringFromCollectionMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "getStringFromCollection", Collection.class, String.class);
    PowerMockito.doReturn("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"")
        .when(FR_ArrayUtils.class, getStringFromCollectionMethod)
        .withArguments(
            or(isA(Collection.class), isNull(Collection.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final SolrDocumentList retval =
        objectUnderTest.getSolrDocFromIndustryAndBizlineCatIds(
            industryCatIds, bizLineCatds, FIELDS_TO_RETURN, needAllEntities, isCustomized);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTwitterGroupServerOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final SolrServer retval = objectUnderTest.getTwitterGroupServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTwitterServerOutputNull() {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    final SolrServer retval = objectUnderTest.getTwitterServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void initOutputServiceException() throws Exception {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest = new EntityBaseServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(objectUnderTest, "searcher", solrSearcher);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);

    // Act
    thrown.expect(ServiceException.class);
    objectUnderTest.init();

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EntityBaseServiceRepositoryImpl.class)
  @Test
  public void initOutputServiceException2() throws Exception {

    // Arrange
    final EntityBaseServiceRepositoryImpl objectUnderTest =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", "");
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    final DistributedSolrSearcher.DistributedSearchConfig distributedSearchConfig =
        (DistributedSolrSearcher.DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    final SolrServer[] solrServerArray = {};
    Reflector.setField(distributedSearchConfig, "docServers", solrServerArray);
    Reflector.setField(serviceConfig, "distributedSearchConfig", distributedSearchConfig);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", "");
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final DistributedSolrSearcher distributedSolrSearcher =
        PowerMockito.mock(DistributedSolrSearcher.class);
    PowerMockito.whenNew(DistributedSolrSearcher.class)
        .withParameterTypes(DistributedSolrSearcher.DistributedSearchConfig.class)
        .withArguments(
            or(
                isA(DistributedSolrSearcher.DistributedSearchConfig.class),
                isNull(DistributedSolrSearcher.DistributedSearchConfig.class)))
        .thenReturn(distributedSolrSearcher);

    // Act
    thrown.expect(ServiceException.class);
    objectUnderTest.init();

    // Method is not expected to return due to exception thrown
  }
}
