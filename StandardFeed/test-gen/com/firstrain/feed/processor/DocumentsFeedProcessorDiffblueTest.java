package com.firstrain.feed.processor;

import static org.junit.Assert.assertNotNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyShort;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.content.pipeline.DefaultProcessor.Statistics;
import com.firstrain.content.similarity.DocumentSimilarityUtil;
import com.firstrain.frapi.domain.BaseSpec;
import com.firstrain.solr.client.SearchSpec;
import com.firstrain.web.pojo.Content;
import com.firstrain.web.pojo.Document;
import com.firstrain.web.pojo.EntityData;
import com.firstrain.web.response.EntityDataResponse;
import com.firstrain.web.wrapper.EntityDataWrapper;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class DocumentsFeedProcessorDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: DocumentsFeedProcessor */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityData.class,
    DocumentsFeedProcessor.class,
    EntityDataResponse.class,
    EntityDataWrapper.class,
    Content.class
  })
  @Test
  public void getEntityDataResponseInput0NullZeroZeroOutputNotNull() throws Exception {

    // Arrange
    final DocumentsFeedProcessor objectUnderTest = new DocumentsFeedProcessor();
    Reflector.setField(objectUnderTest, "docImageServer", null);
    objectUnderTest.setCompFiltersFilePath(null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    objectUnderTest.setRelTopicsFilePath(null);
    objectUnderTest.setImageServiceURLsCSV(null);
    Reflector.setField(objectUnderTest, "mediumBandCatSet", null);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    objectUnderTest.setEntitySolrServerURL(null);
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setMailHost(null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    objectUnderTest.setFeedfilename(null);
    objectUnderTest.setMailTo(null);
    objectUnderTest.setTempLocation(null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "topicDim", null);
    objectUnderTest.setExcludeSourceIds(null);
    Reflector.setField(objectUnderTest, "narrowBandCatSet", null);
    objectUnderTest.setEntitySearchToken(null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    objectUnderTest.setMailFrom(null);
    objectUnderTest.setDocImageServerURL(null);
    objectUnderTest.setChunkSize(0);
    objectUnderTest.setDestLocation(null);
    objectUnderTest.setWebResultsTotalCount((short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", null);
    objectUnderTest.setFileNameFormat(null);
    objectUnderTest.setFilterSearchToken(null);
    objectUnderTest.setDocSimilarityPropPath(null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", null);
    objectUnderTest.setDocSolrServerURL(null);
    objectUnderTest.setIndustryClassificationId((short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final ArrayList<Document> documentList = new ArrayList<Document>();
    final String fileName = null;
    final int start = 0;
    final int totalItemCount = 0;
    final Content content = PowerMockito.mock(Content.class);
    PowerMockito.whenNew(Content.class).withNoArguments().thenReturn(content);
    final EntityData entityData = PowerMockito.mock(EntityData.class);
    PowerMockito.whenNew(EntityData.class).withNoArguments().thenReturn(entityData);
    final EntityDataWrapper entityDataWrapper = PowerMockito.mock(EntityDataWrapper.class);
    PowerMockito.whenNew(EntityDataWrapper.class).withNoArguments().thenReturn(entityDataWrapper);
    final EntityDataResponse entityDataResponse = PowerMockito.mock(EntityDataResponse.class);
    PowerMockito.whenNew(EntityDataResponse.class).withNoArguments().thenReturn(entityDataResponse);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntityDataResponse",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("int"),
            Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final EntityDataResponse retval =
        (EntityDataResponse)
            methodUnderTest.invoke(objectUnderTest, documentList, fileName, start, totalItemCount);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    EntityData.class,
    DocumentsFeedProcessor.class,
    EntityDataResponse.class,
    EntityDataWrapper.class,
    Content.class
  })
  @Test
  public void getEntityDataResponseInput1NullZeroZeroOutputNotNull() throws Exception {

    // Arrange
    final DocumentsFeedProcessor objectUnderTest = new DocumentsFeedProcessor();
    Reflector.setField(objectUnderTest, "docImageServer", null);
    objectUnderTest.setCompFiltersFilePath(null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    objectUnderTest.setRelTopicsFilePath(null);
    objectUnderTest.setImageServiceURLsCSV(null);
    Reflector.setField(objectUnderTest, "mediumBandCatSet", null);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    objectUnderTest.setEntitySolrServerURL(null);
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setMailHost(null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    objectUnderTest.setFeedfilename(null);
    objectUnderTest.setMailTo(null);
    objectUnderTest.setTempLocation(null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "topicDim", null);
    objectUnderTest.setExcludeSourceIds(null);
    Reflector.setField(objectUnderTest, "narrowBandCatSet", null);
    objectUnderTest.setEntitySearchToken(null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    objectUnderTest.setMailFrom(null);
    objectUnderTest.setDocImageServerURL(null);
    objectUnderTest.setChunkSize(0);
    objectUnderTest.setDestLocation(null);
    objectUnderTest.setWebResultsTotalCount((short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", null);
    objectUnderTest.setFileNameFormat(null);
    objectUnderTest.setFilterSearchToken(null);
    objectUnderTest.setDocSimilarityPropPath(null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", null);
    objectUnderTest.setDocSolrServerURL(null);
    objectUnderTest.setIndustryClassificationId((short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final ArrayList<Document> documentList = new ArrayList<Document>();
    documentList.add(null);
    final String fileName = null;
    final int start = 0;
    final int totalItemCount = 0;
    final Content content = PowerMockito.mock(Content.class);
    PowerMockito.whenNew(Content.class).withNoArguments().thenReturn(content);
    final EntityData entityData = PowerMockito.mock(EntityData.class);
    PowerMockito.whenNew(EntityData.class).withNoArguments().thenReturn(entityData);
    final EntityDataWrapper entityDataWrapper = PowerMockito.mock(EntityDataWrapper.class);
    PowerMockito.whenNew(EntityDataWrapper.class).withNoArguments().thenReturn(entityDataWrapper);
    final EntityDataResponse entityDataResponse = PowerMockito.mock(EntityDataResponse.class);
    PowerMockito.whenNew(EntityDataResponse.class).withNoArguments().thenReturn(entityDataResponse);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntityDataResponse",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("int"),
            Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final EntityDataResponse retval =
        (EntityDataResponse)
            methodUnderTest.invoke(objectUnderTest, documentList, fileName, start, totalItemCount);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({BaseSpec.class, SearchSpec.class, Logger.class, DocumentsFeedProcessor.class})
  @Test
  public void getSearchResultInput50NotNullNotNullOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocumentsFeedProcessor objectUnderTest =
        (DocumentsFeedProcessor)
            Reflector.getInstance("com.firstrain.feed.processor.DocumentsFeedProcessor");
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "compFiltersFilePath", null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    Reflector.setField(objectUnderTest, "relTopicsFilePath", null);
    Reflector.setField(objectUnderTest, "imageServiceURLsCSV", "");
    final java.util.HashSet<Integer> hashSet = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "mediumBandCatSet", hashSet);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    Reflector.setField(objectUnderTest, "entitySolrServerURL", "");
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    Reflector.setField(objectUnderTest, "mailHost", null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    Reflector.setField(objectUnderTest, "feedfilename", null);
    Reflector.setField(objectUnderTest, "mailTo", null);
    Reflector.setField(objectUnderTest, "tempLocation", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    final ArrayList<Integer> arrayList = new ArrayList<Integer>();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "topicDim", arrayList);
    Reflector.setField(objectUnderTest, "excludeSourceIds", "");
    final java.util.HashSet<Integer> hashSet1 = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "narrowBandCatSet", hashSet1);
    Reflector.setField(objectUnderTest, "entitySearchToken", null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    Reflector.setField(objectUnderTest, "mailFrom", null);
    Reflector.setField(objectUnderTest, "docImageServerURL", null);
    Reflector.setField(objectUnderTest, "chunkSize", 0);
    Reflector.setField(objectUnderTest, "destLocation", null);
    Reflector.setField(objectUnderTest, "webResultsTotalCount", (short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", "");
    Reflector.setField(objectUnderTest, "fileNameFormat", "");
    Reflector.setField(objectUnderTest, "filterSearchToken", null);
    Reflector.setField(objectUnderTest, "docSimilarityPropPath", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", arrayList1);
    Reflector.setField(objectUnderTest, "docSolrServerURL", null);
    Reflector.setField(objectUnderTest, "industryClassificationId", (short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final String[] qMulti = {null, "", null, null, null};
    final int[] scopeMulti = {};
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeArticleIdsSSVMethod).withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getSearchResult",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("java.lang.String"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, qMulti, scopeMulti, fq, spec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({BaseSpec.class, SearchSpec.class, Logger.class, DocumentsFeedProcessor.class})
  @Test
  public void getSearchResultInput50NotNullNotNullOutputNullPointerException2() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocumentsFeedProcessor objectUnderTest =
        (DocumentsFeedProcessor)
            Reflector.getInstance("com.firstrain.feed.processor.DocumentsFeedProcessor");
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "compFiltersFilePath", null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    Reflector.setField(objectUnderTest, "relTopicsFilePath", null);
    Reflector.setField(objectUnderTest, "imageServiceURLsCSV", "");
    final java.util.HashSet<Integer> hashSet = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "mediumBandCatSet", hashSet);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    Reflector.setField(objectUnderTest, "entitySolrServerURL", "");
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    Reflector.setField(objectUnderTest, "mailHost", null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    Reflector.setField(objectUnderTest, "feedfilename", null);
    Reflector.setField(objectUnderTest, "mailTo", null);
    Reflector.setField(objectUnderTest, "tempLocation", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    final ArrayList<Integer> arrayList = new ArrayList<Integer>();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "topicDim", arrayList);
    Reflector.setField(objectUnderTest, "excludeSourceIds", "");
    final java.util.HashSet<Integer> hashSet1 = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "narrowBandCatSet", hashSet1);
    Reflector.setField(objectUnderTest, "entitySearchToken", null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    Reflector.setField(objectUnderTest, "mailFrom", null);
    Reflector.setField(objectUnderTest, "docImageServerURL", null);
    Reflector.setField(objectUnderTest, "chunkSize", 0);
    Reflector.setField(objectUnderTest, "destLocation", null);
    Reflector.setField(objectUnderTest, "webResultsTotalCount", (short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", "");
    Reflector.setField(objectUnderTest, "fileNameFormat", "");
    Reflector.setField(objectUnderTest, "filterSearchToken", null);
    Reflector.setField(objectUnderTest, "docSimilarityPropPath", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", arrayList1);
    Reflector.setField(objectUnderTest, "docSolrServerURL", null);
    Reflector.setField(objectUnderTest, "industryClassificationId", (short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final String[] qMulti = {null, "", null, null, null};
    final int[] scopeMulti = {};
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getSearchResult",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("java.lang.String"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, qMulti, scopeMulti, fq, spec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({BaseSpec.class, SearchSpec.class, Logger.class, DocumentsFeedProcessor.class})
  @Test
  public void getSearchResultInput50NotNullNotNullOutputNullPointerException3() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocumentsFeedProcessor objectUnderTest =
        (DocumentsFeedProcessor)
            Reflector.getInstance("com.firstrain.feed.processor.DocumentsFeedProcessor");
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "compFiltersFilePath", null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    Reflector.setField(objectUnderTest, "relTopicsFilePath", null);
    Reflector.setField(objectUnderTest, "imageServiceURLsCSV", "");
    final java.util.HashSet<Integer> hashSet = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "mediumBandCatSet", hashSet);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    Reflector.setField(objectUnderTest, "entitySolrServerURL", "");
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    Reflector.setField(objectUnderTest, "mailHost", null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    Reflector.setField(objectUnderTest, "feedfilename", null);
    Reflector.setField(objectUnderTest, "mailTo", null);
    Reflector.setField(objectUnderTest, "tempLocation", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    final ArrayList<Integer> arrayList = new ArrayList<Integer>();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "topicDim", arrayList);
    Reflector.setField(objectUnderTest, "excludeSourceIds", "");
    final java.util.HashSet<Integer> hashSet1 = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "narrowBandCatSet", hashSet1);
    Reflector.setField(objectUnderTest, "entitySearchToken", null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    Reflector.setField(objectUnderTest, "mailFrom", null);
    Reflector.setField(objectUnderTest, "docImageServerURL", null);
    Reflector.setField(objectUnderTest, "chunkSize", 0);
    Reflector.setField(objectUnderTest, "destLocation", null);
    Reflector.setField(objectUnderTest, "webResultsTotalCount", (short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", "");
    Reflector.setField(objectUnderTest, "fileNameFormat", "");
    Reflector.setField(objectUnderTest, "filterSearchToken", null);
    Reflector.setField(objectUnderTest, "docSimilarityPropPath", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", arrayList1);
    Reflector.setField(objectUnderTest, "docSolrServerURL", null);
    Reflector.setField(objectUnderTest, "industryClassificationId", (short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final String[] qMulti = {null, "", null, null, null};
    final int[] scopeMulti = {};
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber)
            PowerMockito.doReturn("")
                .doReturn("????????????????????????????????????????????????????????????????")
                .doReturn(""))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "start", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    Reflector.setField(searchSpec1, "fq", "");
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec2, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "qMulti", null);
    Reflector.setField(searchSpec2, "scopeMulti", null);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec2);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getSearchResult",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("java.lang.String"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, qMulti, scopeMulti, fq, spec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({BaseSpec.class, SearchSpec.class, Logger.class, DocumentsFeedProcessor.class})
  @Test
  public void getSearchResultInput50NotNullNotNullOutputNullPointerException4() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocumentsFeedProcessor objectUnderTest =
        (DocumentsFeedProcessor)
            Reflector.getInstance("com.firstrain.feed.processor.DocumentsFeedProcessor");
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "compFiltersFilePath", null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    Reflector.setField(objectUnderTest, "relTopicsFilePath", null);
    Reflector.setField(objectUnderTest, "imageServiceURLsCSV", "");
    final java.util.HashSet<Integer> hashSet = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "mediumBandCatSet", hashSet);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    Reflector.setField(objectUnderTest, "entitySolrServerURL", "");
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    Reflector.setField(objectUnderTest, "mailHost", null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    Reflector.setField(objectUnderTest, "feedfilename", null);
    Reflector.setField(objectUnderTest, "mailTo", null);
    Reflector.setField(objectUnderTest, "tempLocation", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    final ArrayList<Integer> arrayList = new ArrayList<Integer>();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "topicDim", arrayList);
    Reflector.setField(objectUnderTest, "excludeSourceIds", "");
    final java.util.HashSet<Integer> hashSet1 = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "narrowBandCatSet", hashSet1);
    Reflector.setField(objectUnderTest, "entitySearchToken", null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    Reflector.setField(objectUnderTest, "mailFrom", null);
    Reflector.setField(objectUnderTest, "docImageServerURL", null);
    Reflector.setField(objectUnderTest, "chunkSize", 0);
    Reflector.setField(objectUnderTest, "destLocation", null);
    Reflector.setField(objectUnderTest, "webResultsTotalCount", (short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", "");
    Reflector.setField(objectUnderTest, "fileNameFormat", "");
    Reflector.setField(objectUnderTest, "filterSearchToken", null);
    Reflector.setField(objectUnderTest, "docSimilarityPropPath", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", arrayList1);
    Reflector.setField(objectUnderTest, "docSolrServerURL", null);
    Reflector.setField(objectUnderTest, "industryClassificationId", (short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final String[] qMulti = {null, "", null, null, null};
    final int[] scopeMulti = {};
    final String fq = "?";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber)
            PowerMockito.doReturn("")
                .doReturn("????????????????????????????????????????????????????????????????")
                .doReturn(""))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "start", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    Reflector.setField(searchSpec1, "fq", "");
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec2, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "qMulti", null);
    Reflector.setField(searchSpec2, "scopeMulti", null);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec2);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getSearchResult",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("java.lang.String"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, qMulti, scopeMulti, fq, spec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({BaseSpec.class, SearchSpec.class, Logger.class, DocumentsFeedProcessor.class})
  @Test
  public void getSearchResultInput50NotNullNotNullOutputNullPointerException5() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocumentsFeedProcessor objectUnderTest =
        (DocumentsFeedProcessor)
            Reflector.getInstance("com.firstrain.feed.processor.DocumentsFeedProcessor");
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "compFiltersFilePath", null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    Reflector.setField(objectUnderTest, "relTopicsFilePath", null);
    Reflector.setField(objectUnderTest, "imageServiceURLsCSV", "");
    final java.util.HashSet<Integer> hashSet = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "mediumBandCatSet", hashSet);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    Reflector.setField(objectUnderTest, "entitySolrServerURL", "");
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    Reflector.setField(objectUnderTest, "mailHost", null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    Reflector.setField(objectUnderTest, "feedfilename", null);
    Reflector.setField(objectUnderTest, "mailTo", null);
    Reflector.setField(objectUnderTest, "tempLocation", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    final ArrayList<Integer> arrayList = new ArrayList<Integer>();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "topicDim", arrayList);
    Reflector.setField(objectUnderTest, "excludeSourceIds", "");
    final java.util.HashSet<Integer> hashSet1 = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "narrowBandCatSet", hashSet1);
    Reflector.setField(objectUnderTest, "entitySearchToken", null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    Reflector.setField(objectUnderTest, "mailFrom", null);
    Reflector.setField(objectUnderTest, "docImageServerURL", null);
    Reflector.setField(objectUnderTest, "chunkSize", 0);
    Reflector.setField(objectUnderTest, "destLocation", null);
    Reflector.setField(objectUnderTest, "webResultsTotalCount", (short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", "");
    Reflector.setField(objectUnderTest, "fileNameFormat", "");
    Reflector.setField(objectUnderTest, "filterSearchToken", null);
    Reflector.setField(objectUnderTest, "docSimilarityPropPath", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", arrayList1);
    Reflector.setField(objectUnderTest, "docSolrServerURL", null);
    Reflector.setField(objectUnderTest, "industryClassificationId", (short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final String[] qMulti = {null, "", null, null, null};
    final int[] scopeMulti = {};
    final String fq = "?";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getExcludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getIncludeSourceIdsSSVMethod).withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber)
            PowerMockito.doReturn("")
                .doReturn("????????????????????????????????????????????????????????????????")
                .doReturn(""))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "start", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    Reflector.setField(searchSpec1, "fq", "");
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec2, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "qMulti", null);
    Reflector.setField(searchSpec2, "scopeMulti", null);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec2);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getSearchResult",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("java.lang.String"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, qMulti, scopeMulti, fq, spec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({BaseSpec.class, SearchSpec.class, Logger.class, DocumentsFeedProcessor.class})
  @Test
  public void getSearchResultInput50NotNullNotNullOutputNullPointerException6() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocumentsFeedProcessor objectUnderTest =
        (DocumentsFeedProcessor)
            Reflector.getInstance("com.firstrain.feed.processor.DocumentsFeedProcessor");
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "compFiltersFilePath", null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    Reflector.setField(objectUnderTest, "relTopicsFilePath", null);
    Reflector.setField(objectUnderTest, "imageServiceURLsCSV", "");
    final java.util.HashSet<Integer> hashSet = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "mediumBandCatSet", hashSet);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    Reflector.setField(objectUnderTest, "entitySolrServerURL", "");
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    Reflector.setField(objectUnderTest, "mailHost", null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    Reflector.setField(objectUnderTest, "feedfilename", null);
    Reflector.setField(objectUnderTest, "mailTo", null);
    Reflector.setField(objectUnderTest, "tempLocation", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    final ArrayList<Integer> arrayList = new ArrayList<Integer>();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "topicDim", arrayList);
    Reflector.setField(objectUnderTest, "excludeSourceIds", "");
    final java.util.HashSet<Integer> hashSet1 = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "narrowBandCatSet", hashSet1);
    Reflector.setField(objectUnderTest, "entitySearchToken", null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    Reflector.setField(objectUnderTest, "mailFrom", null);
    Reflector.setField(objectUnderTest, "docImageServerURL", null);
    Reflector.setField(objectUnderTest, "chunkSize", 0);
    Reflector.setField(objectUnderTest, "destLocation", null);
    Reflector.setField(objectUnderTest, "webResultsTotalCount", (short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", "");
    Reflector.setField(objectUnderTest, "fileNameFormat", "");
    Reflector.setField(objectUnderTest, "filterSearchToken", null);
    Reflector.setField(objectUnderTest, "docSimilarityPropPath", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", arrayList1);
    Reflector.setField(objectUnderTest, "docSolrServerURL", null);
    Reflector.setField(objectUnderTest, "industryClassificationId", (short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final String[] qMulti = {null, "", null, null, null};
    final int[] scopeMulti = {};
    final String fq = "?";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber)
            PowerMockito.doReturn("")
                .doReturn("????????????????????????????????????????????????????????????????")
                .doReturn(""))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    ((PowerMockitoStubber) PowerMockito.doReturn((short) 0).doReturn((short) 0))
        .when(spec, getIndustryClassificationIdMethod)
        .withNoArguments();
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    ((PowerMockitoStubber)
            PowerMockito.doReturn("")
                .doReturn("????????????????????????????????????????????????????????????????")
                .doReturn(""))
        .when(spec, getExcludeSourceIdsSSVMethod)
        .withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setIndustryClassificationIdMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIndustryClassificationId", short.class);
    PowerMockito.doReturn(null)
        .when(searchSpec, setIndustryClassificationIdMethod)
        .withArguments(anyShort());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "start", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    Reflector.setField(searchSpec1, "fq", "");
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    final Method setExcludeDocIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeDocIds", String.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setExcludeDocIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec2, "start", 0);
    final String[] stringArray1 = {};
    Reflector.setField(searchSpec2, "qMulti", stringArray1);
    final int[] intArray1 = {};
    Reflector.setField(searchSpec2, "scopeMulti", intArray1);
    Reflector.setField(searchSpec2, "fq", "");
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    final Method setExcludeSourceIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setExcludeSourceIds", String.class);
    PowerMockito.doReturn(searchSpec2)
        .when(searchSpec, setExcludeSourceIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "fq", null);
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec3 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec3, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec3, "start", 0);
    Reflector.setField(searchSpec3, "qMulti", null);
    Reflector.setField(searchSpec3, "scopeMulti", null);
    Reflector.setField(searchSpec3, "fq", null);
    Reflector.setField(searchSpec3, "needQuotes", false);
    Reflector.setField(searchSpec3, "needSearchSuggestion", false);
    Reflector.setField(searchSpec3, "needBodyLength", false);
    Reflector.setField(searchSpec3, "needHotListAll", false);
    Reflector.setField(searchSpec3, "needHighlighting", false);
    Reflector.setField(searchSpec3, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec3);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getSearchResult",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("java.lang.String"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, qMulti, scopeMulti, fq, spec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({BaseSpec.class, SearchSpec.class, Logger.class, DocumentsFeedProcessor.class})
  @Test
  public void getSearchResultInput50NotNullNotNullOutputNullPointerException7() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocumentsFeedProcessor objectUnderTest =
        (DocumentsFeedProcessor)
            Reflector.getInstance("com.firstrain.feed.processor.DocumentsFeedProcessor");
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "compFiltersFilePath", null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    Reflector.setField(objectUnderTest, "relTopicsFilePath", null);
    Reflector.setField(objectUnderTest, "imageServiceURLsCSV", "");
    final java.util.HashSet<Integer> hashSet = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "mediumBandCatSet", hashSet);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    Reflector.setField(objectUnderTest, "entitySolrServerURL", "");
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    Reflector.setField(objectUnderTest, "mailHost", null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    Reflector.setField(objectUnderTest, "feedfilename", null);
    Reflector.setField(objectUnderTest, "mailTo", null);
    Reflector.setField(objectUnderTest, "tempLocation", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    final ArrayList<Integer> arrayList = new ArrayList<Integer>();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "topicDim", arrayList);
    Reflector.setField(objectUnderTest, "excludeSourceIds", "");
    final java.util.HashSet<Integer> hashSet1 = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "narrowBandCatSet", hashSet1);
    Reflector.setField(objectUnderTest, "entitySearchToken", null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    Reflector.setField(objectUnderTest, "mailFrom", null);
    Reflector.setField(objectUnderTest, "docImageServerURL", null);
    Reflector.setField(objectUnderTest, "chunkSize", 0);
    Reflector.setField(objectUnderTest, "destLocation", null);
    Reflector.setField(objectUnderTest, "webResultsTotalCount", (short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", "");
    Reflector.setField(objectUnderTest, "fileNameFormat", "");
    Reflector.setField(objectUnderTest, "filterSearchToken", null);
    Reflector.setField(objectUnderTest, "docSimilarityPropPath", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", arrayList1);
    Reflector.setField(objectUnderTest, "docSolrServerURL", null);
    Reflector.setField(objectUnderTest, "industryClassificationId", (short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final String[] qMulti = {null, "", null, null, null};
    final int[] scopeMulti = {};
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getIncludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    PowerMockito.doReturn(null).when(spec, getIndustryClassificationIdMethod).withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "fq", "");
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec1, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec1, "start", 0);
    Reflector.setField(searchSpec1, "qMulti", null);
    Reflector.setField(searchSpec1, "scopeMulti", null);
    Reflector.setField(searchSpec1, "fq", null);
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec1);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getSearchResult",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("java.lang.String"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, qMulti, scopeMulti, fq, spec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({BaseSpec.class, SearchSpec.class, Logger.class, DocumentsFeedProcessor.class})
  @Test
  public void getSearchResultInput50NotNullNotNullOutputNullPointerException8() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocumentsFeedProcessor objectUnderTest =
        (DocumentsFeedProcessor)
            Reflector.getInstance("com.firstrain.feed.processor.DocumentsFeedProcessor");
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "compFiltersFilePath", null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    Reflector.setField(objectUnderTest, "relTopicsFilePath", null);
    Reflector.setField(objectUnderTest, "imageServiceURLsCSV", "");
    final java.util.HashSet<Integer> hashSet = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "mediumBandCatSet", hashSet);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    Reflector.setField(objectUnderTest, "entitySolrServerURL", "");
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    Reflector.setField(objectUnderTest, "mailHost", null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    Reflector.setField(objectUnderTest, "feedfilename", null);
    Reflector.setField(objectUnderTest, "mailTo", null);
    Reflector.setField(objectUnderTest, "tempLocation", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    final ArrayList<Integer> arrayList = new ArrayList<Integer>();
    arrayList.add(null);
    Reflector.setField(objectUnderTest, "topicDim", arrayList);
    Reflector.setField(objectUnderTest, "excludeSourceIds", "");
    final java.util.HashSet<Integer> hashSet1 = new java.util.HashSet<Integer>();
    Reflector.setField(objectUnderTest, "narrowBandCatSet", hashSet1);
    Reflector.setField(objectUnderTest, "entitySearchToken", null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    Reflector.setField(objectUnderTest, "mailFrom", null);
    Reflector.setField(objectUnderTest, "docImageServerURL", null);
    Reflector.setField(objectUnderTest, "chunkSize", 0);
    Reflector.setField(objectUnderTest, "destLocation", null);
    Reflector.setField(objectUnderTest, "webResultsTotalCount", (short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", "");
    Reflector.setField(objectUnderTest, "fileNameFormat", "");
    Reflector.setField(objectUnderTest, "filterSearchToken", null);
    Reflector.setField(objectUnderTest, "docSimilarityPropPath", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", arrayList1);
    Reflector.setField(objectUnderTest, "docSolrServerURL", null);
    Reflector.setField(objectUnderTest, "industryClassificationId", (short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final String[] qMulti = {null, "", null, null, null};
    final int[] scopeMulti = {};
    final String fq = "";
    final BaseSpec spec = PowerMockito.mock(BaseSpec.class);
    final Method getExcludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeSourceIdsSSV");
    PowerMockito.doReturn(null).when(spec, getExcludeSourceIdsSSVMethod).withNoArguments();
    final Method getIncludeSourceIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIncludeSourceIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn("?").doReturn(""))
        .when(spec, getIncludeSourceIdsSSVMethod)
        .withNoArguments();
    final Method getCountMethod = DTUMemberMatcher.method(BaseSpec.class, "getCount");
    PowerMockito.doReturn((short) 0).when(spec, getCountMethod).withNoArguments();
    final Method getExcludeArticleIdsSSVMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getExcludeArticleIdsSSV");
    ((PowerMockitoStubber) PowerMockito.doReturn("").doReturn(""))
        .when(spec, getExcludeArticleIdsSSVMethod)
        .withNoArguments();
    final Method getIndustryClassificationIdMethod =
        DTUMemberMatcher.method(BaseSpec.class, "getIndustryClassificationId");
    PowerMockito.doReturn(null).when(spec, getIndustryClassificationIdMethod).withNoArguments();
    final SearchSpec searchSpec = PowerMockito.mock(SearchSpec.class);
    final Method setOrderMethod = DTUMemberMatcher.method(SearchSpec.class, "setOrder", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setOrderMethod).withArguments(anyInt());
    final SearchSpec searchSpec1 = PowerMockito.mock(SearchSpec.class);
    Reflector.setField(searchSpec1, "start", 0);
    final String[] stringArray = {};
    Reflector.setField(searchSpec1, "qMulti", stringArray);
    final int[] intArray = {};
    Reflector.setField(searchSpec1, "scopeMulti", intArray);
    Reflector.setField(searchSpec1, "fq", "");
    Reflector.setField(searchSpec1, "needQuotes", false);
    Reflector.setField(searchSpec1, "needSearchSuggestion", false);
    Reflector.setField(searchSpec1, "needBodyLength", false);
    Reflector.setField(searchSpec1, "needHotListAll", false);
    Reflector.setField(searchSpec1, "needHighlighting", false);
    Reflector.setField(searchSpec1, "useLikelySearchIntention", false);
    final Method setIncludeSourceIdsMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setIncludeSourceIds", String.class);
    PowerMockito.doReturn(searchSpec1)
        .when(searchSpec, setIncludeSourceIdsMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final Method setRowsMethod = DTUMemberMatcher.method(SearchSpec.class, "setRows", int.class);
    PowerMockito.doReturn(null).when(searchSpec, setRowsMethod).withArguments(anyInt());
    Reflector.setField(searchSpec, "start", 0);
    Reflector.setField(searchSpec, "qMulti", null);
    Reflector.setField(searchSpec, "scopeMulti", null);
    Reflector.setField(searchSpec, "fq", "");
    Reflector.setField(searchSpec, "needQuotes", false);
    Reflector.setField(searchSpec, "needSearchSuggestion", false);
    Reflector.setField(searchSpec, "needBodyLength", false);
    Reflector.setField(searchSpec, "needHotListAll", false);
    Reflector.setField(searchSpec, "needHighlighting", false);
    Reflector.setField(searchSpec, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class)
        .withParameterTypes(SearchSpec.class)
        .withArguments(or(isA(SearchSpec.class), isNull(SearchSpec.class)))
        .thenReturn(searchSpec);
    final SearchSpec searchSpec2 = PowerMockito.mock(SearchSpec.class);
    final Method setTagExclusionScopeMethod =
        DTUMemberMatcher.method(SearchSpec.class, "setTagExclusionScope", int.class);
    PowerMockito.doReturn(null)
        .when(searchSpec2, setTagExclusionScopeMethod)
        .withArguments(anyInt());
    Reflector.setField(searchSpec2, "start", 0);
    Reflector.setField(searchSpec2, "qMulti", null);
    Reflector.setField(searchSpec2, "scopeMulti", null);
    Reflector.setField(searchSpec2, "fq", null);
    Reflector.setField(searchSpec2, "needQuotes", false);
    Reflector.setField(searchSpec2, "needSearchSuggestion", false);
    Reflector.setField(searchSpec2, "needBodyLength", false);
    Reflector.setField(searchSpec2, "needHotListAll", false);
    Reflector.setField(searchSpec2, "needHighlighting", false);
    Reflector.setField(searchSpec2, "useLikelySearchIntention", false);
    PowerMockito.whenNew(SearchSpec.class).withNoArguments().thenReturn(searchSpec2);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "getSearchResult",
              Reflector.forName("java.lang.String[]"),
              Reflector.forName("int[]"),
              Reflector.forName("java.lang.String"),
              Reflector.forName("com.firstrain.frapi.domain.BaseSpec"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, qMulti, scopeMulti, fq, spec);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void processContentInput1ZeroZeroNullOutputNullPointerException() throws Throwable {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final DocumentsFeedProcessor objectUnderTest =
        (DocumentsFeedProcessor)
            Reflector.getInstance("com.firstrain.feed.processor.DocumentsFeedProcessor");
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "compFiltersFilePath", null);
    Reflector.setField(objectUnderTest, "entityIndexVersion", 0L);
    Reflector.setField(objectUnderTest, "companiesToDisplay", null);
    Reflector.setField(objectUnderTest, "relTopicsFilePath", null);
    Reflector.setField(objectUnderTest, "imageServiceURLsCSV", null);
    Reflector.setField(objectUnderTest, "mediumBandCatSet", null);
    Reflector.setField(objectUnderTest, "companyCatIdsSet", null);
    Reflector.setField(objectUnderTest, "entitySolrServerURL", null);
    Reflector.setField(objectUnderTest, "progressMarkerUpdated", false);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    Reflector.setField(objectUnderTest, "mailHost", null);
    Reflector.setField(objectUnderTest, "topicDimensionsCSV", null);
    Reflector.setField(objectUnderTest, "feedfilename", null);
    Reflector.setField(objectUnderTest, "mailTo", null);
    Reflector.setField(objectUnderTest, "tempLocation", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "topicDim", null);
    Reflector.setField(objectUnderTest, "excludeSourceIds", null);
    Reflector.setField(objectUnderTest, "narrowBandCatSet", null);
    Reflector.setField(objectUnderTest, "entitySearchToken", null);
    Reflector.setField(objectUnderTest, "pipeLineId", null);
    Reflector.setField(objectUnderTest, "mailFrom", null);
    Reflector.setField(objectUnderTest, "docImageServerURL", null);
    Reflector.setField(objectUnderTest, "chunkSize", 0);
    Reflector.setField(objectUnderTest, "destLocation", null);
    Reflector.setField(objectUnderTest, "webResultsTotalCount", (short) 0);
    Reflector.setField(objectUnderTest, "regionsBandCSV", null);
    Reflector.setField(objectUnderTest, "fileNameFormat", null);
    Reflector.setField(objectUnderTest, "filterSearchToken", null);
    Reflector.setField(objectUnderTest, "docSimilarityPropPath", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "regionsBandList", null);
    Reflector.setField(objectUnderTest, "regionsSearchTokensList", null);
    Reflector.setField(objectUnderTest, "docSolrServerURL", null);
    Reflector.setField(objectUnderTest, "industryClassificationId", (short) 0);
    Reflector.setField(objectUnderTest, "regionsSearchTokensCSV", null);
    Reflector.setField(objectUnderTest, "broadBandCatSet", null);
    Reflector.setField(objectUnderTest, "progressStore", null);
    Reflector.setField(objectUnderTest, "progressPath", null);
    Reflector.setField(objectUnderTest, "startMinuteId", 0);
    final ArrayList<Document> docList = new ArrayList<Document>();
    docList.add(null);
    final int start = 0;
    final int totalItemCount = 0;
    final Statistics stats = null;
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(null)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest =
          Reflector.forName("com.firstrain.feed.processor.DocumentsFeedProcessor");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod(
              "processContent",
              Reflector.forName("java.util.List"),
              Reflector.forName("int"),
              Reflector.forName("int"),
              Reflector.forName("com.firstrain.content.pipeline.DefaultProcessor$Statistics"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(objectUnderTest, docList, start, totalItemCount, stats);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }
}
