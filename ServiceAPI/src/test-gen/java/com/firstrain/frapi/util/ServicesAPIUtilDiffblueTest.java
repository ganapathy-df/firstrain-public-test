package com.firstrain.frapi.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.GroupDomainMap;
import com.firstrain.frapi.domain.Document;
import com.firstrain.frapi.obj.MonitorWizardFilters;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.util.DateBucketUtils.BucketSpec;
import com.firstrain.frapi.util.DefaultEnums.DateBucketingMode;
import com.firstrain.obj.IEntityInfo;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.utils.JSONUtility;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class ServicesAPIUtilDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: ServicesAPIUtil */
  // Test generated by Diffblue Deeptest.

  @Test
  public void checkValidDomainInputNotNull0OutputNegative() {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String email = "@A";
    final ArrayList<GroupDomainMap> domainList = new ArrayList<GroupDomainMap>();

    // Act
    final long retval = objectUnderTest.checkValidDomain(email, domainList);

    // Assert
    assertEquals(-1L, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(GroupDomainMap.class)
  @Test
  public void checkValidDomainInputNotNull1OutputNegative() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String email = "@@";
    final ArrayList<GroupDomainMap> domainList = new ArrayList<GroupDomainMap>();
    final GroupDomainMap groupDomainMap = PowerMockito.mock(GroupDomainMap.class);
    final Method getDomainMethod = DTUMemberMatcher.method(GroupDomainMap.class, "getDomain");
    PowerMockito.doReturn("@@").when(groupDomainMap, getDomainMethod).withNoArguments();
    final Method getGroupIdMethod = DTUMemberMatcher.method(GroupDomainMap.class, "getGroupId");
    PowerMockito.doReturn(-1L).when(groupDomainMap, getGroupIdMethod).withNoArguments();
    domainList.add(groupDomainMap);

    // Act
    final long retval = objectUnderTest.checkValidDomain(email, domainList);

    // Assert
    assertEquals(-1L, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(GroupDomainMap.class)
  @Test
  public void checkValidDomainInputNotNull1OutputNegative2() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String email = "3BBBBBBBB7";
    final ArrayList<GroupDomainMap> domainList = new ArrayList<GroupDomainMap>();
    final GroupDomainMap groupDomainMap = PowerMockito.mock(GroupDomainMap.class);
    final Method getDomainMethod = DTUMemberMatcher.method(GroupDomainMap.class, "getDomain");
    PowerMockito.doReturn("@A").when(groupDomainMap, getDomainMethod).withNoArguments();
    domainList.add(groupDomainMap);

    // Act
    final long retval = objectUnderTest.checkValidDomain(email, domainList);

    // Assert
    assertEquals(-1L, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void checkValidDomainInputNotNullNullOutputNegative() {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String email = "?";
    final List<GroupDomainMap> domainList = null;

    // Act
    final long retval = objectUnderTest.checkValidDomain(email, domainList);

    // Assert
    assertEquals(-1L, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Date.class, Document.class})
  @Test
  public void compareInputNotNullNotNullOutputZero() throws Exception {

    // Arrange
    final ServicesAPIUtil.PojoDocumentDateComparator objectUnderTest =
        (ServicesAPIUtil.PojoDocumentDateComparator)
            Reflector.getInstance(
                "com.firstrain.frapi.util.ServicesAPIUtil$PojoDocumentDateComparator");
    Reflector.setField(objectUnderTest, "this$0", null);
    final Document o1 = PowerMockito.mock(Document.class);
    final Date date = PowerMockito.mock(Date.class);
    Reflector.setField(date, "fastTime", 0L);
    final Method getDateMethod = DTUMemberMatcher.method(Document.class, "getDate");
    PowerMockito.doReturn(date).when(o1, getDateMethod).withNoArguments();
    final Document o2 = PowerMockito.mock(Document.class);
    final Date date1 = PowerMockito.mock(Date.class);
    PowerMockito.when(date1.compareTo(or(isA(Date.class), isNull(Date.class)))).thenReturn(0);
    Reflector.setField(date1, "fastTime", 0L);
    final Method getDateMethod1 = DTUMemberMatcher.method(Document.class, "getDate");
    PowerMockito.doReturn(date1).when(o2, getDateMethod1).withNoArguments();

    // Act
    final int retval = objectUnderTest.compare(o1, o2);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(RandomStringUtils.class)
  @Test
  public void generateRandomStringInputZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(RandomStringUtils.class);

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final int count = 0;
    final Method randomAlphanumericMethod =
        DTUMemberMatcher.method(RandomStringUtils.class, "randomAlphanumeric", int.class);
    PowerMockito.doReturn(null)
        .when(RandomStringUtils.class, randomAlphanumericMethod)
        .withArguments(anyInt());

    // Act
    final String retval = objectUnderTest.generateRandomString(count);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDateBucketingSpecInputNullNullOutputNotNull() {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final DateBucketingMode mode = null;
    final String methodName = null;

    // Act
    final BucketSpec retval = objectUnderTest.getDateBucketingSpec(mode, methodName);

    // Assert
    assertNotNull(retval);
    assertNull(retval.currentDate);
    assertNull(retval.mode);
    assertNull(retval.dateFieldOrMethodName);
    assertEquals(true, retval.dateBucket);
    assertEquals(1, retval.bucketSizeThreshold);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getHasMoreValueInputPositiveZeroNullOutputTrue() {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final int actual = 1;
    final int expected = 0;
    final Short start = null;

    // Act
    final boolean retval = objectUnderTest.getHasMoreValue(actual, expected, start);

    // Assert
    assertEquals(true, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, JSONUtility.class})
  @Test
  public void getKeywordFromFilterStringInputNotNullPositiveOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final ServicesAPIUtil objectUnderTest =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(true).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String filterString = "!";
    final long monitorId = 700L;
    final MonitorWizardFilters monitorWizardFilters =
        (MonitorWizardFilters)
            Reflector.getInstance("com.firstrain.frapi.obj.MonitorWizardFilters");
    final MonitorWizardFilters.Advanced advanced =
        (MonitorWizardFilters.Advanced)
            Reflector.getInstance("com.firstrain.frapi.obj.MonitorWizardFilters$Advanced");
    final ArrayList<String> arrayList = new ArrayList<String>();
    advanced.advancedFilters = arrayList;
    advanced.keywords = "";
    monitorWizardFilters.advanced = advanced;
    monitorWizardFilters.ct = null;
    monitorWizardFilters.rg = null;
    monitorWizardFilters.bb = null;
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(monitorWizardFilters)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    final String retval = objectUnderTest.getKeywordFromFilterString(filterString, monitorId);

    // Assert
    assertEquals("", retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, JSONUtility.class})
  @Test
  public void getKeywordFromFilterStringInputNotNullPositiveOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final ServicesAPIUtil objectUnderTest =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(true).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String filterString = "!";
    final long monitorId = 700L;
    final MonitorWizardFilters monitorWizardFilters =
        (MonitorWizardFilters)
            Reflector.getInstance("com.firstrain.frapi.obj.MonitorWizardFilters");
    final MonitorWizardFilters.Advanced advanced =
        (MonitorWizardFilters.Advanced)
            Reflector.getInstance("com.firstrain.frapi.obj.MonitorWizardFilters$Advanced");
    final ArrayList<String> arrayList = new ArrayList<String>();
    advanced.advancedFilters = arrayList;
    advanced.keywords = "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
    monitorWizardFilters.advanced = advanced;
    monitorWizardFilters.ct = null;
    monitorWizardFilters.rg = null;
    monitorWizardFilters.bb = null;
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(monitorWizardFilters)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    final String retval = objectUnderTest.getKeywordFromFilterString(filterString, monitorId);

    // Assert
    assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getKeywordFromFilterStringInputNotNullPositiveOutputNull() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String filterString = "";
    final long monitorId = 7L;

    // Act
    final String retval = objectUnderTest.getKeywordFromFilterString(filterString, monitorId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, JSONUtility.class})
  @Test
  public void getKeywordFromFilterStringInputNotNullPositiveOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final ServicesAPIUtil objectUnderTest =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(true).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String filterString = "!";
    final long monitorId = 700L;
    final MonitorWizardFilters monitorWizardFilters =
        (MonitorWizardFilters)
            Reflector.getInstance("com.firstrain.frapi.obj.MonitorWizardFilters");
    final MonitorWizardFilters.Advanced advanced =
        (MonitorWizardFilters.Advanced)
            Reflector.getInstance("com.firstrain.frapi.obj.MonitorWizardFilters$Advanced");
    final ArrayList<String> arrayList = new ArrayList<String>();
    advanced.advancedFilters = arrayList;
    advanced.keywords = null;
    monitorWizardFilters.advanced = advanced;
    monitorWizardFilters.ct = null;
    monitorWizardFilters.rg = null;
    monitorWizardFilters.bb = null;
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(monitorWizardFilters)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    final String retval = objectUnderTest.getKeywordFromFilterString(filterString, monitorId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, JSONUtility.class})
  @Test
  public void getKeywordFromFilterStringInputNotNullPositiveOutputNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final ServicesAPIUtil objectUnderTest =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method isDebugEnabledMethod = DTUMemberMatcher.method(Logger.class, "isDebugEnabled");
    PowerMockito.doReturn(false).when(logger, isDebugEnabledMethod).withNoArguments();
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String filterString = "!";
    final long monitorId = 700L;
    final MonitorWizardFilters monitorWizardFilters =
        (MonitorWizardFilters)
            Reflector.getInstance("com.firstrain.frapi.obj.MonitorWizardFilters");
    final MonitorWizardFilters.Advanced advanced =
        (MonitorWizardFilters.Advanced)
            Reflector.getInstance("com.firstrain.frapi.obj.MonitorWizardFilters$Advanced");
    final ArrayList<String> arrayList = new ArrayList<String>();
    advanced.advancedFilters = arrayList;
    advanced.keywords = null;
    monitorWizardFilters.advanced = advanced;
    monitorWizardFilters.ct = null;
    monitorWizardFilters.rg = null;
    monitorWizardFilters.bb = null;
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(monitorWizardFilters)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    final String retval = objectUnderTest.getKeywordFromFilterString(filterString, monitorId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, JSONUtility.class})
  @Test
  public void getKeywordFromFilterStringInputNotNullZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final ServicesAPIUtil objectUnderTest =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String filterString = "????????????????????????????????????";
    final long monitorId = 0L;
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", String.class, Class.class);
    PowerMockito.doReturn(0)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)), or(isA(Class.class), isNull(Class.class)));

    // Act
    final String retval = objectUnderTest.getKeywordFromFilterString(filterString, monitorId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getKeywordFromFilterStringInputNullPositiveOutputNull() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String filterString = null;
    final long monitorId = 2L;

    // Act
    final String retval = objectUnderTest.getKeywordFromFilterString(filterString, monitorId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getKeywordsAndFiltersInput0Output2() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ArrayList<String> filtersToAddList = new ArrayList<String>();

    // Act
    final List retval = objectUnderTest.getKeywordsAndFilters(filtersToAddList);

    // Assert
    final ArrayList arrayList = new ArrayList();
    final ArrayList<String> arrayList1 = new ArrayList<String>();
    arrayList.add(arrayList1);
    final ArrayList<String> arrayList2 = new ArrayList<String>();
    arrayList.add(arrayList2);
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getNDaysCountForEntitiesInput1PositiveOutput0() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(null)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final ArrayList<Long> inputCategories = new ArrayList<Long>();
    inputCategories.add(null);
    final int days = 8199;

    // Act
    final Map<Long, Integer> retval =
        objectUnderTest.getNDaysCountForEntities(inputCategories, days);

    // Assert
    final HashMap<Long, Integer> hashMap = new HashMap<Long, Integer>();
    assertEquals(hashMap, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getNDaysCountForEntitiesInput1PositiveOutput1() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getDocVolumeWeekMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getDocVolumeWeek");
    PowerMockito.doReturn(0).when(iEntityInfo, getDocVolumeWeekMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final ArrayList<Long> inputCategories = new ArrayList<Long>();
    inputCategories.add(null);
    final int days = 7;

    // Act
    final Map<Long, Integer> retval =
        objectUnderTest.getNDaysCountForEntities(inputCategories, days);

    // Assert
    final HashMap<Long, Integer> hashMap = new HashMap<Long, Integer>();
    hashMap.put(null, 0);
    assertEquals(hashMap, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getNDaysCountForEntitiesInput1PositiveOutput12() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getDocCountMethod = DTUMemberMatcher.method(IEntityInfo.class, "getDocCount");
    PowerMockito.doReturn(0).when(iEntityInfo, getDocCountMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final ArrayList<Long> inputCategories = new ArrayList<Long>();
    inputCategories.add(null);
    final int days = 6;

    // Act
    final Map<Long, Integer> retval =
        objectUnderTest.getNDaysCountForEntities(inputCategories, days);

    // Assert
    final HashMap<Long, Integer> hashMap = new HashMap<Long, Integer>();
    hashMap.put(null, 0);
    assertEquals(hashMap, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EntityBaseServiceRepository.class)
  @Test
  public void getNDaysCountForEntitiesInputNullZeroOutputNull() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache()).thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final List<Long> inputCategories = null;
    final int days = 0;

    // Act
    final Map<Long, Integer> retval =
        objectUnderTest.getNDaysCountForEntities(inputCategories, days);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getQTokenInputNullNotNullOutputNullPointerException() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String query = null;
    final String keyword = "\u0006\u0006";

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getQToken(query, keyword);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getSearchTokenOfCatIdInputNotNullOutputNull() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getSearchTokenMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSearchToken");
    PowerMockito.doReturn(null).when(iEntityInfo, getSearchTokenMethod).withNoArguments();
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String catId = "";

    // Act
    final String retval = objectUnderTest.getSearchTokenOfCatId(catId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getSearchTokenOfCatIdInputNotNullOutputNull2() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final Method catIdToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "catIdToEntity", String.class);
    PowerMockito.doReturn(null)
        .when(iEntityInfoCache, catIdToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String catId = "";

    // Act
    final String retval = objectUnderTest.getSearchTokenOfCatId(catId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EntityBaseServiceRepository.class)
  @Test
  public void getSearchTokenOfCatIdInputNullOutputNull() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache()).thenReturn(null);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String catId = null;

    // Act
    final String retval = objectUnderTest.getSearchTokenOfCatId(catId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getSectorCatIdFromEntitySearchTokenInputNullOutputNegative() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(null)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String searchToken = null;

    // Act
    final int retval = objectUnderTest.getSectorCatIdFromEntitySearchToken(searchToken);

    // Assert
    assertEquals(-1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({IEntityInfo.class, IEntityInfoCache.class, EntityBaseServiceRepository.class})
  @Test
  public void getSectorCatIdFromEntitySearchTokenInputNullOutputZero() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        PowerMockito.mock(EntityBaseServiceRepository.class);
    final IEntityInfoCache iEntityInfoCache = PowerMockito.mock(IEntityInfoCache.class);
    final IEntityInfo iEntityInfo = PowerMockito.mock(IEntityInfo.class);
    final Method getSectorCatIdMethod =
        DTUMemberMatcher.method(IEntityInfo.class, "getSectorCatId");
    PowerMockito.doReturn(0).when(iEntityInfo, getSectorCatIdMethod).withNoArguments();
    final Method searchTokenToEntityMethod =
        DTUMemberMatcher.method(IEntityInfoCache.class, "searchTokenToEntity", String.class);
    PowerMockito.doReturn(iEntityInfo)
        .when(iEntityInfoCache, searchTokenToEntityMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    PowerMockito.when(entityBaseServiceRepository.getEntityInfoCache())
        .thenReturn(iEntityInfoCache);
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String searchToken = null;

    // Act
    final int retval = objectUnderTest.getSectorCatIdFromEntitySearchToken(searchToken);

    // Assert
    assertEquals(0, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void prepareQForAddOrRemoveFilterInputNotNullNotNullNotNullOutputNotNull()
      throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String query = "!";
    final MonitorWizardFilters oldData = new MonitorWizardFilters();
    final MonitorWizardFilters.Advanced advanced = new MonitorWizardFilters.Advanced();
    advanced.advancedFilters = null;
    advanced.keywords = "";
    oldData.advanced = advanced;
    oldData.ct = null;
    oldData.rg = null;
    oldData.bb = null;
    final MonitorWizardFilters finalData = new MonitorWizardFilters();
    final MonitorWizardFilters.Advanced monitorWizardFilters$Advanced =
        new MonitorWizardFilters.Advanced();
    finalData.advanced = monitorWizardFilters$Advanced;
    finalData.ct = null;
    finalData.rg = null;
    finalData.bb = null;

    // Act
    final String retval = objectUnderTest.prepareQForAddOrRemoveFilter(query, oldData, finalData);

    // Assert
    assertEquals("!", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void prepareQForAddOrRemoveFilterInputNotNullNotNullNotNullOutputNotNull2()
      throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String query = "   $1111%";
    final MonitorWizardFilters oldData = new MonitorWizardFilters();
    final MonitorWizardFilters.Advanced advanced = new MonitorWizardFilters.Advanced();
    advanced.advancedFilters = null;
    advanced.keywords = "&fffg&&&&";
    oldData.advanced = advanced;
    oldData.ct = null;
    oldData.rg = null;
    oldData.bb = null;
    final MonitorWizardFilters finalData = new MonitorWizardFilters();
    final MonitorWizardFilters.Advanced advanced1 = new MonitorWizardFilters.Advanced();
    advanced1.advancedFilters = null;
    advanced1.keywords = "        0";
    finalData.advanced = advanced1;
    finalData.ct = null;
    finalData.rg = null;
    finalData.bb = null;

    // Act
    final String retval = objectUnderTest.prepareQForAddOrRemoveFilter(query, oldData, finalData);

    // Assert
    assertEquals("   $1111% 0", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void prepareQForAddOrRemoveFilterInputNotNullNotNullNotNullOutputNotNull3()
      throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String query = "       !gggg !!!  ";
    final MonitorWizardFilters oldData = new MonitorWizardFilters();
    final MonitorWizardFilters.Advanced advanced = new MonitorWizardFilters.Advanced();
    advanced.advancedFilters = null;
    advanced.keywords = "!!! ";
    oldData.advanced = advanced;
    oldData.ct = null;
    oldData.rg = null;
    oldData.bb = null;
    final MonitorWizardFilters finalData = new MonitorWizardFilters();
    final MonitorWizardFilters.Advanced monitorWizardFilters$Advanced =
        new MonitorWizardFilters.Advanced();
    finalData.advanced = monitorWizardFilters$Advanced;
    finalData.ct = null;
    finalData.rg = null;
    finalData.bb = null;

    // Act
    final String retval = objectUnderTest.prepareQForAddOrRemoveFilter(query, oldData, finalData);

    // Assert
    assertEquals("!gggg", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void prepareQForAddOrRemoveFilterInputNotNullNotNullNotNullOutputNotNull4()
      throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String query = "`aaaaaaaaaaaaaa";
    final MonitorWizardFilters oldData = new MonitorWizardFilters();
    final MonitorWizardFilters.Advanced monitorWizardFilters$Advanced =
        new MonitorWizardFilters.Advanced();
    oldData.advanced = monitorWizardFilters$Advanced;
    oldData.ct = null;
    oldData.rg = null;
    oldData.bb = null;
    final MonitorWizardFilters finalData = new MonitorWizardFilters();
    final MonitorWizardFilters.Advanced advanced = new MonitorWizardFilters.Advanced();
    advanced.advancedFilters = null;
    advanced.keywords = "%!!!!!!!!!!!";
    finalData.advanced = advanced;
    finalData.ct = null;
    finalData.rg = null;
    finalData.bb = null;

    // Act
    final String retval = objectUnderTest.prepareQForAddOrRemoveFilter(query, oldData, finalData);

    // Assert
    assertEquals("`aaaaaaaaaaaaaa %!!!!!!!!!!!", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void removeFilterFromKeywordsInputNotNull0OutputFalse() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String filter = "}}}|||||||";
    final ArrayList<String> keywords = new ArrayList<String>();

    // Act
    final boolean retval = objectUnderTest.removeFilterFromKeywords(filter, keywords);

    // Assert
    assertEquals(false, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void removeFilterFromKeywordsInputNotNull1OutputTrue() {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final String filter = "cc#d++";
    final ArrayList<String> keywords = new ArrayList<String>();
    keywords.add("cc#d++");

    // Act
    final boolean retval = objectUnderTest.removeFilterFromKeywords(filter, keywords);

    // Assert
    assertEquals(true, retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void removeKeywordsFromQInputNotNullNotNullOutputNotNull() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String q = "<===";
    final String keywords = "==";

    // Act
    final String retval = objectUnderTest.removeKeywordsFromQ(q, keywords);

    // Assert
    assertEquals("<", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void removeKeywordsFromQInputNotNullNotNullOutputNotNull2() throws Exception {

    // Arrange
    final ServicesAPIUtil objectUnderTest = new ServicesAPIUtil();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final String q = "";
    final String keywords = "%$\'\'\'";

    // Act
    final String retval = objectUnderTest.removeKeywordsFromQ(q, keywords);

    // Assert
    assertEquals("", retval);
  }
}
