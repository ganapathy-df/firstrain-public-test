/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 18:43:15 GMT 2018
 */

package com.firstrain.web.service.core;

import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import com.firstrain.frapi.pojo.wrapper.DocumentSet;
import com.firstrain.frapi.pojo.wrapper.GetBulk;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.web.pojo.EntityLink;
import java.util.List;
import java.util.Map;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class StorageServiceESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		StorageService storageService0 = new StorageService();
		HttpClientService httpClientService0 = new HttpClientService();
		HttpClient httpClient0 = new HttpClient();
		Injector.inject(httpClientService0, com.firstrain.web.service.core.HttpClientService.class, "httpClient",
				httpClient0);
		Injector.validateBean(httpClientService0,
				com.firstrain.web.service.core.HttpClientService.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "httpClientService",
				httpClientService0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "servicesAPIUtil",
				servicesAPIUtil0);
		Injector.validateBean(storageService0, com.firstrain.web.service.core.StorageService.class);
		storageService0.populateFieldInDocSet(null, null);
	}

	@Test(timeout = 4000)
	public void test1() throws Exception {
		StorageService storageService0 = new StorageService();
		HttpClientService httpClientService0 = new HttpClientService();
		MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager0 = new MultiThreadedHttpConnectionManager();
		HttpClient httpClient0 = new HttpClient(multiThreadedHttpConnectionManager0);
		Injector.inject(httpClientService0, com.firstrain.web.service.core.HttpClientService.class, "httpClient",
				httpClient0);
		Injector.validateBean(httpClientService0,
				com.firstrain.web.service.core.HttpClientService.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "httpClientService",
				httpClientService0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "servicesAPIUtil",
				servicesAPIUtil0);
		Injector.validateBean(storageService0, com.firstrain.web.service.core.StorageService.class);
		DocumentSet documentSet0 = new DocumentSet();
		storageService0.populateFieldInDocSet(null, documentSet0);
		assertNull(documentSet0.getCaption());
	}

	@Test(timeout = 4000)
	public void test2() throws Exception {
		StorageService storageService0 = new StorageService();
		HttpClientService httpClientService0 = new HttpClientService();
		HttpClient httpClient0 = new HttpClient();
		Injector.inject(httpClientService0, com.firstrain.web.service.core.HttpClientService.class, "httpClient",
				httpClient0);
		Injector.validateBean(httpClientService0,
				com.firstrain.web.service.core.HttpClientService.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "httpClientService",
				httpClientService0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "servicesAPIUtil",
				servicesAPIUtil0);
		Injector.validateBean(storageService0, com.firstrain.web.service.core.StorageService.class);
		Map<String, List<EntityLink>> map0 = storageService0
				.populateEntityLinkMap(null);
		assertNull(map0);
	}

	@Test(timeout = 4000)
	public void test3() throws Exception {
		String[] stringArray0 = new String[7];
		StorageService.main(stringArray0);
		assertEquals(7, stringArray0.length);
	}

	@Test(timeout = 4000)
	public void test4() throws Exception {
		StorageService storageService0 = new StorageService();
		HttpClientService httpClientService0 = new HttpClientService();
		HttpClient httpClient0 = new HttpClient();
		Injector.inject(httpClientService0, com.firstrain.web.service.core.HttpClientService.class, "httpClient",
				httpClient0);
		Injector.validateBean(httpClientService0,
				com.firstrain.web.service.core.HttpClientService.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "httpClientService",
				httpClientService0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "servicesAPIUtil",
				servicesAPIUtil0);
		Injector.validateBean(storageService0, com.firstrain.web.service.core.StorageService.class);
		List<String> list0 = storageService0.getListOfIdsfromDocumentSet(null);
		assertNull(list0);
	}

	@Test(timeout = 4000)
	public void test5() throws Exception {
		StorageService storageService0 = new StorageService();
		HttpClientService httpClientService0 = new HttpClientService();
		MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager0 = new MultiThreadedHttpConnectionManager();
		HttpClient httpClient0 = new HttpClient(multiThreadedHttpConnectionManager0);
		Injector.inject(httpClientService0, com.firstrain.web.service.core.HttpClientService.class, "httpClient",
				httpClient0);
		Injector.validateBean(httpClientService0,
				com.firstrain.web.service.core.HttpClientService.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "httpClientService",
				httpClientService0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "servicesAPIUtil",
				servicesAPIUtil0);
		Injector.validateBean(storageService0, com.firstrain.web.service.core.StorageService.class);
		DocumentSet documentSet0 = new DocumentSet();
		List<String> list0 = storageService0.getListOfIdsfromDocumentSet(documentSet0);
		assertNull(list0);
	}

	@Test(timeout = 4000)
	public void test6() throws Exception {
		StorageService storageService0 = new StorageService();
		HttpClientService httpClientService0 = new HttpClientService();
		HttpClient httpClient0 = new HttpClient();
		Injector.inject(httpClientService0, com.firstrain.web.service.core.HttpClientService.class, "httpClient",
				httpClient0);
		Injector.validateBean(httpClientService0,
				com.firstrain.web.service.core.HttpClientService.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "httpClientService",
				httpClientService0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						entityBaseServiceRepository0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(storageService0, com.firstrain.web.service.core.StorageService.class, "servicesAPIUtil",
				servicesAPIUtil0);
		Injector.validateBean(storageService0, com.firstrain.web.service.core.StorageService.class);
		Map<String, GetBulk> map0 = storageService0
				.getDocFieldsFromStorageService(null, true, true);
		assertNull(map0);
	}
}
