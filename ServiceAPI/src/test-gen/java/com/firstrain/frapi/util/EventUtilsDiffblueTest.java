package com.firstrain.frapi.util;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.util.DefaultEnums.TitleType;
import com.firstrain.utils.TitleUtils;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class EventUtilsDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: EventUtils */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TitleUtils.class)
  @Test
  public void getSecTitleInputNullNotNullPositiveNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TitleUtils.class);

    // Arrange
    final String companyName = null;
    final String title = "10-K/A8888888888888-K/A111111111111110-Q/A99";
    final int eventType = 450;
    final TitleType type = null;
    final Method getSecTitleWithoutHtmlMethod =
        DTUMemberMatcher.method(
            TitleUtils.class, "getSecTitleWithoutHtml", String.class, String.class, String.class);
    PowerMockito.doReturn(null)
        .when(TitleUtils.class, getSecTitleWithoutHtmlMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = EventUtils.getSecTitle(companyName, title, eventType, type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TitleUtils.class)
  @Test
  public void getSecTitleInputNullNotNullPositiveNullOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TitleUtils.class);

    // Arrange
    final String companyName = null;
    final String title = "10-K/A110-K/A888888-K/A88-K/A10-Q/A110-Q/A00";
    final int eventType = 450;
    final TitleType type = null;
    final Method getSecTitleWithoutHtmlMethod =
        DTUMemberMatcher.method(
            TitleUtils.class, "getSecTitleWithoutHtml", String.class, String.class, String.class);
    PowerMockito.doReturn(null)
        .when(TitleUtils.class, getSecTitleWithoutHtmlMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = EventUtils.getSecTitle(companyName, title, eventType, type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TitleUtils.class)
  @Test
  public void getSecTitleInputNullNotNullPositiveNullOutputNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TitleUtils.class);

    // Arrange
    final String companyName = null;
    final String title = "10-K/A110-K/A8-K/A8-K/A88-K/A10-Q/A110-Q/A1110-K/A";
    final int eventType = 460;
    final TitleType type = null;
    final Method getSecTitleWithoutHtmlMethod =
        DTUMemberMatcher.method(
            TitleUtils.class, "getSecTitleWithoutHtml", String.class, String.class, String.class);
    PowerMockito.doReturn(null)
        .when(TitleUtils.class, getSecTitleWithoutHtmlMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = EventUtils.getSecTitle(companyName, title, eventType, type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TitleUtils.class)
  @Test
  public void getSecTitleInputNullNotNullPositiveNullOutputNull4() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TitleUtils.class);

    // Arrange
    final String companyName = null;
    final String title = "-K/A111110-K/A1111110-K/A11111110-K/A111110-Q/A";
    final int eventType = 500;
    final TitleType type = null;
    final Method getSecDelayedTitleWithoutHtmlMethod =
        DTUMemberMatcher.method(
            TitleUtils.class,
            "getSecDelayedTitleWithoutHtml",
            String.class,
            String.class,
            String.class);
    PowerMockito.doReturn(null)
        .when(TitleUtils.class, getSecDelayedTitleWithoutHtmlMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = EventUtils.getSecTitle(companyName, title, eventType, type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TitleUtils.class)
  @Test
  public void getSecTitleInputNullNotNullPositiveNullOutputNull5() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TitleUtils.class);

    // Arrange
    final String companyName = null;
    final String title = "10-Q/A1110-K/A110-K/A111110-Q/A10-K/A111110-Q/AAA";
    final int eventType = 500;
    final TitleType type = null;
    final Method getSecDelayedTitleWithHtmlMethod =
        DTUMemberMatcher.method(
            TitleUtils.class,
            "getSecDelayedTitleWithHtml",
            String.class,
            String.class,
            String.class);
    PowerMockito.doReturn(null)
        .when(TitleUtils.class, getSecDelayedTitleWithHtmlMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = EventUtils.getSecTitle(companyName, title, eventType, type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TitleUtils.class)
  @Test
  public void getSecTitleInputNullNotNullPositiveNullOutputNull6() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TitleUtils.class);

    // Arrange
    final String companyName = null;
    final String title = "--Q810-K/A11111110-K/A110-K/A1111110-K/A110-K/AA";
    final int eventType = 460;
    final TitleType type = null;
    final Method getSecTitleMethod =
        DTUMemberMatcher.method(
            TitleUtils.class,
            "getSecTitle",
            String.class,
            String.class,
            String.class,
            boolean.class);
    PowerMockito.doReturn(null)
        .when(TitleUtils.class, getSecTitleMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            anyBoolean());

    // Act
    final String retval = EventUtils.getSecTitle(companyName, title, eventType, type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TitleUtils.class)
  @Test
  public void getSecTitleInputNullNotNullPositiveNullOutputNull7() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TitleUtils.class);

    // Arrange
    final String companyName = null;
    final String title = "1510-K/A10-K/A1110-K/A110-K/A110-Q/A1111110-Q/A";
    final int eventType = 450;
    final TitleType type = null;
    final Method getSecTitleWithHtmlMethod =
        DTUMemberMatcher.method(
            TitleUtils.class, "getSecTitleWithHtml", String.class, String.class, String.class);
    PowerMockito.doReturn(null)
        .when(TitleUtils.class, getSecTitleWithHtmlMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = EventUtils.getSecTitle(companyName, title, eventType, type);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TitleUtils.class)
  @Test
  public void getSecTitleInputNullNotNullPositiveNullOutputNull8() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TitleUtils.class);

    // Arrange
    final String companyName = null;
    final String title = "--Q810-K/A11111110-K/A110-K/A1111110-K/A110-K/AA";
    final int eventType = 450;
    final TitleType type = null;
    final Method getSecTitleMethod =
        DTUMemberMatcher.method(
            TitleUtils.class,
            "getSecTitle",
            String.class,
            String.class,
            String.class,
            boolean.class);
    PowerMockito.doReturn(null)
        .when(TitleUtils.class, getSecTitleMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)),
            anyBoolean());

    // Act
    final String retval = EventUtils.getSecTitle(companyName, title, eventType, type);

    // Assert
    assertNull(retval);
  }
}
