package com.firstrain.web.service.staticdata;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.utils.JSONUtility;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class StaticDataServiceDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: StaticDataService */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({FileInputStream.class, JSONUtility.class, File.class, StaticDataService.class})
  @Test
  public void getDataObjectInputNotNullNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(JSONUtility.class);

    // Arrange
    final StaticDataService objectUnderTest = new StaticDataService();
    Reflector.setField(objectUnderTest, "filepath", "");
    final String fileName = "";
    final Class clazz = null;
    final FileInputStream fileInputStream = PowerMockito.mock(FileInputStream.class);
    Reflector.setField(fileInputStream, "closed", false);
    Reflector.setField(fileInputStream, "path", "");
    PowerMockito.whenNew(FileInputStream.class)
        .withParameterTypes(File.class)
        .withArguments(or(isA(File.class), isNull(File.class)))
        .thenReturn(fileInputStream);
    final File file = PowerMockito.mock(File.class);
    Reflector.setField(file, "prefixLength", 0);
    Reflector.setField(file, "path", "");
    PowerMockito.whenNew(File.class)
        .withParameterTypes(String.class)
        .withArguments(or(isA(String.class), isNull(String.class)))
        .thenReturn(file);
    final Method deserializeMethod =
        DTUMemberMatcher.method(JSONUtility.class, "deserialize", InputStream.class, Class.class);
    PowerMockito.doReturn(null)
        .when(JSONUtility.class, deserializeMethod)
        .withArguments(
            or(isA(InputStream.class), isNull(InputStream.class)),
            or(isA(Class.class), isNull(Class.class)));

    // Act
    final Object retval = objectUnderTest.getDataObject(fileName, clazz);

    // Assert
    assertNull(retval);
  }
}
