package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.utils.FR_Loader;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class ExcelProcessingHelperRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: ExcelProcessingHelperRepositoryImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getCompanyEndingWordsOutputNull() {

    // Arrange
    final ExcelProcessingHelperRepositoryImpl objectUnderTest =
        new ExcelProcessingHelperRepositoryImpl();
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "companyEndingsLastModifiedTime", null);
    objectUnderTest.setCompanyEndingWordsRegex(null);
    Reflector.setField(objectUnderTest, "platinumSourceVsRank", null);
    Reflector.setField(objectUnderTest, "platinumSourcesLastModifiedTime", null);
    Reflector.setField(objectUnderTest, "EXCEL_FOLDER_PATH", null);
    objectUnderTest.setCompanyEndingWords(null);
    Reflector.setField(objectUnderTest, "COMPANY_ENDING", null);

    // Act
    final Set<String> retval = objectUnderTest.getCompanyEndingWords();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getCompanyEndingWordsRegexOutputNull() {

    // Arrange
    final ExcelProcessingHelperRepositoryImpl objectUnderTest =
        new ExcelProcessingHelperRepositoryImpl();
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "companyEndingsLastModifiedTime", null);
    objectUnderTest.setCompanyEndingWordsRegex(null);
    Reflector.setField(objectUnderTest, "platinumSourceVsRank", null);
    Reflector.setField(objectUnderTest, "platinumSourcesLastModifiedTime", null);
    Reflector.setField(objectUnderTest, "EXCEL_FOLDER_PATH", null);
    objectUnderTest.setCompanyEndingWords(null);
    Reflector.setField(objectUnderTest, "COMPANY_ENDING", null);

    // Act
    final Set<String> retval = objectUnderTest.getCompanyEndingWordsRegex();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, FR_Loader.class})
  @Test
  public void getFileFromPathInputNotNullNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FR_Loader.class);

    // Arrange
    final ExcelProcessingHelperRepositoryImpl objectUnderTest =
        (ExcelProcessingHelperRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.ExcelProcessingHelperRepositoryImpl");
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "companyEndingsLastModifiedTime", null);
    objectUnderTest.setCompanyEndingWordsRegex(null);
    Reflector.setField(objectUnderTest, "platinumSourceVsRank", null);
    final AtomicLong atomicLong =
        (AtomicLong) Reflector.getInstance("java.util.concurrent.atomic.AtomicLong");
    Reflector.setField(objectUnderTest, "platinumSourcesLastModifiedTime", atomicLong);
    Reflector.setField(objectUnderTest, "EXCEL_FOLDER_PATH", null);
    final java.util.HashSet<String> hashSet = new java.util.HashSet<String>();
    objectUnderTest.setCompanyEndingWords(hashSet);
    Reflector.setField(objectUnderTest, "COMPANY_ENDING", null);
    final String fileName = "!";
    final AtomicLong lastModifiedTime = null;
    final Method getResourceMethod =
        DTUMemberMatcher.method(FR_Loader.class, "getResource", String.class);
    PowerMockito.doReturn(null)
        .when(FR_Loader.class, getResourceMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName(
            "com.firstrain.frapi.repository.impl.ExcelProcessingHelperRepositoryImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getFileFromPath",
            Reflector.forName("java.lang.String"),
            Reflector.forName("java.util.concurrent.atomic.AtomicLong"));
    methodUnderTest.setAccessible(true);
    final InputStream retval =
        (InputStream) methodUnderTest.invoke(objectUnderTest, fileName, lastModifiedTime);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getPaltinumSourceVsRankOutputNull() {

    // Arrange
    final ExcelProcessingHelperRepositoryImpl objectUnderTest =
        new ExcelProcessingHelperRepositoryImpl();
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "companyEndingsLastModifiedTime", null);
    objectUnderTest.setCompanyEndingWordsRegex(null);
    Reflector.setField(objectUnderTest, "platinumSourceVsRank", null);
    Reflector.setField(objectUnderTest, "platinumSourcesLastModifiedTime", null);
    Reflector.setField(objectUnderTest, "EXCEL_FOLDER_PATH", null);
    objectUnderTest.setCompanyEndingWords(null);
    Reflector.setField(objectUnderTest, "COMPANY_ENDING", null);

    // Act
    final Map<Integer, Integer> retval = objectUnderTest.getPaltinumSourceVsRank();

    // Assert
    assertNull(retval);
  }
}
