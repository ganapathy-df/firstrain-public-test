/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 18:38:33 GMT 2018
 */

package com.firstrain.web.interceptor;

import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;

import com.firstrain.frapi.pojo.AuthAPIResponse;
import com.firstrain.frapi.service.AuthService;
import com.firstrain.frapi.service.UserService;
import com.firstrain.web.service.core.AuthKeyCacheManager;
import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import javax.swing.plaf.synth.SynthPopupMenuUI;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.mock.web.MockServletContext;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

public class AuthInterceptorESTest {

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test1() throws Exception {
		AuthInterceptor authInterceptor0 = new AuthInterceptor();
		AuthKeyCacheManager authKeyCacheManager0 = new AuthKeyCacheManager();
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(authKeyCacheManager0, com.firstrain.web.service.core.AuthKeyCacheManager.class, "taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(authKeyCacheManager0,
				com.firstrain.web.service.core.AuthKeyCacheManager.class);
		Injector.inject(authInterceptor0, com.firstrain.web.interceptor.AuthInterceptor.class, "authKeyCacheManager",
				authKeyCacheManager0);
		AuthService authService0 = mock(AuthService.class, new ViolatedAssumptionAnswer());
		Injector.inject(authInterceptor0, com.firstrain.web.interceptor.AuthInterceptor.class, "authService",
				authService0);
		UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
		Injector.inject(authInterceptor0, com.firstrain.web.interceptor.AuthInterceptor.class, "userService",
				userService0);
		Injector.validateBean(authInterceptor0, com.firstrain.web.interceptor.AuthInterceptor.class);
		MockServletContext mockServletContext0 = new MockServletContext();
		mockServletContext0.getNamedDispatcher("[3da)I7)vA]*IvF");
		HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class,
				new ViolatedAssumptionAnswer());
		doReturn(null, "u{jkgG,R=S5", null).when(httpServletRequest0)
				.getHeader(anyString());
		doReturn("OPTIONS",
				"org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalTimeConverter")
				.when(httpServletRequest0).getMethod();
		doReturn(
				"org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalTimeConverter",
				"org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalTimeConverter",
				"org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalTimeConverter")
				.when(httpServletRequest0).getRequestURI();
		HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(
				httpServletRequest0);
		HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class,
				new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(
				httpServletResponse0);
		httpServletResponseWrapper0.sendError(0);
		authInterceptor0.preHandle(httpServletRequestWrapper0, httpServletResponseWrapper0,
				"org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalTimeConverter");
		authInterceptor0.preHandle(httpServletRequestWrapper0, httpServletResponseWrapper0,
				threadPoolTaskExecutor0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test2() throws Exception {
		AuthInterceptor authInterceptor0 = new AuthInterceptor();
		AuthKeyCacheManager authKeyCacheManager0 = new AuthKeyCacheManager();
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(authKeyCacheManager0, com.firstrain.web.service.core.AuthKeyCacheManager.class, "taskExecutor",
				threadPoolTaskExecutor0);
		Injector.validateBean(authKeyCacheManager0,
				com.firstrain.web.service.core.AuthKeyCacheManager.class);
		Injector.inject(authInterceptor0, com.firstrain.web.interceptor.AuthInterceptor.class, "authKeyCacheManager",
				authKeyCacheManager0);
		AuthService authService0 = mock(AuthService.class, new ViolatedAssumptionAnswer());
		Injector.inject(authInterceptor0, com.firstrain.web.interceptor.AuthInterceptor.class, "authService",
				authService0);
		UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
		Injector.inject(authInterceptor0, com.firstrain.web.interceptor.AuthInterceptor.class, "userService",
				userService0);
		Injector.validateBean(authInterceptor0, com.firstrain.web.interceptor.AuthInterceptor.class);
		HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class,
				new ViolatedAssumptionAnswer());
		doReturn("Accept").when(httpServletRequest0).getMethod();
		doReturn("`O.Q(", (String) null).when(httpServletRequest0).getRequestURI();
		HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(
				httpServletRequest0);
		HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class,
				new ViolatedAssumptionAnswer());
		HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(
				httpServletResponse0);
		authInterceptor0
				.preHandle(httpServletRequestWrapper0, httpServletResponseWrapper0, authKeyCacheManager0);
	}
}
