package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.common.db.jpa.PersistenceProvider;
import com.firstrain.common.db.jpa.Transaction;
import com.firstrain.db.api.EmailUserSearchDbAPI;
import com.firstrain.db.api.ItemsDbAPI;
import com.firstrain.db.api.SearchMapDbAPI;
import com.firstrain.db.api.TagsDbAPI;
import com.firstrain.db.api.TagsItemsMapDbAPI;
import com.firstrain.db.obj.BaseItem.OwnedByType;
import com.firstrain.db.obj.EmailUserSearch;
import com.firstrain.db.obj.Items;
import com.firstrain.db.obj.SearchMap;
import com.firstrain.db.obj.TagItemsMap;
import com.firstrain.db.obj.Tags;
import com.firstrain.frapi.config.ServiceConfig;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.MonitorUtil;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.solr.client.SolrSearcher;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.SolrServer;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class MonitorServiceRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: MonitorServiceRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(EmailUserSearchDbAPI.class)
  @Test
  public void fetchEmailUserSearchByIdInputNullZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(EmailUserSearchDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final Transaction txn = null;
    final long emailUserSearchId = 0L;
    final Method fetchEmailUserSearchByIdMethod =
        DTUMemberMatcher.method(
            EmailUserSearchDbAPI.class, "fetchEmailUserSearchById", Transaction.class, long.class);
    PowerMockito.doReturn(null)
        .when(EmailUserSearchDbAPI.class, fetchEmailUserSearchByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());

    // Act
    final EmailUserSearch retval = objectUnderTest.fetchEmailUserSearchById(txn, emailUserSearchId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDataInputNotNullNotNullPositiveOutputNotNull() throws Exception {

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final MonitorUtil monitorUtil = new MonitorUtil();
    Reflector.setField(objectUnderTest, "monitorUtil", monitorUtil);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setSecSolrServer(solrServer);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    serviceConfig.setEntitySolrServer(null);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setFaviconSolrServer(solrServer1);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String q = "";
    final String fq = "        ";
    final int scope = 1;

    // Act
    final String retval = objectUnderTest.getData(q, fq, scope);

    // Assert
    assertEquals("q=&fq=&scope=1", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDataInputNotNullNullPositiveOutputNotNull() throws Exception {

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final MonitorUtil monitorUtil = new MonitorUtil();
    Reflector.setField(objectUnderTest, "monitorUtil", monitorUtil);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setSecSolrServer(solrServer);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    serviceConfig.setEntitySolrServer(null);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setFaviconSolrServer(solrServer1);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String q = "";
    final String fq = null;
    final int scope = 1;

    // Act
    final String retval = objectUnderTest.getData(q, fq, scope);

    // Assert
    assertEquals("q=&scope=1", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDataInputNotNullNullZeroOutputNotNull() throws Exception {

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final MonitorUtil monitorUtil = new MonitorUtil();
    Reflector.setField(objectUnderTest, "monitorUtil", monitorUtil);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setSecSolrServer(solrServer);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    serviceConfig.setEntitySolrServer(null);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setFaviconSolrServer(solrServer1);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String q = " ";
    final String fq = null;
    final int scope = 0;

    // Act
    final String retval = objectUnderTest.getData(q, fq, scope);

    // Assert
    assertEquals("q=&scope=2", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDataInputNullNullPositiveOutputNull() throws Exception {

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final MonitorUtil monitorUtil = new MonitorUtil();
    Reflector.setField(objectUnderTest, "monitorUtil", monitorUtil);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig = new ServiceConfig();
    serviceConfig.setSmartSummarySolrServer(null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    serviceConfig.setCompanyModelServer(null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setSecSolrServer(solrServer);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    serviceConfig.setDocSolrServer(null);
    serviceConfig.setPersonDocServer(null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    serviceConfig.setQuoteSolrServer(null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    serviceConfig.setEventSolrServer(null);
    serviceConfig.setDocImageSolrServer(null);
    serviceConfig.setPeopleSolrServer(null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    serviceConfig.setTwitterSolrServer(null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    serviceConfig.setEntitySolrServer(null);
    serviceConfig.setUserSearchesSolrServer(null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", "");
    serviceConfig.setTweetGroupSolrServer(null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    serviceConfig.setFaviconSolrServer(solrServer1);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig, "solrVsPingQ", null);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final String q = null;
    final String fq = null;
    final int scope = 41;

    // Act
    final String retval = objectUnderTest.getData(q, fq, scope);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Logger.class})
  @Test
  public void getItemsByTagIdInputPositiveOutput0() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 6L;
    final ArrayList arrayList1 = new ArrayList();
    final ArrayList arrayList = new ArrayList();
    final Method getItemsByTagIdMethod =
        DTUMemberMatcher.method(
            ItemsDbAPI.class,
            "getItemsByTagId",
            String.class,
            long.class,
            Items.Type.class,
            int.class,
            int.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(arrayList).doReturn(arrayList1))
        .when(ItemsDbAPI.class, getItemsByTagIdMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            anyLong(),
            or(isA(Items.Type.class), isNull(Items.Type.class)),
            anyInt(),
            anyInt());

    // Act
    final List<Items> retval = objectUnderTest.getItemsByTagId(tagId);

    // Assert
    final ArrayList<Items> arrayList2 = new ArrayList<Items>();
    assertEquals(arrayList2, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Logger.class})
  @Test
  public void getItemsByTagIdInputPositiveOutput02() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 6L;
    final ArrayList arrayList = new ArrayList();
    final Method getItemsByTagIdMethod =
        DTUMemberMatcher.method(
            ItemsDbAPI.class,
            "getItemsByTagId",
            String.class,
            long.class,
            Items.Type.class,
            int.class,
            int.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(arrayList))
        .when(ItemsDbAPI.class, getItemsByTagIdMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            anyLong(),
            or(isA(Items.Type.class), isNull(Items.Type.class)),
            anyInt(),
            anyInt());

    // Act
    final List<Items> retval = objectUnderTest.getItemsByTagId(tagId);

    // Assert
    final ArrayList<Items> arrayList1 = new ArrayList<Items>();
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Logger.class})
  @Test
  public void getItemsByTagIdInputPositiveOutput12() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 6L;
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    final Method getItemsByTagIdMethod =
        DTUMemberMatcher.method(
            ItemsDbAPI.class,
            "getItemsByTagId",
            String.class,
            long.class,
            Items.Type.class,
            int.class,
            int.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(arrayList))
        .when(ItemsDbAPI.class, getItemsByTagIdMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            anyLong(),
            or(isA(Items.Type.class), isNull(Items.Type.class)),
            anyInt(),
            anyInt());

    // Act
    final List<Items> retval = objectUnderTest.getItemsByTagId(tagId);

    // Assert
    final ArrayList<Items> arrayList1 = new ArrayList<Items>();
    arrayList1.add(null);
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({ItemsDbAPI.class, Logger.class})
  @Test
  public void getItemsByTagIdInputPositiveOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(ItemsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 6L;
    final ArrayList arrayList = new ArrayList();
    final Method getItemsByTagIdMethod =
        DTUMemberMatcher.method(
            ItemsDbAPI.class,
            "getItemsByTagId",
            String.class,
            long.class,
            Items.Type.class,
            int.class,
            int.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(arrayList).doReturn(null))
        .when(ItemsDbAPI.class, getItemsByTagIdMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            anyLong(),
            or(isA(Items.Type.class), isNull(Items.Type.class)),
            anyInt(),
            anyInt());

    // Act
    final List<Items> retval = objectUnderTest.getItemsByTagId(tagId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({SearchMapDbAPI.class, Logger.class})
  @Test
  public void getSearchMapByUISearchIDAndTagIDInputZeroNegativeOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SearchMapDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final MonitorUtil monitorUtil = new MonitorUtil();
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entitySolrServer", solrServer);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(entityBaseServiceRepositoryImpl, "searcher", solrSearcher);
    Reflector.setField(entityBaseServiceRepositoryImpl, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(entityBaseServiceRepositoryImpl, "LOG", logger);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "docImageServer", solrServer1);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "favIconServer", solrServer2);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entityInfoCache", iEntityInfoCache);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    entityBaseServiceRepositoryImpl.setDocSolrServer(solrServer3);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "peopleServer", solrServer4);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterGroupServer", solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterServer", solrServer6);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "eventServer", solrServer7);
    Reflector.setField(monitorUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl);
    Reflector.setField(monitorUtil, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorUtil", monitorUtil);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "favIconServer", solrServer8);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache1 =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache1);
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocSolrServer(solrServer9);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long uiSearchId = 0L;
    final long tagId = -9L;
    final SearchMap searchMap = (SearchMap) Reflector.getInstance("com.firstrain.db.obj.SearchMap");
    final Method getSearchMapByUISearchIDAndTagIDMethod =
        DTUMemberMatcher.method(
            SearchMapDbAPI.class,
            "getSearchMapByUISearchIDAndTagID",
            String.class,
            long.class,
            long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(searchMap))
        .when(SearchMapDbAPI.class, getSearchMapByUISearchIDAndTagIDMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyLong(), anyLong());

    // Act
    final SearchMap retval = objectUnderTest.getSearchMapByUISearchIDAndTagID(uiSearchId, tagId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(SearchMapDbAPI.class)
  @Test
  public void getSearchMapByUISearchIDAndTagIDInputZeroNegativeOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SearchMapDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final MonitorUtil monitorUtil = new MonitorUtil();
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl =
        new EntityBaseServiceRepositoryImpl();
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entitySolrServer", solrServer);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(entityBaseServiceRepositoryImpl, "searcher", solrSearcher);
    Reflector.setField(entityBaseServiceRepositoryImpl, "serviceConfig", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(entityBaseServiceRepositoryImpl, "LOG", logger);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "docImageServer", solrServer1);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "favIconServer", solrServer2);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entityInfoCache", iEntityInfoCache);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    entityBaseServiceRepositoryImpl.setDocSolrServer(solrServer3);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "peopleServer", solrServer4);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterGroupServer", solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterServer", solrServer6);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "eventServer", solrServer7);
    Reflector.setField(monitorUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl);
    Reflector.setField(monitorUtil, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorUtil", monitorUtil);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "favIconServer", solrServer8);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache1 =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache1);
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocSolrServer(solrServer9);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long uiSearchId = 0L;
    final long tagId = -9L;
    final SearchMap searchMap = (SearchMap) Reflector.getInstance("com.firstrain.db.obj.SearchMap");
    final Method getSearchMapByUISearchIDAndTagIDMethod =
        DTUMemberMatcher.method(
            SearchMapDbAPI.class,
            "getSearchMapByUISearchIDAndTagID",
            String.class,
            long.class,
            long.class);
    PowerMockito.doReturn(searchMap)
        .when(SearchMapDbAPI.class, getSearchMapByUISearchIDAndTagIDMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyLong(), anyLong());

    // Act
    final SearchMap retval = objectUnderTest.getSearchMapByUISearchIDAndTagID(uiSearchId, tagId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({SearchMapDbAPI.class, Logger.class})
  @Test
  public void getSearchMapByUISearchIDAndTagIDInputZeroNegativeOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(SearchMapDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final MonitorUtil monitorUtil = new MonitorUtil();
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entitySolrServer", solrServer);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(entityBaseServiceRepositoryImpl, "searcher", solrSearcher);
    Reflector.setField(entityBaseServiceRepositoryImpl, "serviceConfig", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(entityBaseServiceRepositoryImpl, "LOG", logger);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "docImageServer", solrServer1);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "favIconServer", solrServer2);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entityInfoCache", iEntityInfoCache);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    entityBaseServiceRepositoryImpl.setDocSolrServer(solrServer3);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "peopleServer", solrServer4);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterGroupServer", solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterServer", solrServer6);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl, "eventServer", solrServer7);
    Reflector.setField(monitorUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl);
    Reflector.setField(monitorUtil, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorUtil", monitorUtil);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "favIconServer", solrServer8);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    final IEntityInfoCache iEntityInfoCache1 =
        (IEntityInfoCache) Reflector.getInstance("com.firstrain.obj.IEntityInfoCache");
    Reflector.setField(objectUnderTest, "entityInfoCache", iEntityInfoCache1);
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocSolrServer(solrServer9);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long uiSearchId = 0L;
    final long tagId = -9L;
    final Method getSearchMapByUISearchIDAndTagIDMethod =
        DTUMemberMatcher.method(
            SearchMapDbAPI.class,
            "getSearchMapByUISearchIDAndTagID",
            String.class,
            long.class,
            long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(SearchMapDbAPI.class, getSearchMapByUISearchIDAndTagIDMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyLong(), anyLong());

    // Act
    final SearchMap retval = objectUnderTest.getSearchMapByUISearchIDAndTagID(uiSearchId, tagId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsDbAPI.class, PersistenceProvider.class})
  @Test
  public void getTagByIdInputPositiveOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 9L;
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    final Method getTagByIdMethod =
        DTUMemberMatcher.method(TagsDbAPI.class, "getTagById", Transaction.class, long.class);
    PowerMockito.doReturn(tags)
        .when(TagsDbAPI.class, getTagByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(null)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Tags retval = objectUnderTest.getTagById(tagId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTagByIdInputPositiveOutputNotNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 9L;
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    final Method getTagByIdMethod =
        DTUMemberMatcher.method(TagsDbAPI.class, "getTagById", Transaction.class, long.class);
    PowerMockito.doReturn(tags)
        .when(TagsDbAPI.class, getTagByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    PowerMockito.doReturn(transaction)
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Tags retval = objectUnderTest.getTagById(tagId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, TagsDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTagByIdInputPositiveOutputNotNull3() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 9L;
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    final Method getTagByIdMethod =
        DTUMemberMatcher.method(TagsDbAPI.class, "getTagById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(tags))
        .when(TagsDbAPI.class, getTagByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(transaction))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Tags retval = objectUnderTest.getTagById(tagId);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, TagsDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTagByIdInputPositiveOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 9L;
    final Method getTagByIdMethod =
        DTUMemberMatcher.method(TagsDbAPI.class, "getTagById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(TagsDbAPI.class, getTagByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(transaction))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Tags retval = objectUnderTest.getTagById(tagId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Logger.class, TagsDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTagByIdInputPositiveOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 9L;
    final Method getTagByIdMethod =
        DTUMemberMatcher.method(TagsDbAPI.class, "getTagById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(TagsDbAPI.class, getTagByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Tags retval = objectUnderTest.getTagById(tagId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTagByIdInputZeroOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entitySolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "searcher", null);
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "serviceConfig", serviceConfig);
    Reflector.setField(entityBaseServiceRepositoryImpl, "LOG", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "docImageServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "entityInfoCache", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "docSolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterGroupServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(
        servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final MonitorUtil monitorUtil =
        (MonitorUtil) Reflector.getInstance("com.firstrain.frapi.util.MonitorUtil");
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl1 =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(entityBaseServiceRepositoryImpl1, "entitySolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "searcher", null);
    final ServiceConfig serviceConfig1 =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig1, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig1, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig1, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig1, "companyModelServer", null);
    Reflector.setField(serviceConfig1, "eventSolrServerUrl", null);
    final HashMap<String, String> hashMap1 = new HashMap<String, String>();
    Reflector.setField(serviceConfig1, "props", hashMap1);
    Reflector.setField(serviceConfig1, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig1, "secSolrServer", null);
    Reflector.setField(serviceConfig1, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig1, "docSolrServer", null);
    Reflector.setField(serviceConfig1, "personDocServer", null);
    Reflector.setField(serviceConfig1, "companyModelServerURL", null);
    Reflector.setField(serviceConfig1, "quoteSolrServer", null);
    Reflector.setField(serviceConfig1, "distributedSearchFile", null);
    Reflector.setField(serviceConfig1, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig1, "eventSolrServer", null);
    Reflector.setField(serviceConfig1, "docImageSolrServer", null);
    Reflector.setField(serviceConfig1, "peopleSolrServer", null);
    Reflector.setField(serviceConfig1, "personDocServerURL", null);
    Reflector.setField(serviceConfig1, "twitterSolrServer", null);
    Reflector.setField(serviceConfig1, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "entitySolrServer", null);
    Reflector.setField(serviceConfig1, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig1, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig1, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig1, "faviconSolrServer", null);
    Reflector.setField(serviceConfig1, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "solrVsPingQ", null);
    Reflector.setField(serviceConfig1, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "tweetGroupSolrServerURL", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "serviceConfig", serviceConfig1);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "LOG", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl1, "docImageServer", solrServer);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "favIconServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "entityInfoCache", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "docSolrServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl1, "peopleServer", solrServer1);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "twitterGroupServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "twitterServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "eventServer", null);
    Reflector.setField(
        monitorUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl1);
    Reflector.setField(monitorUtil, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorUtil", monitorUtil);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig2 =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "smartSummarySolrServer", solrServer2);
    Reflector.setField(serviceConfig2, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig2, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig2, "companyModelServer", null);
    Reflector.setField(serviceConfig2, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "props", null);
    Reflector.setField(serviceConfig2, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig2, "secSolrServer", null);
    Reflector.setField(serviceConfig2, "quoteSolrServerURL", "");
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "docSolrServer", solrServer3);
    Reflector.setField(serviceConfig2, "personDocServer", null);
    Reflector.setField(serviceConfig2, "companyModelServerURL", null);
    Reflector.setField(serviceConfig2, "quoteSolrServer", null);
    Reflector.setField(serviceConfig2, "distributedSearchFile", null);
    Reflector.setField(serviceConfig2, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig2, "eventSolrServer", null);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "docImageSolrServer", solrServer4);
    Reflector.setField(serviceConfig2, "peopleSolrServer", null);
    Reflector.setField(serviceConfig2, "personDocServerURL", null);
    Reflector.setField(serviceConfig2, "twitterSolrServer", null);
    Reflector.setField(serviceConfig2, "userSearchesSolrServerUrl", "");
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "entitySolrServer", solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "userSearchesSolrServer", solrServer6);
    Reflector.setField(serviceConfig2, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig2, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig2, "faviconSolrServer", null);
    Reflector.setField(serviceConfig2, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "solrVsPingQ", null);
    Reflector.setField(serviceConfig2, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig2);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 0L;
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    final Method getTagByIdMethod =
        DTUMemberMatcher.method(TagsDbAPI.class, "getTagById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(tags))
        .when(TagsDbAPI.class, getTagByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(null))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getTagById(tagId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsDbAPI.class, Transaction.class, PersistenceProvider.class})
  @Test
  public void getTagByIdInputZeroOutputNullPointerException2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PersistenceProvider.class);
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entitySolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "searcher", null);
    final ServiceConfig serviceConfig =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig, "companyModelServer", null);
    Reflector.setField(serviceConfig, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig, "props", null);
    Reflector.setField(serviceConfig, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig, "secSolrServer", null);
    Reflector.setField(serviceConfig, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig, "docSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServer", null);
    Reflector.setField(serviceConfig, "companyModelServerURL", null);
    Reflector.setField(serviceConfig, "quoteSolrServer", null);
    Reflector.setField(serviceConfig, "distributedSearchFile", null);
    Reflector.setField(serviceConfig, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig, "eventSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServer", null);
    Reflector.setField(serviceConfig, "peopleSolrServer", null);
    Reflector.setField(serviceConfig, "personDocServerURL", null);
    Reflector.setField(serviceConfig, "twitterSolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig, "entitySolrServer", null);
    Reflector.setField(serviceConfig, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig, "faviconSolrServer", null);
    Reflector.setField(serviceConfig, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(serviceConfig, "solrVsPingQ", hashMap);
    Reflector.setField(serviceConfig, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig, "tweetGroupSolrServerURL", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "serviceConfig", serviceConfig);
    Reflector.setField(entityBaseServiceRepositoryImpl, "LOG", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "docImageServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "entityInfoCache", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "docSolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterGroupServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(
        servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    final MonitorUtil monitorUtil =
        (MonitorUtil) Reflector.getInstance("com.firstrain.frapi.util.MonitorUtil");
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl1 =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(entityBaseServiceRepositoryImpl1, "entitySolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "searcher", null);
    final ServiceConfig serviceConfig1 =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    Reflector.setField(serviceConfig1, "smartSummarySolrServer", null);
    Reflector.setField(serviceConfig1, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig1, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig1, "companyModelServer", null);
    Reflector.setField(serviceConfig1, "eventSolrServerUrl", null);
    final HashMap<String, String> hashMap1 = new HashMap<String, String>();
    Reflector.setField(serviceConfig1, "props", hashMap1);
    Reflector.setField(serviceConfig1, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig1, "secSolrServer", null);
    Reflector.setField(serviceConfig1, "quoteSolrServerURL", null);
    Reflector.setField(serviceConfig1, "docSolrServer", null);
    Reflector.setField(serviceConfig1, "personDocServer", null);
    Reflector.setField(serviceConfig1, "companyModelServerURL", null);
    Reflector.setField(serviceConfig1, "quoteSolrServer", null);
    Reflector.setField(serviceConfig1, "distributedSearchFile", null);
    Reflector.setField(serviceConfig1, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig1, "eventSolrServer", null);
    Reflector.setField(serviceConfig1, "docImageSolrServer", null);
    Reflector.setField(serviceConfig1, "peopleSolrServer", null);
    Reflector.setField(serviceConfig1, "personDocServerURL", null);
    Reflector.setField(serviceConfig1, "twitterSolrServer", null);
    Reflector.setField(serviceConfig1, "userSearchesSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "entitySolrServer", null);
    Reflector.setField(serviceConfig1, "userSearchesSolrServer", null);
    Reflector.setField(serviceConfig1, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig1, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig1, "faviconSolrServer", null);
    Reflector.setField(serviceConfig1, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "solrVsPingQ", null);
    Reflector.setField(serviceConfig1, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig1, "tweetGroupSolrServerURL", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "serviceConfig", serviceConfig1);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "LOG", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl1, "docImageServer", solrServer);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "favIconServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "entityInfoCache", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "docSolrServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(entityBaseServiceRepositoryImpl1, "peopleServer", solrServer1);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "twitterGroupServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "twitterServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl1, "eventServer", null);
    Reflector.setField(
        monitorUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl1);
    Reflector.setField(monitorUtil, "entityProcessingService", null);
    Reflector.setField(objectUnderTest, "monitorUtil", monitorUtil);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    final ServiceConfig serviceConfig2 =
        (ServiceConfig) Reflector.getInstance("com.firstrain.frapi.config.ServiceConfig");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "smartSummarySolrServer", solrServer2);
    Reflector.setField(serviceConfig2, "entitySolrServerUrl", null);
    Reflector.setField(serviceConfig2, "documentSimilarityUtil", null);
    Reflector.setField(serviceConfig2, "companyModelServer", null);
    Reflector.setField(serviceConfig2, "eventSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "props", null);
    Reflector.setField(serviceConfig2, "secSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "peopleSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "smartSummarySolrServerUrl", null);
    Reflector.setField(serviceConfig2, "secSolrServer", null);
    Reflector.setField(serviceConfig2, "quoteSolrServerURL", "");
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "docSolrServer", solrServer3);
    Reflector.setField(serviceConfig2, "personDocServer", null);
    Reflector.setField(serviceConfig2, "companyModelServerURL", null);
    Reflector.setField(serviceConfig2, "quoteSolrServer", null);
    Reflector.setField(serviceConfig2, "distributedSearchFile", null);
    Reflector.setField(serviceConfig2, "distributedSearchConfig", null);
    Reflector.setField(serviceConfig2, "eventSolrServer", null);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "docImageSolrServer", solrServer4);
    Reflector.setField(serviceConfig2, "peopleSolrServer", null);
    Reflector.setField(serviceConfig2, "personDocServerURL", null);
    Reflector.setField(serviceConfig2, "twitterSolrServer", null);
    Reflector.setField(serviceConfig2, "userSearchesSolrServerUrl", "");
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "entitySolrServer", solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(serviceConfig2, "userSearchesSolrServer", solrServer6);
    Reflector.setField(serviceConfig2, "docImageSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "tweetGroupSolrServer", null);
    Reflector.setField(serviceConfig2, "distributedDSPingQ", null);
    Reflector.setField(serviceConfig2, "faviconSolrServer", null);
    Reflector.setField(serviceConfig2, "faviconSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "solrVsPingQ", null);
    Reflector.setField(serviceConfig2, "twitterSolrServerUrl", null);
    Reflector.setField(serviceConfig2, "tweetGroupSolrServerURL", null);
    Reflector.setField(objectUnderTest, "serviceConfig", serviceConfig2);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    Reflector.setField(objectUnderTest, "docSolrServer", null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 0L;
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    final Method getTagByIdMethod =
        DTUMemberMatcher.method(TagsDbAPI.class, "getTagById", Transaction.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(tags))
        .when(TagsDbAPI.class, getTagByIdMethod)
        .withArguments(or(isA(Transaction.class), isNull(Transaction.class)), anyLong());
    final Transaction transaction1 = PowerMockito.mock(Transaction.class);
    final Transaction transaction = PowerMockito.mock(Transaction.class);
    final Method newTxnMethod =
        DTUMemberMatcher.method(PersistenceProvider.class, "newTxn", String.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(transaction).doReturn(transaction1))
        .when(PersistenceProvider.class, newTxnMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.getTagById(tagId);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TagsDbAPI.class)
  @Test
  public void getTagsByOwnerAndTagNameInputZeroNullNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long ownerId = 0L;
    final OwnedByType ownerType = null;
    final String tagName = null;
    final Method getTagsByOwnerAndTagNameMethod =
        DTUMemberMatcher.method(
            TagsDbAPI.class,
            "getTagsByOwnerAndTagName",
            String.class,
            long.class,
            OwnedByType.class,
            String.class);
    PowerMockito.doReturn(null)
        .when(TagsDbAPI.class, getTagsByOwnerAndTagNameMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            anyLong(),
            or(isA(OwnedByType.class), isNull(OwnedByType.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Tags retval = objectUnderTest.getTagsByOwnerAndTagName(ownerId, ownerType, tagName);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsDbAPI.class, Logger.class})
  @Test
  public void getTagsByOwnerInputNullNullOutput0() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final OwnedByType ownerType = null;
    final long[] ownerIds = null;
    final ArrayList arrayList1 = new ArrayList();
    final ArrayList arrayList = new ArrayList();
    final Method getTagsByOwnerMethod =
        DTUMemberMatcher.method(
            TagsDbAPI.class, "getTagsByOwner", String.class, OwnedByType.class, long[].class);
    ((PowerMockitoStubber) PowerMockito.doReturn(arrayList).doReturn(arrayList1))
        .when(TagsDbAPI.class, getTagsByOwnerMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(OwnedByType.class), isNull(OwnedByType.class)),
            or(isA(long[].class), isNull(long[].class)));

    // Act
    final List<Tags> retval = objectUnderTest.getTagsByOwner(ownerType, ownerIds);

    // Assert
    final ArrayList<Tags> arrayList2 = new ArrayList<Tags>();
    assertEquals(arrayList2, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TagsDbAPI.class)
  @Test
  public void getTagsByOwnerInputNullNullOutput1() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final OwnedByType ownerType = null;
    final long[] ownerIds = null;
    final ArrayList arrayList = new ArrayList();
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    arrayList.add(tags);
    final Method getTagsByOwnerMethod =
        DTUMemberMatcher.method(
            TagsDbAPI.class, "getTagsByOwner", String.class, OwnedByType.class, long[].class);
    PowerMockito.doReturn(arrayList)
        .when(TagsDbAPI.class, getTagsByOwnerMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(OwnedByType.class), isNull(OwnedByType.class)),
            or(isA(long[].class), isNull(long[].class)));

    // Act
    final List<Tags> retval = objectUnderTest.getTagsByOwner(ownerType, ownerIds);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(0));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsDbAPI.class, Logger.class})
  @Test
  public void getTagsByOwnerInputNullNullOutput12() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final OwnedByType ownerType = null;
    final long[] ownerIds = null;
    final ArrayList arrayList1 = new ArrayList();
    final Tags tags = (Tags) Reflector.getInstance("com.firstrain.db.obj.Tags");
    arrayList1.add(tags);
    final ArrayList arrayList = new ArrayList();
    final Method getTagsByOwnerMethod =
        DTUMemberMatcher.method(
            TagsDbAPI.class, "getTagsByOwner", String.class, OwnedByType.class, long[].class);
    ((PowerMockitoStubber) PowerMockito.doReturn(arrayList).doReturn(arrayList1))
        .when(TagsDbAPI.class, getTagsByOwnerMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(OwnedByType.class), isNull(OwnedByType.class)),
            or(isA(long[].class), isNull(long[].class)));

    // Act
    final List<Tags> retval = objectUnderTest.getTagsByOwner(ownerType, ownerIds);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(0));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsDbAPI.class, Logger.class})
  @Test
  public void getTagsByOwnerInputNullNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final OwnedByType ownerType = null;
    final long[] ownerIds = null;
    final ArrayList arrayList = new ArrayList();
    final Method getTagsByOwnerMethod =
        DTUMemberMatcher.method(
            TagsDbAPI.class, "getTagsByOwner", String.class, OwnedByType.class, long[].class);
    ((PowerMockitoStubber) PowerMockito.doReturn(arrayList).doReturn(null))
        .when(TagsDbAPI.class, getTagsByOwnerMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(OwnedByType.class), isNull(OwnedByType.class)),
            or(isA(long[].class), isNull(long[].class)));

    // Act
    final List<Tags> retval = objectUnderTest.getTagsByOwner(ownerType, ownerIds);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsDbAPI.class, Logger.class})
  @Test
  public void getTagsByOwnerInputNullNullOutputNull2() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final OwnedByType ownerType = null;
    final long[] ownerIds = null;
    final Method getTagsByOwnerMethod =
        DTUMemberMatcher.method(
            TagsDbAPI.class, "getTagsByOwner", String.class, OwnedByType.class, long[].class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(TagsDbAPI.class, getTagsByOwnerMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(OwnedByType.class), isNull(OwnedByType.class)),
            or(isA(long[].class), isNull(long[].class)));

    // Act
    final List<Tags> retval = objectUnderTest.getTagsByOwner(ownerType, ownerIds);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsItemsMapDbAPI.class, Logger.class})
  @Test
  public void getTagsItemsMapByTagIDInputPositiveOutput0() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsItemsMapDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entitySolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "searcher", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "serviceConfig", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "LOG", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "docImageServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "entityInfoCache", null);
    entityBaseServiceRepositoryImpl.setDocSolrServer(null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterGroupServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(
        servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterServer", solrServer1);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 4L;
    final ArrayList arrayList = new ArrayList();
    final Method getTagsItemsMapByTagIDMethod =
        DTUMemberMatcher.method(
            TagsItemsMapDbAPI.class, "getTagsItemsMapByTagID", String.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(arrayList))
        .when(TagsItemsMapDbAPI.class, getTagsItemsMapByTagIDMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyLong());

    // Act
    final List<TagItemsMap> retval = objectUnderTest.getTagsItemsMapByTagID(tagId);

    // Assert
    final ArrayList<TagItemsMap> arrayList1 = new ArrayList<TagItemsMap>();
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(TagsItemsMapDbAPI.class)
  @Test
  public void getTagsItemsMapByTagIDInputPositiveOutput1() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsItemsMapDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl =
        new EntityBaseServiceRepositoryImpl();
    Reflector.setField(entityBaseServiceRepositoryImpl, "entitySolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "searcher", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "serviceConfig", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "LOG", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "docImageServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "entityInfoCache", null);
    entityBaseServiceRepositoryImpl.setDocSolrServer(null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterGroupServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(
        servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterServer", solrServer1);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 4L;
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    final Method getTagsItemsMapByTagIDMethod =
        DTUMemberMatcher.method(
            TagsItemsMapDbAPI.class, "getTagsItemsMapByTagID", String.class, long.class);
    PowerMockito.doReturn(arrayList)
        .when(TagsItemsMapDbAPI.class, getTagsItemsMapByTagIDMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyLong());

    // Act
    final List<TagItemsMap> retval = objectUnderTest.getTagsItemsMapByTagID(tagId);

    // Assert
    final ArrayList<TagItemsMap> arrayList1 = new ArrayList<TagItemsMap>();
    arrayList1.add(null);
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsItemsMapDbAPI.class, Logger.class})
  @Test
  public void getTagsItemsMapByTagIDInputPositiveOutput12() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsItemsMapDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entitySolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "searcher", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "serviceConfig", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "LOG", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "docImageServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "entityInfoCache", null);
    entityBaseServiceRepositoryImpl.setDocSolrServer(null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterGroupServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(
        servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterServer", solrServer1);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 4L;
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    final Method getTagsItemsMapByTagIDMethod =
        DTUMemberMatcher.method(
            TagsItemsMapDbAPI.class, "getTagsItemsMapByTagID", String.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(arrayList))
        .when(TagsItemsMapDbAPI.class, getTagsItemsMapByTagIDMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyLong());

    // Act
    final List<TagItemsMap> retval = objectUnderTest.getTagsItemsMapByTagID(tagId);

    // Assert
    final ArrayList<TagItemsMap> arrayList1 = new ArrayList<TagItemsMap>();
    arrayList1.add(null);
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({TagsItemsMapDbAPI.class, Logger.class})
  @Test
  public void getTagsItemsMapByTagIDInputPositiveOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(TagsItemsMapDbAPI.class);

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest =
        (MonitorServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl");
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final ServicesAPIUtil servicesAPIUtil =
        (ServicesAPIUtil) Reflector.getInstance("com.firstrain.frapi.util.ServicesAPIUtil");
    final EntityBaseServiceRepositoryImpl entityBaseServiceRepositoryImpl =
        (EntityBaseServiceRepositoryImpl)
            Reflector.getInstance(
                "com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl");
    Reflector.setField(entityBaseServiceRepositoryImpl, "entitySolrServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "searcher", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "serviceConfig", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "LOG", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "docImageServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "favIconServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(entityBaseServiceRepositoryImpl, "entityInfoCache", null);
    entityBaseServiceRepositoryImpl.setDocSolrServer(null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "peopleServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterGroupServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "twitterServer", null);
    Reflector.setField(entityBaseServiceRepositoryImpl, "eventServer", null);
    Reflector.setField(
        servicesAPIUtil, "entityBaseServiceRepository", entityBaseServiceRepositoryImpl);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger1);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    Reflector.setField(objectUnderTest, "searcher", null);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "docImageServer", solrServer);
    Reflector.setField(objectUnderTest, "favIconServer", null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    objectUnderTest.setDocSolrServer(null);
    Reflector.setField(objectUnderTest, "peopleServer", null);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "twitterServer", solrServer1);
    Reflector.setField(objectUnderTest, "eventServer", null);
    final long tagId = 4L;
    final Method getTagsItemsMapByTagIDMethod =
        DTUMemberMatcher.method(
            TagsItemsMapDbAPI.class, "getTagsItemsMapByTagID", String.class, long.class);
    ((PowerMockitoStubber) PowerMockito.doReturn(null).doReturn(null))
        .when(TagsItemsMapDbAPI.class, getTagsItemsMapByTagIDMethod)
        .withArguments(or(isA(String.class), isNull(String.class)), anyLong());

    // Act
    final List<TagItemsMap> retval = objectUnderTest.getTagsItemsMapByTagID(tagId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void validateTokensUsingEntityCacheInputNullNullOutputNull() throws Exception {

    // Arrange
    final MonitorServiceRepositoryImpl objectUnderTest = new MonitorServiceRepositoryImpl();
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final ServicesAPIUtil servicesAPIUtil = new ServicesAPIUtil();
    Reflector.setField(servicesAPIUtil, "entityBaseServiceRepository", null);
    Reflector.setField(servicesAPIUtil, "LOG", null);
    Reflector.setField(servicesAPIUtil, "convertUtil", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", servicesAPIUtil);
    Reflector.setField(objectUnderTest, "monitorUtil", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "entitySolrServer", null);
    final SolrSearcher solrSearcher =
        (SolrSearcher) Reflector.getInstance("com.firstrain.solr.client.SolrSearcher");
    Reflector.setField(objectUnderTest, "searcher", solrSearcher);
    Reflector.setField(objectUnderTest, "serviceConfig", null);
    Reflector.setField(
        Reflector.forName("com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl"),
        objectUnderTest,
        "LOG",
        null);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE_100000", 0);
    Reflector.setField(objectUnderTest, "docImageServer", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "favIconServer", solrServer);
    Reflector.setField(objectUnderTest, "MAX_SOLR_CHUNK_SIZE", 0);
    Reflector.setField(objectUnderTest, "entityInfoCache", null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocSolrServer(solrServer1);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "peopleServer", solrServer2);
    Reflector.setField(objectUnderTest, "twitterGroupServer", null);
    Reflector.setField(objectUnderTest, "twitterServer", null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    Reflector.setField(objectUnderTest, "eventServer", solrServer3);
    final List<String> tokenList = null;
    final List<String> invalidEntities = null;

    // Act
    final List<Entity> retval =
        objectUnderTest.validateTokensUsingEntityCache(tokenList, invalidEntities);

    // Assert
    assertNull(retval);
  }
}
