package com.firstrain.frapi.util;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.UserGroupMap.MembershipType;
import com.firstrain.frapi.repository.UserServiceRepository;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Collection;
import org.apache.commons.collections.CollectionUtils;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class UserMembershipDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: UserMembership */
  // Test generated by Diffblue Deeptest.

  @Test
  public void constructorOutputUnsupportedOperationException() throws Throwable {

    // Act, creating object to test constructor
    thrown.expect(UnsupportedOperationException.class);
    try {
      final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.UserMembership");
      final Constructor<?> ctor = classUnderTest.getDeclaredConstructor();
      ctor.setAccessible(true);
      final Object objectUnderTest = ctor.newInstance();
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({CollectionUtils.class, UserServiceRepository.class})
  @Test
  public void retrieveMembershipTypeInputNotNullZeroOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(CollectionUtils.class);

    // Arrange
    final UserServiceRepository userServiceRepository =
        PowerMockito.mock(UserServiceRepository.class);
    PowerMockito.when(userServiceRepository.getUserGroupMapByUserId(anyLong())).thenReturn(null);
    final long frUserId = 0L;
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(CollectionUtils.class, "isNotEmpty", Collection.class);
    PowerMockito.doReturn(false)
        .when(CollectionUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    final MembershipType retval =
        UserMembership.retrieveMembershipType(userServiceRepository, frUserId);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({CollectionUtils.class, UserServiceRepository.class})
  @Test
  public void retrieveMembershipTypeInputNotNullZeroOutputNullPointerException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(CollectionUtils.class);

    // Arrange
    final UserServiceRepository userServiceRepository =
        PowerMockito.mock(UserServiceRepository.class);
    PowerMockito.when(userServiceRepository.getUserGroupMapByUserId(anyLong())).thenReturn(null);
    final long frUserId = 0L;
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(CollectionUtils.class, "isNotEmpty", Collection.class);
    PowerMockito.doReturn(true)
        .when(CollectionUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(Collection.class), isNull(Collection.class)));

    // Act
    thrown.expect(NullPointerException.class);
    UserMembership.retrieveMembershipType(userServiceRepository, frUserId);

    // Method is not expected to return due to exception thrown
  }
}
