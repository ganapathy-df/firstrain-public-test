/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:24:29 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import com.firstrain.frapi.domain.BaseSpec;
import com.firstrain.frapi.domain.MgmtTurnoverData;
import com.firstrain.frapi.domain.TwitterSpec;
import com.firstrain.frapi.obj.MgmtTurnoverServiceSpec;
import com.firstrain.frapi.pojo.EntityBriefInfo;
import com.firstrain.frapi.pojo.wrapper.EventSet;
import com.firstrain.frapi.repository.CompanyServiceRepository;
import com.firstrain.frapi.service.EntityBaseService;
import com.firstrain.frapi.service.EventService;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.obj.IEntityInfo;
import com.firstrain.obj.IEntityInfoCache;
import com.firstrain.web.pojo.EntityMatchInputBean;
import java.util.List;
import java.util.Map;
import org.apache.solr.common.SolrDocument;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class CompanyServiceImplESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		String[] stringArray0 = new String[3];
		CompanyServiceImpl.main(stringArray0);
		assertEquals(3, stringArray0.length);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test1() throws Exception {
		CompanyServiceImpl companyServiceImpl0 = new CompanyServiceImpl();
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(companyServiceRepository0).getEntityInfoCache();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "convertUtil",
        convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "entityBaseService",
        entityBaseService0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "eventService",
        eventService0);
		Injector.validateBean(companyServiceImpl0,
        com.firstrain.frapi.service.impl.CompanyServiceImpl.class);
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec();
		TwitterSpec twitterSpec0 = new TwitterSpec();
		companyServiceImpl0.getMgmtTurnoverData(mgmtTurnoverServiceSpec0, twitterSpec0);
	}

	@Test(timeout = 4000)
	public void test2() throws Exception {
		CompanyServiceImpl companyServiceImpl0 = new CompanyServiceImpl();
		IEntityInfoCache iEntityInfoCache0 = mock(IEntityInfoCache.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(iEntityInfoCache0).catIdToEntity(anyString());
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(iEntityInfoCache0).when(companyServiceRepository0).getEntityInfoCache();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "convertUtil",
        convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "entityBaseService",
        entityBaseService0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "eventService",
        eventService0);
		Injector.validateBean(companyServiceImpl0,
        com.firstrain.frapi.service.impl.CompanyServiceImpl.class);
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = new MgmtTurnoverServiceSpec();
		BaseSpec baseSpec0 = new BaseSpec();
		MgmtTurnoverData mgmtTurnoverData0 = companyServiceImpl0
				.getMgmtTurnoverData(mgmtTurnoverServiceSpec0, baseSpec0);
		assertNull(mgmtTurnoverData0);
	}

	@Test(timeout = 4000)
	public void test3() throws Exception {
		CompanyServiceImpl companyServiceImpl0 = new CompanyServiceImpl();
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "convertUtil",
        convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "entityBaseService",
        entityBaseService0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "eventService",
        eventService0);
		Injector.validateBean(companyServiceImpl0,
        com.firstrain.frapi.service.impl.CompanyServiceImpl.class);
		MgmtTurnoverServiceSpec mgmtTurnoverServiceSpec0 = companyServiceImpl0.getDefaultMonthlySpec();
		assertEquals(365, mgmtTurnoverServiceSpec0.days);
		assertTrue(mgmtTurnoverServiceSpec0.monthlyCount);
		assertEquals(12, mgmtTurnoverServiceSpec0.monthlyCountForMonth);
		assertFalse(mgmtTurnoverServiceSpec0.quarterlyCount);
		assertFalse(mgmtTurnoverServiceSpec0.lhs);
		assertFalse(mgmtTurnoverServiceSpec0.details);
	}

	@Test(timeout = 4000)
	public void test4() throws Exception {
		CompanyServiceImpl companyServiceImpl0 = new CompanyServiceImpl();
		IEntityInfoCache iEntityInfoCache0 = mock(IEntityInfoCache.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(iEntityInfoCache0).catIdToEntity(anyString());
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(iEntityInfoCache0).when(companyServiceRepository0).getEntityInfoCache();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "convertUtil",
        convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "entityBaseService",
        entityBaseService0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "eventService",
        eventService0);
		Injector.validateBean(companyServiceImpl0,
        com.firstrain.frapi.service.impl.CompanyServiceImpl.class);
		BaseSpec baseSpec0 = new BaseSpec();
		EventSet eventSet0 = companyServiceImpl0
				.getCompanyEvents(baseSpec0, null);
		assertNull(eventSet0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test5() throws Exception {
		CompanyServiceImpl companyServiceImpl0 = new CompanyServiceImpl();
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(companyServiceRepository0).getEntityInfoCache();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "convertUtil",
        convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "entityBaseService",
        entityBaseService0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "eventService",
        eventService0);
		Injector.validateBean(companyServiceImpl0,
        com.firstrain.frapi.service.impl.CompanyServiceImpl.class);
		TwitterSpec twitterSpec0 = new TwitterSpec();
		companyServiceImpl0
				.getCompanyEvents(twitterSpec0, "{days}", null);
	}

	@Test(timeout = 4000)
	public void test6() throws Exception {
		CompanyServiceImpl companyServiceImpl0 = new CompanyServiceImpl();
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(companyServiceRepository0)
				.getCompanyInfoFromIndex(anyString());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "convertUtil",
        convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "entityBaseService",
        entityBaseService0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "eventService",
        eventService0);
		Injector.validateBean(companyServiceImpl0,
        com.firstrain.frapi.service.impl.CompanyServiceImpl.class);
		SolrDocument solrDocument0 = companyServiceImpl0.getCompanyDocuments("");
		assertNull(solrDocument0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test7() throws Exception {
		CompanyServiceImpl companyServiceImpl0 = new CompanyServiceImpl();
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(companyServiceRepository0).getMatchedCompanyForQ(anyString());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "convertUtil",
        convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "entityBaseService",
        entityBaseService0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "eventService",
        eventService0);
		Injector.validateBean(companyServiceImpl0,
        com.firstrain.frapi.service.impl.CompanyServiceImpl.class);
		EntityMatchInputBean entityMatchInputBean0 = new EntityMatchInputBean();
		companyServiceImpl0.getCompanyAutoSuggestList(
				"enter ConnectMethod.addRequestHeaders(HttpState, HttpConnection)", entityMatchInputBean0);
	}

	@Test(timeout = 4000)
	public void test8() throws Exception {
		CompanyServiceImpl companyServiceImpl0 = new CompanyServiceImpl();
		CompanyServiceRepository companyServiceRepository0 = mock(CompanyServiceRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class,
				"companyServiceRepository", companyServiceRepository0);
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "convertUtil",
        convertUtil0);
		EntityBaseService entityBaseService0 = mock(EntityBaseService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "entityBaseService",
        entityBaseService0);
		EventService eventService0 = mock(EventService.class, new ViolatedAssumptionAnswer());
		Injector.inject(companyServiceImpl0, com.firstrain.frapi.service.impl.CompanyServiceImpl.class, "eventService",
        eventService0);
		Injector.validateBean(companyServiceImpl0,
        com.firstrain.frapi.service.impl.CompanyServiceImpl.class);
		EntityMatchInputBean entityMatchInputBean0 = new EntityMatchInputBean();
		EntityMatchInputBean.EntityInput entityMatchInputBean_EntityInput0 = new EntityMatchInputBean.EntityInput();
		entityMatchInputBean0.setCompany(entityMatchInputBean_EntityInput0);
		EntityBriefInfo entityBriefInfo0 = companyServiceImpl0
				.getCompanyAutoSuggestList("", entityMatchInputBean0);
		assertEquals(100, entityBriefInfo0.getStatusCode());
	}
}
