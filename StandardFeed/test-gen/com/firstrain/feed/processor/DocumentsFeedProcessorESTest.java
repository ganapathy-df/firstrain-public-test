/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 03 17:19:09 GMT 2018
 */

package com.firstrain.feed.processor;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import com.firstrain.content.pipeline.DefaultProcessor;
import com.firstrain.content.pipeline.PipelineComponent;
import com.firstrain.content.pipeline.PipelineDocumentContext;
import java.net.MalformedURLException;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.Test;


public class DocumentsFeedProcessorESTest {

	@Test(timeout = 4000)
	public void test00() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setWebResultsTotalCount((short) 0);
		assertEquals((short) 0, documentsFeedProcessor0.getWebResultsTotalCount());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test01() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setTopicDimensionsCSV("");
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test02() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setTempLocation("=Gz)mf=&n");
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test03() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setRelTopicsFilePath("");
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test04() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setRegionsSearchTokensCSV("Data populated successfully.");
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test05() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setRegionsBandCSV("(rtW)36\"");
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test06() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setMailTo("`4PQAn");
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test07() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setMailHost(null);
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test08() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setMailFrom("be|OkgIxYB)>QT");
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setIndustryClassificationId((short) (-916));
		assertEquals((short) (-916), documentsFeedProcessor0.getIndustryClassificationId());
	}

	@Test(timeout = 4000)
	public void test10() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setImageServiceURLsCSV("vz448t");
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test11() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());

		documentsFeedProcessor0.setFileNameFormat("");
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test12() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setFeedfilename("A\"le{pb(hw%d\"i");
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test13() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setExcludeSourceIds("vmWk%Y}cD");
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test14() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setEntitySolrServerURL("(rtW)36\"");
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test15() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setEntitySearchToken("vmWk%Y}cD");
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test16() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setProgressPath("`4PQAn");
		documentsFeedProcessor0.setDocSimilarityPropPath("`4PQAn");
		documentsFeedProcessor0.saveProgress(0L, "`4PQAn", 4162);
		documentsFeedProcessor0.setDocumentSimilarityUtil();
	}

	@Test(timeout = 4000)
	public void test17() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setDocumentSimilarityUtil();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test18() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setDocSolrServerURL("Exception in refresh configuration: ");
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test19() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setDocImageServerURL("F>%?_kt");
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test20() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setCompFiltersFilePath(null);
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test21() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setChunkSize(4900);
		assertEquals(4900, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test22() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setProgressPath("");
		documentsFeedProcessor0.saveProgress((-362L), "", (-4));
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test23() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.saveProgress(0L, "~|x`%r", 4);
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000, expected = MalformedURLException.class)
	public void test24() throws Throwable {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0
				.setDestLocation("com.firstrain.conent.pieline.EmptyTaskExecutionIntercepor");
		PipelineComponent.Delta pipelineComponent_Delta0 = documentsFeedProcessor0
				.computeStaticConfigurationDelta(documentsFeedProcessor0);
		documentsFeedProcessor0.refreshConfiguration(pipelineComponent_Delta0);
	}

	@Test(timeout = 4000)
	public void test25() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setProgressPath("`4PQAn");
		documentsFeedProcessor0.saveProgress(0L, "", 4162);
		documentsFeedProcessor0.readProgressMarkers();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test26() throws Throwable {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setProgressPath("4PQA");
		documentsFeedProcessor0.readProgressMarkers();
		PipelineDocumentContext pipelineDocumentContext0 = new PipelineDocumentContext();
		DefaultProcessor.Statistics defaultProcessor_Statistics0 = new DefaultProcessor.Statistics();
		FileSystemHandling.shouldAllThrowIOExceptions();
		pipelineDocumentContext0.setStatistics(defaultProcessor_Statistics0);
		documentsFeedProcessor0.process(pipelineDocumentContext0);
	}

	@Test(timeout = 4000)
	public void test27() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getWebResultsTotalCount();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test28() throws Throwable {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.setFilterSearchToken("A");
		PipelineDocumentContext pipelineDocumentContext0 = new PipelineDocumentContext();
		documentsFeedProcessor0.process(pipelineDocumentContext0);
	}

	@Test(timeout = 4000)
	public void test29() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getTopicDimensionsCSV();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test30() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getTempLocation();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test31() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getRelTopicsFilePath();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test32() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getRegionsSearchTokensCSV();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test33() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getRegionsBandCSV();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test34() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getProgressPath();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test35() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getMailTo();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test36() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getMailHost();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test37() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getMailFrom();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test38() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getIndustryClassificationId();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test39() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getImageServiceURLsCSV();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test40() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getFilterSearchToken();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test41() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		String string0 = documentsFeedProcessor0.getFileNameFormat();
		assertEquals("yyyyMMddHHmm", string0);
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test42() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getExcludeSourceIds();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test43() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getEntitySolrServerURL();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test44() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getEntitySolrServer();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test45() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getEntitySearchToken();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test46() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getDocSolrServerURL();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test47() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getDocSolrServer();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test48() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getDocSimilarityPropPath();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test49() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getDocImageServerURL();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test50() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getDocImageServer();
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
	}

	@Test(timeout = 4000)
	public void test51() throws Exception {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0.getCompFiltersFilePath();
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor0.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}

	@Test(timeout = 4000)
	public void test52() throws Throwable {
		DocumentsFeedProcessor documentsFeedProcessor0 = new DocumentsFeedProcessor();
		documentsFeedProcessor0
				.setDestLocation("com.firstrain.conent.pieline.EmptyTaskExecutionIntercepor");
		DocumentsFeedProcessor documentsFeedProcessor1 = new DocumentsFeedProcessor();
		PipelineComponent.Delta pipelineComponent_Delta0 = documentsFeedProcessor0
				.computeStaticConfigurationDelta(documentsFeedProcessor1);
		assertNotNull(pipelineComponent_Delta0);
		assertEquals(100, documentsFeedProcessor1.getChunkSize());
		assertEquals("yyyyMMddHHmm", documentsFeedProcessor1.getFileNameFormat());
		assertEquals(100, documentsFeedProcessor0.getChunkSize());
	}
}
