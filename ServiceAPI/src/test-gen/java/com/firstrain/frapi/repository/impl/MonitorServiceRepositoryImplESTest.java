/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:49:21 GMT 2018
 */

package com.firstrain.frapi.repository.impl;

import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;

import com.firstrain.db.obj.BaseItem;
import com.firstrain.db.obj.Tags;
import com.firstrain.frapi.config.ServiceConfig;
import com.firstrain.frapi.obj.MonitorWizardFilters;
import com.firstrain.frapi.service.EntityProcessingService;
import com.firstrain.frapi.util.ConvertUtil;
import com.firstrain.frapi.util.MonitorUtil;
import com.firstrain.frapi.util.ServicesAPIUtil;
import com.firstrain.solr.client.DateCount;
import com.firstrain.solr.client.DistributedSolrSearcher;
import it.unimi.dsi.fastutil.longs.LongArrayList;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.impl.LBHttpSolrServer;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;


public class MonitorServiceRepositoryImplESTest {

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test0() throws Exception {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = arrangeMonitorServiceRepositoryImpl();
		String[] stringArray0 = new String[0];
		LBHttpSolrServer lBHttpSolrServer0 = new LBHttpSolrServer(stringArray0);
		ServiceConfig serviceConfig0 = arrangeServiceConfig(lBHttpSolrServer0);
		arrangeData(monitorServiceRepositoryImpl0, serviceConfig0);
	}

	private ServiceConfig arrangeServiceConfig(final LBHttpSolrServer lBHttpSolrServer0) {
		ServiceConfig serviceConfig0 = mock(ServiceConfig.class, new ViolatedAssumptionAnswer());
		doReturn(null).when(serviceConfig0)
				.getDistributedSearchConfig();
		doReturn(null).when(serviceConfig0).getDocImageSolrServer();
		doReturn(lBHttpSolrServer0).when(serviceConfig0).getDocSolrServer();
		doReturn(null, (SolrServer) null).when(serviceConfig0).getEntitySolrServer();
		doReturn(null).when(serviceConfig0).getEventSolrServer();
		doReturn(null).when(serviceConfig0).getFaviconSolrServer();
		doReturn(null).when(serviceConfig0).getPeopleSolrServer();
		doReturn(null).when(serviceConfig0).getTweetGroupSolrServer();
		doReturn(null).when(serviceConfig0).getTwitterSolrServer();
		return serviceConfig0;
	}

	private MonitorServiceRepositoryImpl arrangeMonitorServiceRepositoryImpl() {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = new MonitorServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		MonitorUtil monitorUtil0 = new MonitorUtil();
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				monitorServiceRepositoryImpl0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"monitorUtil", monitorUtil0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						monitorServiceRepositoryImpl0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		return monitorServiceRepositoryImpl0;
	}

	private void arrangeData(final MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0, final ServiceConfig serviceConfig0) throws Exception {
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class,
				"serviceConfig", serviceConfig0);
		Injector
				.validateBean(monitorServiceRepositoryImpl0,
						com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class);
		Injector.executePostConstruct(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.EntityBaseServiceRepositoryImpl.class);
		Tags tags0 = new Tags();
		monitorServiceRepositoryImpl0
				.updateTagFiltersAndSearches((-2246L), tags0, "", null,
						null);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test1() throws Exception {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = new MonitorServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		MonitorUtil monitorUtil0 = new MonitorUtil();
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				monitorServiceRepositoryImpl0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"monitorUtil", monitorUtil0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		Tags tags0 = new Tags();
		monitorServiceRepositoryImpl0.removeMonitor(tags0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test2() throws Exception {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = new MonitorServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		MonitorUtil monitorUtil0 = new MonitorUtil();
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				monitorServiceRepositoryImpl0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"monitorUtil", monitorUtil0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						monitorServiceRepositoryImpl0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		DateCount dateCount0 = new DateCount();
		LongArrayList longArrayList0 = dateCount0.getCounts();
		monitorServiceRepositoryImpl0.removeEntities(null, longArrayList0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test3() throws Exception {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = new MonitorServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		MonitorUtil monitorUtil0 = new MonitorUtil();
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				monitorServiceRepositoryImpl0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"monitorUtil", monitorUtil0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						monitorServiceRepositoryImpl0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		// Undeclared exception!
		monitorServiceRepositoryImpl0.getTagsItemsMapByTagID(0L);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test4() throws Exception {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = new MonitorServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		MonitorUtil monitorUtil0 = new MonitorUtil();
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				monitorServiceRepositoryImpl0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"monitorUtil", monitorUtil0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						monitorServiceRepositoryImpl0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		BaseItem.OwnedByType baseItem_OwnedByType0 = BaseItem.OwnedByType.GROUP;
		// Undeclared exception!
		monitorServiceRepositoryImpl0.getTagsByOwnerAndTagName(1L, baseItem_OwnedByType0, "\"");
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test5() throws Exception {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = new MonitorServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		monitorServiceRepositoryImpl0.getTagById(0L);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test6() throws Exception {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = new MonitorServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		MonitorUtil monitorUtil0 = new MonitorUtil();
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						monitorServiceRepositoryImpl0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		// Undeclared exception!
		monitorServiceRepositoryImpl0.getSearchMapByUISearchIDAndTagID(1421L, 1421L);
	}

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test7() throws Exception {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = new MonitorServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		MonitorUtil monitorUtil0 = new MonitorUtil();
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				monitorServiceRepositoryImpl0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"monitorUtil", monitorUtil0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						monitorServiceRepositoryImpl0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		Namespace namespace0 = Namespace.get("expected a value");
		QName qName0 = new QName(null, namespace0, "#5T6\u0004BiF");
		BeanElement beanElement0 = new BeanElement(qName0);
		Class<Object> class0 = Object.class;
		BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
		monitorServiceRepositoryImpl0.validateTokens(beanAttributeList0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test8() throws Exception {
		MonitorServiceRepositoryImpl monitorServiceRepositoryImpl0 = new MonitorServiceRepositoryImpl();
		ConvertUtil convertUtil0 = new ConvertUtil();
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"convertUtil", convertUtil0);
		MonitorUtil monitorUtil0 = new MonitorUtil();
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityBaseServiceRepository",
				monitorServiceRepositoryImpl0);
		EntityProcessingService entityProcessingService0 = mock(EntityProcessingService.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class, "entityProcessingService",
				entityProcessingService0);
		Injector.validateBean(monitorUtil0, com.firstrain.frapi.util.MonitorUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"monitorUtil", monitorUtil0);
		ServicesAPIUtil servicesAPIUtil0 = new ServicesAPIUtil();
		Injector.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "convertUtil",
				convertUtil0);
		Injector
				.inject(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class, "entityBaseServiceRepository",
						monitorServiceRepositoryImpl0);
		Injector.validateBean(servicesAPIUtil0, com.firstrain.frapi.util.ServicesAPIUtil.class);
		Injector.inject(monitorServiceRepositoryImpl0,
				com.firstrain.frapi.repository.impl.MonitorServiceRepositoryImpl.class,
				"servicesAPIUtil", servicesAPIUtil0);
		// Undeclared exception!
		monitorServiceRepositoryImpl0.getItemsByTagId(0L);
	}
}
