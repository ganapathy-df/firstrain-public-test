package com.firstrain.web.service.core;

import static org.junit.Assert.assertEquals;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import freemarker.template.Configuration;
import freemarker.template.Template;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class FreemarkerTemplateServiceDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: FreemarkerTemplateService */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Template.class, Configuration.class})
  @Test
  public void getHtmlInputNullNullOutputNotNull() throws Exception {

    // Arrange
    final FreemarkerTemplateService objectUnderTest = new FreemarkerTemplateService();
    final Configuration configuration = PowerMockito.mock(Configuration.class);
    final Template template = PowerMockito.mock(Template.class);
    final Method getTemplateMethod =
        DTUMemberMatcher.method(Configuration.class, "getTemplate", String.class);
    PowerMockito.doReturn(template)
        .when(configuration, getTemplateMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "ftlConfig", configuration);
    final String ftlName = null;
    final Object root = null;

    // Act
    final String retval = objectUnderTest.getHtml(ftlName, root);

    // Assert
    assertEquals("", retval);
  }
}
