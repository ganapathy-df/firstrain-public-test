package com.firstrain.frapi.repository.impl;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.api.AccelerometerDbAPI;
import com.firstrain.db.obj.Accelerometer;
import java.lang.reflect.Method;
import java.util.List;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class AccelerometerServiceRepositoryImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: AccelerometerServiceRepositoryImpl */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(AccelerometerDbAPI.class)
  @Test
  public void getAccelerometerInputNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(AccelerometerDbAPI.class);

    // Arrange
    final AccelerometerServiceRepositoryImpl objectUnderTest =
        new AccelerometerServiceRepositoryImpl();
    final String catIds = null;
    final Method getAccelerometerByCatIdsMethod =
        DTUMemberMatcher.method(
            AccelerometerDbAPI.class, "getAccelerometerByCatIds", String.class, String.class);
    PowerMockito.doReturn(null)
        .when(AccelerometerDbAPI.class, getAccelerometerByCatIdsMethod)
        .withArguments(
            or(isA(String.class), isNull(String.class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final List<Accelerometer> retval = objectUnderTest.getAccelerometer(catIds);

    // Assert
    assertNull(retval);
  }
}
