package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.BaseItem.OwnedByType;
import com.firstrain.db.obj.Groups;
import com.firstrain.db.obj.Items;
import com.firstrain.db.obj.MailingList;
import com.firstrain.db.obj.Tags;
import com.firstrain.db.obj.TagsInfo;
import com.firstrain.frapi.domain.MonitorInfo;
import com.firstrain.frapi.obj.MonitorWizardFilters;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.GroupServiceRepository;
import com.firstrain.frapi.repository.MonitorServiceRepository;
import com.firstrain.frapi.util.ConvertUtil;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class MonitorServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: MonitorServiceImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void fillMonitorDetailsInputZero0OutputNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final GroupServiceRepository groupServiceRepository =
        (GroupServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.GroupServiceRepository");
    Reflector.setField(objectUnderTest, "groupServiceRepository", groupServiceRepository);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final long userId = 0L;
    final ArrayList<TagsInfo> monitorList = new ArrayList<TagsInfo>();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "fillMonitorDetails", Reflector.forName("long"), Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final List<MonitorInfo> retval =
        (List<MonitorInfo>) methodUnderTest.invoke(objectUnderTest, userId, monitorList);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    MonitorInfo.class,
    Tags.class,
    MonitorServiceImpl.class,
    Logger.class,
    TagsInfo.class
  })
  @Test
  public void fillMonitorDetailsInputZero1Output1() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest =
        (MonitorServiceImpl)
            Reflector.getInstance("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    final Logger logger = PowerMockito.mock(Logger.class);
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final GroupServiceRepository groupServiceRepository =
        (GroupServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.GroupServiceRepository");
    Reflector.setField(objectUnderTest, "groupServiceRepository", groupServiceRepository);
    final ConvertUtil convertUtil =
        (ConvertUtil) Reflector.getInstance("com.firstrain.frapi.util.ConvertUtil");
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = PowerMockito.mock(Logger.class);
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final long userId = 0L;
    final ArrayList<TagsInfo> monitorList = new ArrayList<TagsInfo>();
    final TagsInfo tagsInfo = PowerMockito.mock(TagsInfo.class);
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getIdMethod = DTUMemberMatcher.method(Tags.class, "getId");
    PowerMockito.doReturn(3L).when(tags, getIdMethod).withNoArguments();
    final Method getTagMethod = DTUMemberMatcher.method(TagsInfo.class, "getTag");
    PowerMockito.doReturn(tags).when(tagsInfo, getTagMethod).withNoArguments();
    Reflector.setField(tagsInfo, "favoriteUserItemId", "8");
    final MailingList mailingList =
        (MailingList) Reflector.getInstance("com.firstrain.db.obj.MailingList");
    Reflector.setField(tagsInfo, "mailingList", mailingList);
    Reflector.setField(tagsInfo, "emailSchedule", null);
    Reflector.setField(tagsInfo, "groupType", null);
    Reflector.setField(tagsInfo, "activityTime", null);
    Reflector.setField(tagsInfo, "groupName", null);
    final Tags tags1 = PowerMockito.mock(Tags.class);
    final Method getIdMethod1 = DTUMemberMatcher.method(Tags.class, "getId");
    PowerMockito.doReturn(7L).when(tags1, getIdMethod1).withNoArguments();
    final Method getTagNameMethod = DTUMemberMatcher.method(Tags.class, "getTagName");
    PowerMockito.doReturn(null).when(tags1, getTagNameMethod).withNoArguments();
    final OwnedByType ownedByType =
        (OwnedByType) Reflector.getInstance("com.firstrain.db.obj.BaseItem$OwnedByType");
    final Method getOwnedByTypeMethod = DTUMemberMatcher.method(Tags.class, "getOwnedByType");
    PowerMockito.doReturn(ownedByType).when(tags1, getOwnedByTypeMethod).withNoArguments();
    Reflector.setField(tagsInfo, "tag", tags1);
    Reflector.setField(tagsInfo, "monitorAdmin", false);
    Reflector.setField(tagsInfo, "favorite", false);
    monitorList.add(tagsInfo);
    final MonitorInfo monitorInfo = PowerMockito.mock(MonitorInfo.class);
    PowerMockito.whenNew(MonitorInfo.class).withNoArguments().thenReturn(monitorInfo);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "fillMonitorDetails", Reflector.forName("long"), Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final List<MonitorInfo> retval =
        (List<MonitorInfo>) methodUnderTest.invoke(objectUnderTest, userId, monitorList);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(0));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void fillMonitorDetailsInputZeroNullOutputNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    final EntityBaseServiceRepository entityBaseServiceRepository =
        (EntityBaseServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.EntityBaseServiceRepository");
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", entityBaseServiceRepository);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final GroupServiceRepository groupServiceRepository =
        (GroupServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.GroupServiceRepository");
    Reflector.setField(objectUnderTest, "groupServiceRepository", groupServiceRepository);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final long userId = 0L;
    final List<TagsInfo> monitorList = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "fillMonitorDetails", Reflector.forName("long"), Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final List<MonitorInfo> retval =
        (List<MonitorInfo>) methodUnderTest.invoke(objectUnderTest, userId, monitorList);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEntityInput0NullNullOutputNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final GroupServiceRepository groupServiceRepository =
        (GroupServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.GroupServiceRepository");
    Reflector.setField(objectUnderTest, "groupServiceRepository", groupServiceRepository);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "LOG", null);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final ArrayList<Items> itemList = new ArrayList<Items>();
    final String entity = null;
    final MonitorWizardFilters filters = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getEntity",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.obj.MonitorWizardFilters"));
    methodUnderTest.setAccessible(true);
    final Items retval = (Items) methodUnderTest.invoke(objectUnderTest, itemList, entity, filters);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getMapOfGroupIdVsGroupsInput0Output0() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final GroupServiceRepository groupServiceRepository =
        (GroupServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.GroupServiceRepository");
    Reflector.setField(objectUnderTest, "groupServiceRepository", groupServiceRepository);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final ArrayList<Groups> groups = new ArrayList<Groups>();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMapOfGroupIdVsGroups", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final Map<Long, Groups> retval =
        (Map<Long, Groups>) methodUnderTest.invoke(objectUnderTest, groups);

    // Assert
    final LinkedHashMap<Long, Groups> linkedHashMap = new LinkedHashMap<Long, Groups>();
    assertEquals(linkedHashMap, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Groups.class)
  @Test
  public void getMapOfGroupIdVsGroupsInput1Output1() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final GroupServiceRepository groupServiceRepository =
        (GroupServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.GroupServiceRepository");
    Reflector.setField(objectUnderTest, "groupServiceRepository", groupServiceRepository);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final ArrayList<Groups> groups = new ArrayList<Groups>();
    final Groups groups1 = PowerMockito.mock(Groups.class);
    final Method getIdMethod = DTUMemberMatcher.method(Groups.class, "getId");
    PowerMockito.doReturn(8_187_281_408L).when(groups1, getIdMethod).withNoArguments();
    groups.add(groups1);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMapOfGroupIdVsGroups", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final Map<Long, Groups> retval =
        (Map<Long, Groups>) methodUnderTest.invoke(objectUnderTest, groups);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(8_187_281_408L));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getMapOfGroupIdVsGroupsInputNullOutputNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    final GroupServiceRepository groupServiceRepository =
        (GroupServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.GroupServiceRepository");
    Reflector.setField(objectUnderTest, "groupServiceRepository", groupServiceRepository);
    final ConvertUtil convertUtil = new ConvertUtil();
    Reflector.setField(convertUtil, "MIN_SUMMARY_LENGTH", 0);
    Reflector.setField(convertUtil, "SUMMARY_TRIM_FACTOR", 0.0f);
    Reflector.setField(convertUtil, "MAX_SUMMARY_LENGTH", 0);
    final Logger logger1 = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(convertUtil, "LOG", logger1);
    Reflector.setField(objectUnderTest, "convertUtil", convertUtil);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final List<Groups> groups = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getMapOfGroupIdVsGroups", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final Map<Long, Groups> retval =
        (Map<Long, Groups>) methodUnderTest.invoke(objectUnderTest, groups);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getOrderedMapOfIdVsObjectInput0OutputNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "groupServiceRepository", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    final ArrayList<Tags> tagList = new ArrayList<Tags>();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getOrderedMapOfIdVsObject", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final Map retval = (Map) methodUnderTest.invoke(objectUnderTest, tagList);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Tags.class)
  @Test
  public void getOrderedMapOfIdVsObjectInput1Output1() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "groupServiceRepository", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    final ArrayList<Tags> tagList = new ArrayList<Tags>();
    final Tags tags = PowerMockito.mock(Tags.class);
    final Method getOwnedByMethod = DTUMemberMatcher.method(Tags.class, "getOwnedBy");
    ((PowerMockitoStubber) PowerMockito.doReturn(0L).doReturn(3_758_096_384L))
        .when(tags, getOwnedByMethod)
        .withNoArguments();
    tagList.add(tags);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getOrderedMapOfIdVsObject", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final Map retval = (Map) methodUnderTest.invoke(objectUnderTest, tagList);

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(3_758_096_384L));
    assertEquals(1, ((List) retval.get(3_758_096_384L)).size());
    assertNotNull(((List) retval.get(3_758_096_384L)).get(0));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getOrderedMapOfIdVsObjectInputNullOutputNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "groupServiceRepository", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    final List<Tags> tagList = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getOrderedMapOfIdVsObject", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final Map retval = (Map) methodUnderTest.invoke(objectUnderTest, tagList);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getValidEntityInput0NotNullOutputNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "groupServiceRepository", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final ArrayList<Entity> validEntityList = new ArrayList<Entity>();
    final String entityToCheck = "########\"";

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getValidEntity",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Entity retval =
        (Entity) methodUnderTest.invoke(objectUnderTest, validEntityList, entityToCheck);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Entity.class)
  @Test
  public void getValidEntityInput1NotNullOutputNotNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "groupServiceRepository", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final ArrayList<Entity> validEntityList = new ArrayList<Entity>();
    final Entity entity = PowerMockito.mock(Entity.class);
    final Method getSearchTokenMethod = DTUMemberMatcher.method(Entity.class, "getSearchToken");
    PowerMockito.doReturn("{{{{{{{{{").when(entity, getSearchTokenMethod).withNoArguments();
    validEntityList.add(entity);
    final String entityToCheck = "{{{{{{{{{";

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getValidEntity",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Entity retval =
        (Entity) methodUnderTest.invoke(objectUnderTest, validEntityList, entityToCheck);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Entity.class)
  @Test
  public void getValidEntityInput1NotNullOutputNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "groupServiceRepository", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final ArrayList<Entity> validEntityList = new ArrayList<Entity>();
    final Entity entity = PowerMockito.mock(Entity.class);
    final Method getSearchTokenMethod = DTUMemberMatcher.method(Entity.class, "getSearchToken");
    PowerMockito.doReturn("########").when(entity, getSearchTokenMethod).withNoArguments();
    validEntityList.add(entity);
    final String entityToCheck = "########\"";

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getValidEntity",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Entity retval =
        (Entity) methodUnderTest.invoke(objectUnderTest, validEntityList, entityToCheck);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getValidEntityInputNullNotNullOutputNull() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "groupServiceRepository", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    final MonitorServiceRepository monitorServiceRepository =
        (MonitorServiceRepository)
            Reflector.getInstance("com.firstrain.frapi.repository.MonitorServiceRepository");
    Reflector.setField(objectUnderTest, "monitorServiceRepository", monitorServiceRepository);
    final List<Entity> validEntityList = null;
    final String entityToCheck = "";

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getValidEntity",
            Reflector.forName("java.util.List"),
            Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final Entity retval =
        (Entity) methodUnderTest.invoke(objectUnderTest, validEntityList, entityToCheck);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void removeGarbageInput0Output0() throws Exception {

    // Arrange
    final MonitorServiceImpl objectUnderTest = new MonitorServiceImpl();
    Reflector.setField(objectUnderTest, "entityBaseServiceRepository", null);
    Reflector.setField(objectUnderTest, "userServiceRepository", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "servicesAPIUtil", null);
    Reflector.setField(objectUnderTest, "groupServiceRepository", null);
    Reflector.setField(objectUnderTest, "convertUtil", null);
    Reflector.setField(objectUnderTest, "monitorServiceRepository", null);
    final ArrayList<String> list = new ArrayList<String>();

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.MonitorServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("removeGarbage", Reflector.forName("java.util.List"));
    methodUnderTest.setAccessible(true);
    final List<String> retval = (List<String>) methodUnderTest.invoke(objectUnderTest, list);

    // Assert
    final ArrayList<String> arrayList = new ArrayList<String>();
    assertEquals(arrayList, retval);
  }
}
