package com.firstrain.frapi.util;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import freemarker.template.Configuration;
import freemarker.template.Template;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class FreemarkerTemplatesDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: FreemarkerTemplates */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getTemplateInputNullOutputIllegalStateException() {

    // Arrange
    final FreemarkerTemplates objectUnderTest = new FreemarkerTemplates();
    Reflector.setField(objectUnderTest, "ftlTemplatePath", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    Reflector.setField(objectUnderTest, "config", null);
    final String name = null;

    // Act
    thrown.expect(IllegalStateException.class);
    objectUnderTest.getTemplate(name);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Configuration.class)
  @Test
  public void getTemplateInputNullOutputNull() throws Exception {

    // Arrange
    final FreemarkerTemplates objectUnderTest = new FreemarkerTemplates();
    Reflector.setField(objectUnderTest, "ftlTemplatePath", null);
    Reflector.setField(objectUnderTest, "LOG", null);
    final Configuration configuration = PowerMockito.mock(Configuration.class);
    final Method getTemplateMethod =
        DTUMemberMatcher.method(Configuration.class, "getTemplate", String.class);
    PowerMockito.doReturn(null)
        .when(configuration, getTemplateMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    Reflector.setField(objectUnderTest, "config", configuration);
    final String name = null;

    // Act
    final Template retval = objectUnderTest.getTemplate(name);

    // Assert
    assertNull(retval);
  }
}
