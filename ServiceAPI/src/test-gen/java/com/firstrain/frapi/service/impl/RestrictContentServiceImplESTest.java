/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 02 17:22:11 GMT 2018
 */

package com.firstrain.frapi.service.impl;

import static org.evosuite.shaded.org.mockito.Mockito.anyLong;
import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import com.firstrain.db.obj.APIArticleHide;
import com.firstrain.frapi.repository.EntityBaseServiceRepository;
import com.firstrain.frapi.repository.RestrictContentRepository;
import java.util.List;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.Test;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

public class RestrictContentServiceImplESTest {

	@Test(timeout = 4000)
	public void test0() throws Exception {
		RestrictContentServiceImpl restrictContentServiceImpl0 = new RestrictContentServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		RestrictContentRepository restrictContentRepository0 = mock(RestrictContentRepository.class,
				new ViolatedAssumptionAnswer());
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"restrictContentRepository", restrictContentRepository0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"taskExecutor", threadPoolTaskExecutor0);
		Injector.validateBean(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class);
		int int0 = restrictContentServiceImpl0
				.hideContent(0L, 0L, "Error while checking hidden content. ArticleId: ");
		assertEquals(200, int0);
	}

	@Test(timeout = 4000)
	public void test1() throws Exception {
		RestrictContentServiceImpl restrictContentServiceImpl0 = new RestrictContentServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		RestrictContentRepository restrictContentRepository0 = mock(RestrictContentRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(restrictContentRepository0)
				.getAllHiddenArticles(anyLong(), anyString());
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"restrictContentRepository", restrictContentRepository0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"taskExecutor", threadPoolTaskExecutor0);
		Injector.validateBean(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class);
		String string0 = restrictContentServiceImpl0.getAllHiddenContent((-804L), "'");
		assertEquals("", string0);
	}

	@Test(timeout = 4000)
	public void test2() throws Exception {
		RestrictContentServiceImpl restrictContentServiceImpl0 = new RestrictContentServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		RestrictContentRepository restrictContentRepository0 = mock(RestrictContentRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(null).when(restrictContentRepository0)
				.getArticle(anyLong(), anyString());
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"restrictContentRepository", restrictContentRepository0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"taskExecutor", threadPoolTaskExecutor0);
		Injector.validateBean(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class);
		boolean boolean0 = restrictContentServiceImpl0.checkIfHiddenContent(0L, "g+@L}lTx\"<");
		assertFalse(boolean0);
	}

	@Test(timeout = 4000)
	public void test3() throws Exception {
		RestrictContentServiceImpl restrictContentServiceImpl0 = new RestrictContentServiceImpl();
		EntityBaseServiceRepository entityBaseServiceRepository0 = mock(
				EntityBaseServiceRepository.class, new ViolatedAssumptionAnswer());
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"entityBaseServiceRepository", entityBaseServiceRepository0);
		APIArticleHide aPIArticleHide0 = mock(APIArticleHide.class, new ViolatedAssumptionAnswer());
		RestrictContentRepository restrictContentRepository0 = mock(RestrictContentRepository.class,
				new ViolatedAssumptionAnswer());
		doReturn(aPIArticleHide0).when(restrictContentRepository0).getArticle(anyLong(), anyString());
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"restrictContentRepository", restrictContentRepository0);
		ThreadPoolTaskExecutor threadPoolTaskExecutor0 = new ThreadPoolTaskExecutor();
		Injector.inject(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class,
				"taskExecutor", threadPoolTaskExecutor0);
		Injector.validateBean(restrictContentServiceImpl0,
				com.firstrain.frapi.service.impl.RestrictContentServiceImpl.class);
		boolean boolean0 = restrictContentServiceImpl0
				.checkIfHiddenContent(1000L, "com.firstrain.frapi.service.impl.RestrictContentServiceImpl");
		assertTrue(boolean0);
	}
}
