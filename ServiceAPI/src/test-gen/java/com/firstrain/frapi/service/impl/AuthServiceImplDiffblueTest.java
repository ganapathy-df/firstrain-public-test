package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.db.obj.APIDefinition;
import com.firstrain.frapi.pojo.APIDefinitionPojo;
import com.firstrain.frapi.pojo.AuthAPIResponse;
import com.firstrain.frapi.repository.AuthServiceRepository;
import com.firstrain.utils.object.PerfActivityType;
import com.firstrain.utils.object.PerfMonitor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class AuthServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: AuthServiceImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void csvToArrayListInputNullOutput0() throws Exception {

    // Arrange
    final AuthServiceImpl objectUnderTest = new AuthServiceImpl();
    Reflector.setField(objectUnderTest, "apiAuthRepository", null);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final String csv = null;

    // Act
    final ArrayList<String> retval = objectUnderTest.csvToArrayList(csv);

    // Assert
    final ArrayList<String> arrayList = new ArrayList<String>();
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({AuthAPIResponse.class, AuthServiceRepository.class, AuthServiceImpl.class})
  @Test
  public void generateAuthKeyInputNullNullNullOutputNotNull() throws Exception {

    // Arrange
    final AuthServiceImpl objectUnderTest = new AuthServiceImpl();
    final AuthServiceRepository authServiceRepository =
        PowerMockito.mock(AuthServiceRepository.class);
    PowerMockito.when(
            authServiceRepository.getAccount(
                or(isA(String.class), isNull(String.class)),
                or(isA(String.class), isNull(String.class)),
                or(isA(String.class), isNull(String.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "apiAuthRepository", authServiceRepository);
    final Logger logger = (Logger) Reflector.getInstance("org.apache.log4j.Logger");
    Reflector.setField(objectUnderTest, "LOG", logger);
    final String authName = null;
    final String authPassword = null;
    final String apiVersion = null;
    final AuthAPIResponse authAPIResponse = PowerMockito.mock(AuthAPIResponse.class);
    PowerMockito.whenNew(AuthAPIResponse.class).withNoArguments().thenReturn(authAPIResponse);

    // Act
    final AuthAPIResponse retval =
        objectUnderTest.generateAuthKey(authName, authPassword, apiVersion);

    // Assert
    assertNotNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(AuthServiceRepository.class)
  @Test
  public void getAPIDefinitionsOutput0() throws Exception {

    // Arrange
    final AuthServiceImpl objectUnderTest = new AuthServiceImpl();
    final AuthServiceRepository authServiceRepository =
        PowerMockito.mock(AuthServiceRepository.class);
    PowerMockito.when(authServiceRepository.getAPIDefinitionList()).thenReturn(null);
    Reflector.setField(objectUnderTest, "apiAuthRepository", authServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);

    // Act
    final List<APIDefinitionPojo> retval = objectUnderTest.getAPIDefinitions();

    // Assert
    final ArrayList<APIDefinitionPojo> arrayList = new ArrayList<APIDefinitionPojo>();
    assertEquals(arrayList, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    APIDefinitionPojo.class,
    APIDefinition.class,
    AuthServiceImpl.class,
    AuthServiceRepository.class
  })
  @Test
  public void getAPIDefinitionsOutput1() throws Exception {

    // Arrange
    final AuthServiceImpl objectUnderTest = new AuthServiceImpl();
    final AuthServiceRepository authServiceRepository =
        PowerMockito.mock(AuthServiceRepository.class);
    final ArrayList arrayList = new ArrayList();
    final APIDefinition aPIDefinition = PowerMockito.mock(APIDefinition.class);
    final Method getApiVersionMethod =
        DTUMemberMatcher.method(APIDefinition.class, "getApiVersion");
    PowerMockito.doReturn(null).when(aPIDefinition, getApiVersionMethod).withNoArguments();
    final Method getApiSignatureMethod =
        DTUMemberMatcher.method(APIDefinition.class, "getApiSignature");
    PowerMockito.doReturn(null).when(aPIDefinition, getApiSignatureMethod).withNoArguments();
    final Method getIdMethod = DTUMemberMatcher.method(APIDefinition.class, "getId");
    PowerMockito.doReturn(0L).when(aPIDefinition, getIdMethod).withNoArguments();
    arrayList.add(aPIDefinition);
    PowerMockito.when(authServiceRepository.getAPIDefinitionList()).thenReturn(arrayList);
    Reflector.setField(objectUnderTest, "apiAuthRepository", authServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    final APIDefinitionPojo aPIDefinitionPojo = PowerMockito.mock(APIDefinitionPojo.class);
    PowerMockito.whenNew(APIDefinitionPojo.class).withNoArguments().thenReturn(aPIDefinitionPojo);

    // Act
    final List<APIDefinitionPojo> retval = objectUnderTest.getAPIDefinitions();

    // Assert
    assertNotNull(retval);
    assertEquals(1, retval.size());
    assertNotNull(retval.get(0));
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(AuthServiceRepository.class)
  @Test
  public void getAPIDefinitionsOutput02() throws Exception {

    // Arrange
    final AuthServiceImpl objectUnderTest = new AuthServiceImpl();
    final AuthServiceRepository authServiceRepository =
        PowerMockito.mock(AuthServiceRepository.class);
    final ArrayList arrayList = new ArrayList();
    PowerMockito.when(authServiceRepository.getAPIDefinitionList()).thenReturn(arrayList);
    Reflector.setField(objectUnderTest, "apiAuthRepository", authServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);

    // Act
    final List<APIDefinitionPojo> retval = objectUnderTest.getAPIDefinitions();

    // Assert
    final ArrayList<APIDefinitionPojo> arrayList1 = new ArrayList<APIDefinitionPojo>();
    assertEquals(arrayList1, retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({
    PerfMonitor.class,
    AuthAPIResponse.class,
    AuthServiceRepository.class,
    AuthServiceImpl.class
  })
  @Test
  public void getAuthKeyDetailsInputNullOutputNotNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(PerfMonitor.class);

    // Arrange
    final AuthServiceImpl objectUnderTest = new AuthServiceImpl();
    final AuthServiceRepository authServiceRepository =
        PowerMockito.mock(AuthServiceRepository.class);
    PowerMockito.when(
            authServiceRepository.getAuthKeyDetails(or(isA(String.class), isNull(String.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "apiAuthRepository", authServiceRepository);
    Reflector.setField(objectUnderTest, "LOG", null);
    final String authKey = null;
    final AuthAPIResponse authAPIResponse = PowerMockito.mock(AuthAPIResponse.class);
    PowerMockito.whenNew(AuthAPIResponse.class).withNoArguments().thenReturn(authAPIResponse);
    final Method recordStatsMethod =
        DTUMemberMatcher.method(
            PerfMonitor.class, "recordStats", long.class, PerfActivityType.class, String.class);
    PowerMockito.doReturn(0L)
        .when(PerfMonitor.class, recordStatsMethod)
        .withArguments(
            anyLong(),
            or(isA(PerfActivityType.class), isNull(PerfActivityType.class)),
            or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(PerfMonitor.class);
    PerfMonitor.currentTime();

    // Act
    final AuthAPIResponse retval = objectUnderTest.getAuthKeyDetails(authKey);

    // Assert
    assertNotNull(retval);
  }
}
