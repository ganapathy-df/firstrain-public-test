package com.firstrain.web.helper;

import static org.junit.Assert.assertEquals;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.web.service.core.RequestParsingService;
import java.lang.reflect.Method;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class MonitorControllerHelperDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: MonitorControllerHelper */
  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Logger.class)
  @Test
  public void getEnterprisePrefInputNotNullNullOutputRuntimeException() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(Logger.class);

    // Arrange
    final MonitorControllerHelper objectUnderTest = new MonitorControllerHelper(104);
    final RequestParsingService requestParsingService =
        (RequestParsingService)
            Reflector.getInstance("com.firstrain.web.service.core.RequestParsingService");
    final String sections = null;
    final Logger logger = PowerMockito.mock(Logger.class);
    final Method getLoggerMethod = DTUMemberMatcher.method(Logger.class, "getLogger", Class.class);
    PowerMockito.doReturn(logger)
        .when(Logger.class, getLoggerMethod)
        .withArguments(or(isA(Class.class), isNull(Class.class)));

    // Act
    thrown.expect(RuntimeException.class);
    objectUnderTest.getEnterprisePref(requestParsingService, sections);

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getErrorCodeOutputZero() {

    // Arrange
    final MonitorControllerHelper objectUnderTest = new MonitorControllerHelper(0);

    // Act
    final int retval = objectUnderTest.getErrorCode();

    // Assert
    assertEquals(0, retval);
  }
}
