package com.firstrain.frapi.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import com.diffblue.deeptestutils.Reflector;
import com.firstrain.frapi.util.QueryParser.ParseResult;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

public class QueryParserDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: QueryParser */
  // Test generated by Diffblue Deeptest.

  @Test
  public void access$000InputNotNullOutputNull() throws Exception {

    // Arrange
    final ParseResult x0 =
        (ParseResult) Reflector.getInstance("com.firstrain.frapi.util.QueryParser$ParseResult");
    Reflector.setField(x0, "unknownParamValuesMap", null);
    Reflector.setField(x0, "input", null);
    Reflector.setField(x0, "knownParamValuesMap", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.QueryParser$ParseResult");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$000", Reflector.forName("com.firstrain.frapi.util.QueryParser$ParseResult"));
    methodUnderTest.setAccessible(true);
    final Map retval = (Map) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void access$100InputNotNullOutputNull() throws Exception {

    // Arrange
    final ParseResult x0 =
        (ParseResult) Reflector.getInstance("com.firstrain.frapi.util.QueryParser$ParseResult");
    Reflector.setField(x0, "unknownParamValuesMap", null);
    Reflector.setField(x0, "input", null);
    Reflector.setField(x0, "knownParamValuesMap", null);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.QueryParser$ParseResult");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$100", Reflector.forName("com.firstrain.frapi.util.QueryParser$ParseResult"));
    methodUnderTest.setAccessible(true);
    final Map retval = (Map) methodUnderTest.invoke(null, x0);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void constructorInputNotNullOutputVoid() throws Exception {

    // Arrange
    final String name = "";

    // Act, creating object to test constructor
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.QueryParser$ParamInfo");
    final Constructor<?> ctor =
        classUnderTest.getDeclaredConstructor(Reflector.forName("java.lang.String"));
    ctor.setAccessible(true);
    final Object objectUnderTest = ctor.newInstance(name);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void constructorOutputVoid2() throws Exception {

    // Act, creating object to test constructor
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.util.QueryParser$ParamHint");
    final Constructor<?> ctor = classUnderTest.getDeclaredConstructor();
    ctor.setAccessible(true);
    final Object objectUnderTest = ctor.newInstance();
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void detectParamMatchAtStartInputNotNullNotNullOutputNotNull() throws Exception {

    // Arrange
    final String fullInput = "!!";
    final Object pInfo = Reflector.getInstance("com.firstrain.frapi.util.QueryParser$ParamInfo");
    Reflector.setField(pInfo, "nameV1", "!!");
    Reflector.setField(pInfo, "nameV2", null);
    Reflector.setField(pInfo, "maxLen", 0);
    Reflector.setField(pInfo, "name", null);
    Reflector.setField(pInfo, "minLen", 0);

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.QueryParser");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "detectParamMatchAtStart",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.util.QueryParser$ParamInfo"));
    methodUnderTest.setAccessible(true);
    final Object retval = (Object) methodUnderTest.invoke(null, fullInput, pInfo);

    // Assert
    assertNotNull(retval);
    assertEquals(0, Reflector.getInstanceField(retval, "pStartPos"));
    assertEquals(1, Reflector.getInstanceField(retval, "pEndPos"));
    assertEquals("!!", Reflector.getInstanceField(retval, "matchOn"));
    assertEquals(0, Reflector.getInstanceField(retval, "vStartPos"));
    assertNull(Reflector.getInstanceField(retval, "matchVal"));
    assertEquals(0, Reflector.getInstanceField(retval, "vEndPos"));
    assertNotNull(Reflector.getInstanceField(retval, "pInfo"));
    assertEquals(
        "!!", Reflector.getInstanceField(Reflector.getInstanceField(retval, "pInfo"), "nameV1"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "pInfo"), "nameV2"));
    assertEquals(
        0, Reflector.getInstanceField(Reflector.getInstanceField(retval, "pInfo"), "maxLen"));
    assertNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "pInfo"), "name"));
    assertEquals(
        0, Reflector.getInstanceField(Reflector.getInstanceField(retval, "pInfo"), "minLen"));
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void detectParamMatchAtStartInputNotNullNotNullOutputNull() throws Exception {

    // Arrange
    final String fullInput = "!%%#!";
    final Object pInfo = Reflector.getInstance("com.firstrain.frapi.util.QueryParser$ParamInfo");
    Reflector.setField(pInfo, "nameV1", "%#!");
    Reflector.setField(pInfo, "nameV2", null);
    Reflector.setField(pInfo, "maxLen", 0);
    Reflector.setField(pInfo, "name", null);
    Reflector.setField(pInfo, "minLen", 0);

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.util.QueryParser");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "detectParamMatchAtStart",
            Reflector.forName("java.lang.String"),
            Reflector.forName("com.firstrain.frapi.util.QueryParser$ParamInfo"));
    methodUnderTest.setAccessible(true);
    final Object retval = (Object) methodUnderTest.invoke(null, fullInput, pInfo);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getInputOutputNull() throws Exception {

    // Arrange
    final ParseResult objectUnderTest =
        (ParseResult) Reflector.getInstance("com.firstrain.frapi.util.QueryParser$ParseResult");
    Reflector.setField(objectUnderTest, "unknownParamValuesMap", null);
    Reflector.setField(objectUnderTest, "input", null);
    Reflector.setField(objectUnderTest, "knownParamValuesMap", null);

    // Act
    final String retval = objectUnderTest.getInput();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void parseQueryStringInputNotNullOutputNotNull() {

    // Arrange
    final String queryString = "     ";

    // Act
    final ParseResult retval = QueryParser.parseQueryString(queryString);

    // Assert
    assertNotNull(retval);
    final LinkedHashMap linkedHashMap = new LinkedHashMap();
    assertEquals(linkedHashMap, Reflector.getInstanceField(retval, "unknownParamValuesMap"));
    assertEquals("     ", retval.getInput());
    final LinkedHashMap linkedHashMap1 = new LinkedHashMap();
    assertEquals(linkedHashMap1, Reflector.getInstanceField(retval, "knownParamValuesMap"));
  }
}
