package com.firstrain.frapi.service.impl;

import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.frapi.domain.BlendDunsInput;
import com.firstrain.frapi.pojo.Entity;
import com.firstrain.frapi.repository.DnbRepository;
import com.firstrain.utils.FR_ArrayUtils;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections.MapUtils;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class DnbServiceImplDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: DnbServiceImpl */
  // Test generated by Diffblue Deeptest.

  @Test
  public void getFirstMatchedEntityInput0NullOutputNull() throws Exception {

    // Arrange
    final DnbServiceImpl objectUnderTest = new DnbServiceImpl();
    Reflector.setField(objectUnderTest, "dnbRepository", null);
    Reflector.setField(objectUnderTest, "DNB_COMPANY_ID_SEPARATOR", null);
    final String[] splittedCompanyIds = {};
    final BlendDunsInput bdi = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.DnbServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getFirstMatchedEntity",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final Entity retval = (Entity) methodUnderTest.invoke(objectUnderTest, splittedCompanyIds, bdi);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MapUtils.class, BlendDunsInput.class, DnbRepository.class, FR_ArrayUtils.class})
  @Test
  public void getFirstMatchedEntityInput1NotNullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FR_ArrayUtils.class);
    PowerMockito.mockStatic(MapUtils.class);

    // Arrange
    final DnbServiceImpl objectUnderTest = new DnbServiceImpl();
    final DnbRepository dnbRepository = PowerMockito.mock(DnbRepository.class);
    final HashMap hashMap = new HashMap();
    PowerMockito.when(
            dnbRepository.getFRCompanyFromDnbCompanyId(
                or(isA(String.class), isNull(String.class)),
                or(isA(Boolean.class), isNull(Boolean.class))))
        .thenReturn(hashMap);
    Reflector.setField(objectUnderTest, "dnbRepository", dnbRepository);
    Reflector.setField(objectUnderTest, "DNB_COMPANY_ID_SEPARATOR", null);
    final String[] splittedCompanyIds = {""};
    final BlendDunsInput bdi = PowerMockito.mock(BlendDunsInput.class);
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(MapUtils.class, "isNotEmpty", Map.class);
    PowerMockito.doReturn(false)
        .when(MapUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(Map.class), isNull(Map.class)));
    final Method getStringFromStringArrMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "getStringFromStringArr", java.lang.String[].class, String.class);
    PowerMockito.doReturn("")
        .when(FR_ArrayUtils.class, getStringFromStringArrMethod)
        .withArguments(
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.DnbServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getFirstMatchedEntity",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final Entity retval = (Entity) methodUnderTest.invoke(objectUnderTest, splittedCompanyIds, bdi);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({MapUtils.class, DnbRepository.class, FR_ArrayUtils.class})
  @Test
  public void getFirstMatchedEntityInput1NullOutputNull() throws Exception {

    // Setup mocks
    PowerMockito.mockStatic(FR_ArrayUtils.class);
    PowerMockito.mockStatic(MapUtils.class);

    // Arrange
    final DnbServiceImpl objectUnderTest = new DnbServiceImpl();
    final DnbRepository dnbRepository = PowerMockito.mock(DnbRepository.class);
    final HashMap hashMap = new HashMap();
    PowerMockito.when(
            dnbRepository.getFRCompanyFromDnbCompanyId(
                or(isA(String.class), isNull(String.class)),
                or(isA(Boolean.class), isNull(Boolean.class))))
        .thenReturn(hashMap);
    Reflector.setField(objectUnderTest, "dnbRepository", dnbRepository);
    Reflector.setField(objectUnderTest, "DNB_COMPANY_ID_SEPARATOR", null);
    final String[] splittedCompanyIds = {""};
    final BlendDunsInput bdi = null;
    final Method isNotEmptyMethod =
        DTUMemberMatcher.method(MapUtils.class, "isNotEmpty", Map.class);
    PowerMockito.doReturn(false)
        .when(MapUtils.class, isNotEmptyMethod)
        .withArguments(or(isA(Map.class), isNull(Map.class)));
    final Method getStringFromStringArrMethod =
        DTUMemberMatcher.method(
            FR_ArrayUtils.class, "getStringFromStringArr", java.lang.String[].class, String.class);
    PowerMockito.doReturn("")
        .when(FR_ArrayUtils.class, getStringFromStringArrMethod)
        .withArguments(
            or(isA(java.lang.String[].class), isNull(java.lang.String[].class)),
            or(isA(String.class), isNull(String.class)));

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.DnbServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getFirstMatchedEntity",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final Entity retval = (Entity) methodUnderTest.invoke(objectUnderTest, splittedCompanyIds, bdi);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getFirstMatchedEntityInputNullNullOutputNull() throws Exception {

    // Arrange
    final DnbServiceImpl objectUnderTest = new DnbServiceImpl();
    Reflector.setField(objectUnderTest, "dnbRepository", null);
    Reflector.setField(objectUnderTest, "DNB_COMPANY_ID_SEPARATOR", null);
    final String[] splittedCompanyIds = null;
    final BlendDunsInput bdi = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.DnbServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "getFirstMatchedEntity",
            Reflector.forName("java.lang.String[]"),
            Reflector.forName("com.firstrain.frapi.domain.BlendDunsInput"));
    methodUnderTest.setAccessible(true);
    final Entity retval = (Entity) methodUnderTest.invoke(objectUnderTest, splittedCompanyIds, bdi);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void m1Input0NullOutputNull() throws Exception {

    // Arrange
    final String[] strArr1 = {};
    final Map<String, String> abc = null;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.service.impl.DnbServiceImpl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "m1", Reflector.forName("java.lang.String[]"), Reflector.forName("java.util.Map"));
    methodUnderTest.setAccessible(true);
    final Void retval = (Void) methodUnderTest.invoke(null, strArr1, abc);

    // Assert
    assertNull(retval);
  }
}
