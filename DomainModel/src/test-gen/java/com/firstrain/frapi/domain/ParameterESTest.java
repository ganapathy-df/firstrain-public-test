/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 28 16:54:13 GMT 2018
 */

package com.firstrain.frapi.domain;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;

import com.firstrain.frapi.util.DefaultEnums;
import org.junit.Test;


public class ParameterESTest {

	@Test(timeout = 4000)
	public void test00() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setnDaysFromToday(parameter0.DEFAULT_N_DAY_FROM_TODAY);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 0, (short) parameter0.getStart());
		assertCountPerEntityItemAndTopCompetitors(parameter0); 
	}

	@Test(timeout = 4000)
	public void test01() throws Exception {
		Parameter parameter0 = new Parameter();
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());

		parameter0.setTopCompetitors(parameter0.DEFAULT_COUNT);
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
	}

	@Test(timeout = 4000)
	public void test02() throws Exception {
		Parameter parameter0 = new Parameter();
		assertEquals((short) 0, (short) parameter0.getStart());

		parameter0.setStart(parameter0.DEFAULT_TOP_COMPETITORS_COUNT);
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test03() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setScope(0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertStartPerEntityItemAndTopCompetitors(parameter0);
		assertEquals((short) 10, (short) parameter0.getCount());
	}

	@Test(timeout = 4000)
	public void test04() throws Exception {
		Parameter parameter0 = new Parameter();
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());

		parameter0.setPerEntityItem(parameter0.DAYS_DEFAULT_COUNT);
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test05() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setNumberOfSubSections(parameter0.DEFAULT_N_DAY_FROM_TODAY);
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEventTaggingStartAndTopCompetitors(parameter0); 
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
	}

	@Test(timeout = 4000)
	public void test06() throws Exception {
		Parameter parameter0 = new Parameter();
		Long long0 = 265L;
		parameter0.setNextStartId(long0);
		assertStartEntityItemAndCount(parameter0);
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test07() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setNeedPagination(null);
		assertCountPerEntityItemAndStart(parameter0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test08() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setNeedMatchedEntities(null);
		assertEquals((short) 10, (short) parameter0.getCount());
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertEquals((short) 0, (short) parameter0.getStart());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setNeedLogo(null);
		assertEquals((short) 10, (short) parameter0.getCount());
		assertTopCompetitorStartAndEventTagging(parameter0); 
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
	}

	@Test(timeout = 4000)
	public void test10() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setNeedImage(null);
		assertEquals((short) 10, (short) parameter0.getCount());
		assertStartPerEntityItemAndTopCompetitors(parameter0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
	}

	@Test(timeout = 4000)
	public void test11() throws Exception {
		Parameter parameter0 = new Parameter();
		assertFalse(parameter0.getNeedCriticalEventTagging());

		parameter0.setNeedCriticalEventTagging(null);
		assertCountPerEntityItemAndStart(parameter0);
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test12() throws Exception {
		Parameter parameter0 = new Parameter();
		Boolean boolean0 = Boolean.FALSE;
		parameter0.setNeedBucket(boolean0);
		assertCountPerEntityItemAndStart(parameter0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test13() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setLastDay("");
		assertEquals("", parameter0.getLastDay());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertStartEntityItemAndCount(parameter0);
	}

	private void assertStartEntityItemAndCount(final Parameter parameter0) {
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 0, (short) parameter0.getStart());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertEquals((short) 10, (short) parameter0.getCount());
	}

	@Test(timeout = 4000)
	public void test14() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setFilterQuery("@qe.");
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals("@qe.", parameter0.getFilterQuery());
		assertEventTaggingStartAndTopCompetitors(parameter0); 
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
	}

	@Test(timeout = 4000)
	public void test15() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setFilingType("+k");
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertEquals((short) 0, (short) parameter0.getStart());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertEquals("+k", parameter0.getFilingType());
		assertEquals((short) 10, (short) parameter0.getCount());
	}

	@Test(timeout = 4000)
	public void test16() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setDays(parameter0.CORPORATE_TRANSACTION_DEFAULT_COUNT);
		assertEquals((short) 0, (short) parameter0.getStart());
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertCountPerEntityItemAndTopCompetitors(parameter0); 
	}

	@Test(timeout = 4000)
	public void test17() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setCsExcludedEventTypeGroup("yyyy-MM-dd");
		assertCountPerEntityItemAndStart(parameter0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test18() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setCsEventsType("0th52\b{enp0Xc");
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals("0th52\b{enp0Xc", parameter0.getCsEventsType());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertStartTopCompetitorsAndEventTagging(parameter0); 
	}

	@Test(timeout = 4000)
	public void test19() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setCsEventGroup("com.firstrain.frapi.domain.Parameter");
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals("com.firstrain.frapi.domain.Parameter", parameter0.getCsEventGroup());
		assertTopCompetitorStartAndEventTagging(parameter0); 
	}

	@Test(timeout = 4000)
	public void test20() throws Exception {
		Parameter parameter0 = new Parameter();
		assertEquals((short) 10, (short) parameter0.getCount());

		parameter0.setCount(parameter0.DAYS_DEFAULT_COUNT);
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test21() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.setChartType("");
		assertPerEntityItemStartAndCount(parameter0); 
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals("", parameter0.getChartType());
	}

	@Test(timeout = 4000)
	public void test22() throws Exception {
		Parameter parameter0 = new Parameter();
		DefaultEnums.DateBucketingMode defaultEnums_DateBucketingMode0 = DefaultEnums.DateBucketingMode.SMART;
		parameter0.setBucketMode(defaultEnums_DateBucketingMode0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertPerEntityItemStartAndCount(parameter0); 
	}

	@Test(timeout = 4000)
	public void test23() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getnDaysFromToday();
		assertParameter(parameter0);
	}

	@Test(timeout = 4000)
	public void test24() throws Exception {
		Parameter parameter0 = new Parameter();
		Short short0 = parameter0.getTopCompetitors();
		assertCountPerEntityItemAndStart(parameter0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) short0);
	}

	@Test(timeout = 4000)
	public void test25() throws Exception {
		Parameter parameter0 = new Parameter();
		Short short0 = parameter0.getStart();
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals((short) 0, (short) short0);
	}

	@Test(timeout = 4000)
	public void test26() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getScope();
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertPerEntityItemStartAndCount(parameter0); 
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test27() throws Exception {
		Parameter parameter0 = new Parameter();
		Short short0 = parameter0.getPerEntityItem();
		assertEquals((short) 10, (short) parameter0.getCount());
		assertStartTopCompetitorsAndEventTagging(parameter0); 
		assertEquals((short) 2, (short) short0);
	}

	@Test(timeout = 4000)
	public void test28() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getNumberOfSubSections();
		assertEquals((short) 0, (short) parameter0.getStart());
		assertCountPerEntityItemAndTopCompetitors(parameter0); 
		assertFalse(parameter0.getNeedCriticalEventTagging());
	}
 
	private void assertCountPerEntityItemAndTopCompetitors(final Parameter parameter0) { 
		assertEquals((short) 10, (short) parameter0.getCount()); 
		assertEquals((short) 2, (short) parameter0.getPerEntityItem()); 
		assertEquals((short) 40, (short) parameter0.getTopCompetitors()); 
	} 

	@Test(timeout = 4000)
	public void test29() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getNextStartId();
		assertParameter(parameter0);
	}

	private void assertParameter(final Parameter parameter0) {
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertPerEntityItemStartAndCount(parameter0); 
		assertFalse(parameter0.getNeedCriticalEventTagging());
	}
 
	private void assertPerEntityItemStartAndCount(final Parameter parameter0) { 
		assertEquals((short) 2, (short) parameter0.getPerEntityItem()); 
		assertEquals((short) 0, (short) parameter0.getStart()); 
		assertEquals((short) 10, (short) parameter0.getCount()); 
	} 

	@Test(timeout = 4000)
	public void test30() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getNeedPagination();
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertStartTopCompetitorsAndEventTagging(parameter0); 
	}

	@Test(timeout = 4000)
	public void test31() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getNeedMatchedEntities();
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertTopCompetitorsCountAndStart(parameter0);
	}

	@Test(timeout = 4000)
	public void test32() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getNeedLogo();
		assertStartCountAndPerEntityItem(parameter0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test33() throws Exception {
		Parameter parameter0 = new Parameter();
		Boolean boolean0 = parameter0.getNeedImage();
		parameter0.setIpad(boolean0);
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertEquals((short) 10, (short) parameter0.getCount());
		assertPerEntityItemEventTaggingAndStart(parameter0);
	}

	@Test(timeout = 4000)
	public void test34() throws Exception {
		Parameter parameter0 = new Parameter();
		Boolean boolean0 = parameter0.getNeedCriticalEventTagging();
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertFalse(boolean0);
		assertStartCountAndPerEntityItem(parameter0);
	}

	@Test(timeout = 4000)
	public void test35() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getNeedBucket();
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertPerEntityItemEventTaggingAndStart(parameter0);
	}

	@Test(timeout = 4000)
	public void test36() throws Exception {
		Parameter parameter0 = new Parameter();
		String string0 = parameter0.getLastDay();
		assertPerEntityItemEventTaggingAndStart(parameter0);
		assertNull(string0);
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertEquals((short) 10, (short) parameter0.getCount());
	}

	private void assertPerEntityItemEventTaggingAndStart(final Parameter parameter0) {
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 0, (short) parameter0.getStart());
	}

	@Test(timeout = 4000)
	public void test37() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getIpad();
		assertTopCompetitorStartAndEventTagging(parameter0); 
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertEquals((short) 10, (short) parameter0.getCount());
	}
 
	private void assertTopCompetitorStartAndEventTagging(final Parameter parameter0) { 
		assertEquals((short) 40, (short) parameter0.getTopCompetitors()); 
		assertEquals((short) 0, (short) parameter0.getStart()); 
		assertFalse(parameter0.getNeedCriticalEventTagging()); 
	} 

	@Test(timeout = 4000)
	public void test38() throws Exception {
		Parameter parameter0 = new Parameter();
		String string0 = parameter0.getFilterQuery();
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertEquals((short) 10, (short) parameter0.getCount());
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertNull(string0);
		assertEquals((short) 0, (short) parameter0.getStart());
	}

	@Test(timeout = 4000)
	public void test39() throws Exception {
		Parameter parameter0 = new Parameter();
		String string0 = parameter0.getFilingType();
		assertStartCountAndPerEntityItem(parameter0);
		assertStringCriticalEventAndTopCompetitors(string0, parameter0);
	}

	@Test(timeout = 4000)
	public void test40() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getDays();
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertEventTaggingStartAndTopCompetitors(parameter0); 
		assertEquals((short) 10, (short) parameter0.getCount());
	}
 
	private void assertEventTaggingStartAndTopCompetitors(final Parameter parameter0) { 
		assertFalse(parameter0.getNeedCriticalEventTagging()); 
		assertEquals((short) 0, (short) parameter0.getStart()); 
		assertEquals((short) 40, (short) parameter0.getTopCompetitors()); 
	} 

	@Test(timeout = 4000)
	public void test41() throws Exception {
		Parameter parameter0 = new Parameter();
		String string0 = parameter0.getCsExcludedEventTypeGroup();
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertNull(string0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertCountPerEntityItemAndStart(parameter0);
	}

	@Test(timeout = 4000)
	public void test42() throws Exception {
		Parameter parameter0 = new Parameter();
		String string0 = parameter0.getCsEventsType();
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertNull(string0);
		assertStartTopCompetitorsAndEventTagging(parameter0); 
		assertEquals((short) 10, (short) parameter0.getCount());
	}

	@Test(timeout = 4000)
	public void test43() throws Exception {
		Parameter parameter0 = new Parameter();
		String string0 = parameter0.getCsEventGroup();
		assertStartCountAndPerEntityItem(parameter0);
		assertStringCriticalEventAndTopCompetitors(string0, parameter0);
	}

	@Test(timeout = 4000)
	public void test44() throws Exception {
		Parameter parameter0 = new Parameter();
		Short short0 = parameter0.getCount();
		assertStartPerEntityItemAndTopCompetitors(parameter0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 10, (short) short0);
	}

	@Test(timeout = 4000)
	public void test45() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getCompanyTeamId();
		assertStartPerEntityItemAndTopCompetitors(parameter0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 10, (short) parameter0.getCount());
	}

	private void assertStartPerEntityItemAndTopCompetitors(final Parameter parameter0) {
		assertEquals((short) 0, (short) parameter0.getStart());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test46() throws Exception {
		Parameter parameter0 = new Parameter();
		Integer integer0 = 0;
		parameter0.setCompanyTeamId(integer0);
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertStartTopCompetitorsAndEventTagging(parameter0); 
	}
 
	private void assertStartTopCompetitorsAndEventTagging(final Parameter parameter0) { 
		assertEquals((short) 0, (short) parameter0.getStart()); 
		assertEquals((short) 40, (short) parameter0.getTopCompetitors()); 
		assertFalse(parameter0.getNeedCriticalEventTagging()); 
	} 

	@Test(timeout = 4000)
	public void test47() throws Exception {
		Parameter parameter0 = new Parameter();
		Integer integer0 = 4;
		parameter0.getCompanyTeamEnum(integer0);
		assertEquals((short) 0, (short) parameter0.getStart());
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertEquals((short) 10, (short) parameter0.getCount());
	}

	@Test(timeout = 4000)
	public void test48() throws Exception {
		Parameter parameter0 = new Parameter();
		Integer integer0 = 3;
		parameter0.getCompanyTeamEnum(integer0);
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertTopCompetitorsCountAndStart(parameter0);
	}

	@Test(timeout = 4000)
	public void test49() throws Exception {
		Integer integer0 = 2;
		Parameter parameter0 = new Parameter();
		parameter0.setCompanyTeamId(integer0);
		assertCountPerEntityItemAndStart(parameter0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	private void assertCountPerEntityItemAndStart(final Parameter parameter0) {
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertEquals((short) 0, (short) parameter0.getStart());
	}

	@Test(timeout = 4000)
	public void test50() throws Exception {
		Parameter parameter0 = new Parameter();
		Integer integer0 = 1;
		parameter0.getCompanyTeamEnum(integer0);
		assertTopCompetitorsTaggingAndData(parameter0);
	}

	@Test(timeout = 4000)
	public void test51() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getCompanyTeamEnum();
		assertTopCompetitorsTaggingAndData(parameter0);
	}

	private void assertTopCompetitorsTaggingAndData(final Parameter parameter0) {
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertStartCountAndPerEntityItem(parameter0);
	}

	private void assertStartCountAndPerEntityItem(final Parameter parameter0) {
		assertEquals((short) 0, (short) parameter0.getStart());
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
	}

	@Test(timeout = 4000)
	public void test52() throws Exception {
		Parameter parameter0 = new Parameter();
		String string0 = parameter0.getChartType();
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals((short) 0, (short) parameter0.getStart());
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertStringCriticalEventAndTopCompetitors(string0, parameter0);
	}

	private void assertStringCriticalEventAndTopCompetitors(final String string0, final Parameter parameter0) {
		assertNull(string0);
		assertFalse(parameter0.getNeedCriticalEventTagging());
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
	}

	@Test(timeout = 4000)
	public void test53() throws Exception {
		Parameter parameter0 = new Parameter();
		parameter0.getBucketMode();
		assertTopCompetitorsCountAndStart(parameter0);
		assertEquals((short) 2, (short) parameter0.getPerEntityItem());
		assertFalse(parameter0.getNeedCriticalEventTagging());
	}

	private void assertTopCompetitorsCountAndStart(final Parameter parameter0) {
		assertEquals((short) 40, (short) parameter0.getTopCompetitors());
		assertEquals((short) 10, (short) parameter0.getCount());
		assertEquals((short) 0, (short) parameter0.getStart());
	}
}
