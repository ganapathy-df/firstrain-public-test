/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 03 17:20:17 GMT 2018
 */

package com.firstrain.feed.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import com.firstrain.content.similarity.CandidateIndex;
import com.firstrain.content.similarity.CandidateStore;
import com.firstrain.content.similarity.DocumentSimilarityUtil;
import com.firstrain.frapi.util.ContentType;
import com.firstrain.solr.client.DocCatEntry;
import com.firstrain.solr.client.DocEntry;
import com.firstrain.solr.client.EntityEntry;
import com.firstrain.solr.client.QuoteEntry;
import com.firstrain.web.pojo.Document;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
import org.apache.solr.core.CoreContainer;
import org.apache.solr.core.SolrResourceLoader;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMNamespace;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hibernate.collection.PersistentBag;
import org.hibernate.collection.PersistentSortedSet;
import org.junit.Test;


public class FeedUtilsESTest {

	@Test(timeout = 4000, expected = IllegalArgumentException.class)
	public void test01() throws Exception {
		FeedUtils.getReltopicCatIdsSet(null);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test02() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		ArrayList<DocCatEntry> arrayList0 = docEntry0.catEntries;
		DocCatEntry docCatEntry0 = new DocCatEntry(null, (short) (-6), (short) 0);
		arrayList0.add(docCatEntry0);
		docEntry0.matchedContentTypes = arrayList0;
		PersistentSortedSet persistentSortedSet0 = new PersistentSortedSet();
		// Undeclared exception!
		FeedUtils.getContentTypeAndFilterOutCT(docEntry0, persistentSortedSet0);
	}

	@Test(timeout = 4000)
	public void test03() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		ArrayList<DocCatEntry> arrayList0 = docEntry0.catEntries;
		docEntry0.matchedContentTypes = arrayList0;
		PersistentSortedSet persistentSortedSet0 = new PersistentSortedSet();
		ContentType contentType0 = FeedUtils
				.getContentTypeAndFilterOutCT(docEntry0, persistentSortedSet0);
		assertEquals("News and Web", contentType0.getLabel());
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test04() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		DOMNamespace dOMNamespace0 = new DOMNamespace(null, null);
		BeanElement beanElement0 = new BeanElement(null, dOMNamespace0, null);
		Class<Object> class0 = Object.class;
		ArrayList<DocCatEntry> arrayList0 = docEntry0.catEntries;
		docEntry0.matchedCompanies = arrayList0;
		BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
		arrayList0.add(null);
		// Undeclared exception!
		FeedUtils.getContentTypeAndFilterOutCT(docEntry0, beanAttributeList0);
	}

	@Test(timeout = 4000, expected = NullPointerException.class)
	public void test05() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		ArrayList<DocCatEntry> arrayList0 = docEntry0.catEntries;
		DocCatEntry docCatEntry0 = new DocCatEntry(null, (short) 0, (short) 7895,
				(short) 7895);
		arrayList0.add(docCatEntry0);
		docEntry0.matchedTopics = arrayList0;
		PersistentBag persistentBag0 = new PersistentBag();
		// Undeclared exception!
		FeedUtils.getContentTypeAndFilterOutCT(docEntry0, persistentBag0);
	}

	@Test(timeout = 4000, expected = Exception.class)
	public void test06() throws Exception {
		FeedUtils.getCompanyCatIDsOfIndustry("7'o?w", null);
	}

	@Test(timeout = 4000)
	public void test07() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		CandidateIndex candidateIndex0 = new CandidateIndex();
		CandidateStore candidateStore0 = new CandidateStore();
		DocumentSimilarityUtil documentSimilarityUtil0 = new DocumentSimilarityUtil("B>/}.l7fe-#a=E[B",
				null, candidateIndex0, candidateStore0);
		docEntry0.addSimilarDocs(docEntry0);
		List<DocEntry> list0 = FeedUtils
				.filterSimilarEntries(docEntry0.similarDocs, documentSimilarityUtil0, (int) (short) 0,
						true);
		assertEquals(1, list0.size());
	}

	@Test(timeout = 4000)
	public void test08() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		CandidateIndex candidateIndex0 = new CandidateIndex();
		CandidateStore candidateStore0 = new CandidateStore();
		DocumentSimilarityUtil documentSimilarityUtil0 = new DocumentSimilarityUtil("B>/}.l7fe-#a=E[B",
				null, candidateIndex0, candidateStore0);
		List<DocEntry> list0 = FeedUtils
				.filterSimilarEntries(docEntry0.similarDocs, documentSimilarityUtil0, (int) (short) 0,
						true);
		assertNull(list0);
	}

	@Test(timeout = 4000)
	public void test09() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		docEntry0.addSimilarDocs(docEntry0);
		List<DocEntry> list0 = FeedUtils.filterSimilarEntries(docEntry0.similarDocs);
		assertEquals(1, list0.size());
	}

	@Test(timeout = 4000)
	public void test10() throws Exception {
		List<DocEntry> list0 = FeedUtils.filterSimilarEntries(null);
		assertNull(list0);
	}

	@Test(timeout = 4000)
	public void test11() throws Exception {
		FeedUtils.createJSONFile("E&3", "E&3");
		FeedUtils.deleteOldFiles("", "_1", 3);
	}

	@Test(timeout = 4000)
	public void test12() throws Exception {
		FeedUtils.deleteOldFiles("K(Ab_[Io kJ", "M/", (byte) 2);
	}

	@Test(timeout = 4000)
	public void test13() throws Exception {
		FeedUtils.deleteOldFiles("en", "", 0);
	}

	@Test(timeout = 4000)
	public void test14() throws Exception {
		boolean boolean0 = FeedUtils.createZipfile("K(Ab_[Io kJ", "K(Ab_[Io kJ", "K(Ab_[Io kJ");
		assertTrue(boolean0);
	}

	@Test(timeout = 4000)
	public void test15() throws Exception {
		boolean boolean0 = FeedUtils
				.createZipfile("org.hibernate.ConnectionReleaseMode", "", "jY1d\"oTW+");
		assertFalse(boolean0);
	}

	@Test(timeout = 4000)
	public void test16() throws Exception {
		boolean boolean0 = FeedUtils.createJSONFile(null, null);
		assertFalse(boolean0);
	}

	@Test(timeout = 4000)
	public void test17() throws Exception {
		boolean boolean0 = FeedUtils
				.createJSONFile("org.hibernate.ConnectionReleaseMode", "p4kgci+]zzi XMF(k");
		boolean boolean1 = FeedUtils.copy("p4kgci+]zzi XMF(k", "jY1d\"oTW+");
		assertTrue(boolean1 == boolean0);
		assertTrue(boolean1);
	}

	@Test(timeout = 4000)
	public void test18() throws Exception {
		boolean boolean0 = FeedUtils.copy("S-~V8>+8LX3 Ji8-N.g", ",HcJ[");
		assertFalse(boolean0);
	}

	@Test(timeout = 4000)
	public void test19() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		DOMNamespace dOMNamespace0 = new DOMNamespace(null, null);
		BeanElement beanElement0 = new BeanElement(null, dOMNamespace0, null);
		Class<Object> class0 = Object.class;
		BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
		docEntry0.otrQuotes = (List<QuoteEntry>) beanAttributeList0;
		Document document0 = FeedUtils
				.convertDocumentPOJOFromDocEntry(docEntry0, null, null,
						null);
		assertEquals("D:null", document0.getId());
		assertEquals("G:-1", document0.getGroupId());
	}

	@Test(timeout = 4000)
	public void test20() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		DocEntry.DocImage docEntry_DocImage0 = new DocEntry.DocImage();
		docEntry0.docImage = docEntry_DocImage0;
		Document document0 = FeedUtils
				.convertDocumentPOJOFromDocEntry(docEntry0, null, null,
						null);
		assertEquals("G:-1", document0.getGroupId());
		assertEquals("D:null", document0.getId());
	}

	@Test(timeout = 4000)
	public void test21() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		DocCatEntry docCatEntry0 = new DocCatEntry(null, (short) (-6), (short) 0);
		docEntry0.catEntries.add(docCatEntry0);
		Document document0 = FeedUtils
				.convertDocumentPOJOFromDocEntry(docEntry0, null, null,
						null);
		assertEquals("D:null", document0.getId());
		assertEquals("G:-1", document0.getGroupId());
	}

	@Test(timeout = 4000)
	public void test22() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		docEntry0.smartSummary = ",HcJ[";
		docEntry0.title = "";
		Document document0 = FeedUtils
				.convertDocumentPOJOFromDocEntry(docEntry0, null, null,
						null);
		assertEquals("D:null", document0.getId());
		assertEquals("G:-1", document0.getGroupId());
	}

	@Test(timeout = 4000)
	public void test23() throws Exception {
		DocEntry docEntry0 = new DocEntry();
		docEntry0.addSimilarDocs(docEntry0);
		SolrResourceLoader solrResourceLoader0 = new SolrResourceLoader(null);
		CoreContainer coreContainer0 = new CoreContainer(solrResourceLoader0);
		EmbeddedSolrServer embeddedSolrServer0 = new EmbeddedSolrServer(coreContainer0,
				"handleNonTxWriteCommand for command %s");
		FeedUtils.attachDocSummaryImageAndHighlightQuote(docEntry0.similarDocs, embeddedSolrServer0);
		assertEquals((short) 0, docEntry0.accessType);
	}

	@Test(timeout = 4000)
	public void test24() throws Exception {
		DOMNamespace dOMNamespace0 = new DOMNamespace(null, null);
		BeanElement beanElement0 = new BeanElement(null, dOMNamespace0, null);
		Class<Object> class0 = Object.class;
		BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
		BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
		FeedUtils.attachDocSummaryImageAndHighlightQuote(beanAttributeList0, null);
		assertEquals(1, beanAttributeList0.size());
	}
}
