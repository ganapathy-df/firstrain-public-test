package com.firstrain.frapi.config;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.firstrain.content.similarity.DocumentSimilarityUtil;
import com.firstrain.frapi.config.ServiceConfig.ServerUrl;
import com.firstrain.solr.client.DistributedSolrSearcher.DistributedSearchConfig;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import org.apache.solr.client.solrj.SolrServer;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.w3c.dom.Node;
import org.w3c.dom.Text;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore({"javax.management.*"})
public class ServiceConfigDiffblueTest {

  @Rule public final ExpectedException thrown = ExpectedException.none();
  @Rule public final Timeout globalTimeout = new Timeout(10_000);

  /* testedClasses: ServiceConfig */
  // Test generated by Diffblue Deeptest.

  @Test
  public void access$000InputNotNullOutputNotNull() throws Exception {

    // Arrange
    final ServerUrl x0 = ServerUrl.COMPANY_MODEL_SERVER_URL;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.config.ServiceConfig$ServerUrl");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod(
            "access$000", Reflector.forName("com.firstrain.frapi.config.ServiceConfig$ServerUrl"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(null, x0);

    // Assert
    assertEquals("CompanyModelServerURL", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getCompanyModelServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getCompanyModelServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDescriptionOutputNotNull() throws Exception {

    // Arrange
    final ServerUrl objectUnderTest = ServerUrl.COMPANY_MODEL_SERVER_URL;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.firstrain.frapi.config.ServiceConfig$ServerUrl");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod("getDescription");
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(objectUnderTest);

    // Assert
    assertEquals("CompanyModelServerURL", retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDistributedSearchConfigOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final DistributedSearchConfig retval = objectUnderTest.getDistributedSearchConfig();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDocImageSolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getDocImageSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDocSolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getDocSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getDocumentSimilarityUtilOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final DocumentSimilarityUtil retval = objectUnderTest.getDocumentSimilarityUtil();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEntitySolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getEntitySolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getEventSolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getEventSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getFaviconSolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getFaviconSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getPeopleSolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getPeopleSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getPersonDocServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getPersonDocServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getPropertyInputNotNullOutputNull() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setCompanyModelServer(solrServer);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", "");
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    hashMap.put("?????????", null);
    Reflector.setField(objectUnderTest, "props", hashMap);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "");
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "");
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", "");
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSecSolrServer(solrServer1);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", "");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocSolrServer(solrServer2);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPersonDocServer(solrServer3);
    Reflector.setField(objectUnderTest, "companyModelServerURL", "");
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setQuoteSolrServer(solrServer4);
    Reflector.setField(objectUnderTest, "distributedSearchFile", "");
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEventSolrServer(solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocImageSolrServer(solrServer6);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPeopleSolrServer(solrServer7);
    Reflector.setField(objectUnderTest, "personDocServerURL", "");
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "");
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer8);
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer9);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "");
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer10 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer10);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap1 = new HashMap<SolrServer, String>();
    Reflector.setField(objectUnderTest, "solrVsPingQ", hashMap1);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", "");
    final String propertyName = "????????";

    // Act
    final String retval = objectUnderTest.getProperty(propertyName);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getQuoteSolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getQuoteSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getSecSolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getSecSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getSmartSummarySolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getSmartSummarySolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getSolrVsPingQOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final Map<SolrServer, String> retval = objectUnderTest.getSolrVsPingQ();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({Text.class, Node.class})
  @Test
  public void getTextContentInputNotNullOutputNotNull() throws Exception {

    // Arrange
    final Node n = PowerMockito.mock(Node.class);
    final Text text = PowerMockito.mock(Text.class);
    final Method getDataMethod = DTUMemberMatcher.method(Text.class, "getData");
    PowerMockito.doReturn("").when(text, getDataMethod).withNoArguments();
    final Method getFirstChildMethod = DTUMemberMatcher.method(Node.class, "getFirstChild");
    PowerMockito.doReturn(text).when(n, getFirstChildMethod).withNoArguments();

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.config.ServiceConfig");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getTextContent", Reflector.forName("org.w3c.dom.Node"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(null, n);

    // Assert
    assertEquals("", retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest(Node.class)
  @Test
  public void getTextContentInputNotNullOutputNull() throws Exception {

    // Arrange
    final Node n = PowerMockito.mock(Node.class);
    final Method getFirstChildMethod = DTUMemberMatcher.method(Node.class, "getFirstChild");
    PowerMockito.doReturn(null).when(n, getFirstChildMethod).withNoArguments();

    // Act
    final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.config.ServiceConfig");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("getTextContent", Reflector.forName("org.w3c.dom.Node"));
    methodUnderTest.setAccessible(true);
    final String retval = (String) methodUnderTest.invoke(null, n);

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTweetGroupSolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getTweetGroupSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getTwitterSolrServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getTwitterSolrServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void getUserSearchesServerOutputNull() {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    objectUnderTest.setUserSearchesSolrServer(null);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);

    // Act
    final SolrServer retval = objectUnderTest.getUserSearchesServer();

    // Assert
    assertNull(retval);
  }

  // Test generated by Diffblue Deeptest.
  @PrepareForTest({File.class, ServiceConfig.class})
  @Test
  public void loadFromXMLInputNullOutputNullPointerException() throws Throwable {

    // Arrange
    final String configFilePath = null;
    final NullPointerException nullPointerException = new NullPointerException();
    final NullPointerException nullPointerException1 = new NullPointerException();
    Reflector.setField(nullPointerException1, "cause", nullPointerException1);
    Reflector.setField(nullPointerException1, "detailMessage", null);
    Reflector.setField(nullPointerException, "cause", nullPointerException1);
    Reflector.setField(nullPointerException, "detailMessage", null);
    PowerMockito.whenNew(File.class)
        .withParameterTypes(String.class)
        .withArguments(or(isA(String.class), isNull(String.class)))
        .thenThrow(nullPointerException);

    // Act
    thrown.expect(NullPointerException.class);
    try {
      final Class<?> classUnderTest = Reflector.forName("com.firstrain.frapi.config.ServiceConfig");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod("loadFromXML", Reflector.forName("java.lang.String"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(null, configFilePath);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void setDistributedSearchConfigInputNotNullOutputVoid2() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", null);
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", null);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "smartSummarySolrServerUrl", null);
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", null);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setQuoteSolrServer(solrServer);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", null);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPeopleSolrServer(solrServer1);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", null);
    objectUnderTest.setEntitySolrServer(null);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer2);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", null);
    objectUnderTest.setTweetGroupSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", "!!");
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", null);
    final HashMap<SolrServer, String> hashMap = new HashMap<SolrServer, String>();
    Reflector.setField(objectUnderTest, "solrVsPingQ", hashMap);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", null);
    Reflector.setField(objectUnderTest, "tweetGroupSolrServerURL", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    final SolrServer[] solrServerArray = {solrServer3};
    Reflector.setField(distributedSearchConfig, "docServers", solrServerArray);

    // Act
    objectUnderTest.setDistributedSearchConfig(distributedSearchConfig);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    objectUnderTest.setSmartSummarySolrServer(null);
    Reflector.setField(
        objectUnderTest,
        "entitySolrServerUrl",
        "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setCompanyModelServer(solrServer);
    Reflector.setField(
        objectUnderTest,
        "eventSolrServerUrl",
        "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(objectUnderTest, "props", hashMap);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!!!!!!!!!!!!!");
    Reflector.setField(
        objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
    Reflector.setField(
        objectUnderTest, "smartSummarySolrServerUrl", "                                ");
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSecSolrServer(solrServer1);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(objectUnderTest, "companyModelServerURL", "      ");
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEventSolrServer(solrServer2);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocImageSolrServer(solrServer3);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPeopleSolrServer(solrServer4);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTwitterSolrServer(solrServer5);
    Reflector.setField(
        objectUnderTest, "userSearchesSolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer6);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer7);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer8);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer9);
    Reflector.setField(
        objectUnderTest, "faviconSolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBBBB");
    Reflector.setField(
        objectUnderTest, "tweetGroupSolrServerURL", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nSECSolrServer:!!!!!!!!!!!!!!!!!!\nEventSolrServer:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nUserSearchesSolrServer:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nDocImageServer:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nFavIconServer:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nSmartSummaryServer:NULL\nTwitterServer:BBBBBB\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:      \nPersonDocServerURL:NULL\nQuoteServerURL:NULL\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull2() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSmartSummarySolrServer(solrServer);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setCompanyModelServer(solrServer1);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!");
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@");
    Reflector.setField(
        objectUnderTest,
        "smartSummarySolrServerUrl",
        "                                                  ");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSecSolrServer(solrServer2);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPersonDocServer(solrServer3);
    Reflector.setField(
        objectUnderTest, "companyModelServerURL", "                                       ");
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEventSolrServer(solrServer4);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocImageSolrServer(solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPeopleSolrServer(solrServer6);
    Reflector.setField(objectUnderTest, "personDocServerURL", "");
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTwitterSolrServer(solrServer7);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!");
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer8);
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer9);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer10 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer10);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer11 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer11);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest, "tweetGroupSolrServerURL", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:@@@@@@@@@@@@\nSECSolrServer:!!!!!!\nEventSolrServer:!!!!\nUserSearchesSolrServer:!!!!\nDocImageServer:AAAA\nFavIconServer:!!!!\nSmartSummaryServer:                                                  \nTwitterServer:BBBB\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:                                       \nPersonDocServerURL:\nQuoteServerURL:NULL\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull3() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSmartSummarySolrServer(solrServer);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setCompanyModelServer(solrServer1);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!");
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@");
    Reflector.setField(
        objectUnderTest,
        "smartSummarySolrServerUrl",
        "                                                  ");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSecSolrServer(solrServer2);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", "");
    objectUnderTest.setDocSolrServer(null);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPersonDocServer(solrServer3);
    Reflector.setField(
        objectUnderTest, "companyModelServerURL", "                                       ");
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setQuoteSolrServer(solrServer4);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEventSolrServer(solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocImageSolrServer(solrServer6);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPeopleSolrServer(solrServer7);
    Reflector.setField(objectUnderTest, "personDocServerURL", "");
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTwitterSolrServer(solrServer8);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!");
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer9);
    final SolrServer solrServer10 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer10);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer11 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer11);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer12 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer12);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest, "tweetGroupSolrServerURL", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:@@@@@@@@@@@@\nSECSolrServer:!!!!!!\nEventSolrServer:!!!!\nUserSearchesSolrServer:!!!!\nDocImageServer:AAAA\nFavIconServer:!!!!\nSmartSummaryServer:                                                  \nTwitterServer:BBBB\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:                                       \nPersonDocServerURL:\nQuoteServerURL:\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull4() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSmartSummarySolrServer(solrServer);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setCompanyModelServer(solrServer1);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "props", null);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!");
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@");
    Reflector.setField(
        objectUnderTest,
        "smartSummarySolrServerUrl",
        "                                                  ");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSecSolrServer(solrServer2);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", null);
    objectUnderTest.setDocSolrServer(null);
    objectUnderTest.setPersonDocServer(null);
    Reflector.setField(
        objectUnderTest, "companyModelServerURL", "                                       ");
    objectUnderTest.setQuoteSolrServer(null);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEventSolrServer(solrServer3);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocImageSolrServer(solrServer4);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPeopleSolrServer(solrServer5);
    Reflector.setField(objectUnderTest, "personDocServerURL", null);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTwitterSolrServer(solrServer6);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!");
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer7);
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer8);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer9);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer10 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer10);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest, "tweetGroupSolrServerURL", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:@@@@@@@@@@@@\nSECSolrServer:!!!!!!\nEventSolrServer:!!!!\nUserSearchesSolrServer:!!!!\nDocImageServer:AAAA\nFavIconServer:!!!!\nSmartSummaryServer:                                                  \nTwitterServer:BBBB\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:                                       \nPersonDocServerURL:NULL\nQuoteServerURL:NULL\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull5() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSmartSummarySolrServer(solrServer);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setCompanyModelServer(solrServer1);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", "!!!!!!");
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(objectUnderTest, "props", hashMap);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!");
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@");
    Reflector.setField(
        objectUnderTest,
        "smartSummarySolrServerUrl",
        "                                                  ");
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", "");
    objectUnderTest.setDocSolrServer(null);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPersonDocServer(solrServer2);
    Reflector.setField(
        objectUnderTest, "companyModelServerURL", "                                       ");
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setQuoteSolrServer(solrServer3);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEventSolrServer(solrServer4);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setDocImageSolrServer(solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPeopleSolrServer(solrServer6);
    Reflector.setField(objectUnderTest, "personDocServerURL", "");
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTwitterSolrServer(solrServer7);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!");
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer8);
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer9);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer10 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer10);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer11 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer11);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest, "tweetGroupSolrServerURL", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:@@@@@@@@@@@@\nSECSolrServer:NULL\nEventSolrServer:!!!!!!\nUserSearchesSolrServer:!!!!\nDocImageServer:AAAA\nFavIconServer:!!!!\nSmartSummaryServer:                                                  \nTwitterServer:BBBB\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:                                       \nPersonDocServerURL:\nQuoteServerURL:\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull6() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSmartSummarySolrServer(solrServer);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!!!!!");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setCompanyModelServer(solrServer1);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", "!!!!!!!!!!");
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(objectUnderTest, "props", hashMap);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!");
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@");
    Reflector.setField(
        objectUnderTest,
        "smartSummarySolrServerUrl",
        "                                                  ");
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", "");
    objectUnderTest.setDocSolrServer(null);
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPersonDocServer(solrServer2);
    Reflector.setField(
        objectUnderTest, "companyModelServerURL", "                                       ");
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setQuoteSolrServer(solrServer3);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEventSolrServer(solrServer4);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", "");
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!");
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer5);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer6);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer7);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer8);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest, "tweetGroupSolrServerURL", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:NULL\nSECSolrServer:NULL\nEventSolrServer:!!!!!!!!!!\nUserSearchesSolrServer:!!!!\nDocImageServer:NULL\nFavIconServer:!!!!\nSmartSummaryServer:                                                  \nTwitterServer:NULL\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:                                       \nPersonDocServerURL:\nQuoteServerURL:\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull7() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = arrangeData();
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!");
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer6);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer7);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer8);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer9);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest, "tweetGroupSolrServerURL", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:@@@@@@@@@@@@\nSECSolrServer:NULL\nEventSolrServer:!!!!!!\nUserSearchesSolrServer:!!!!\nDocImageServer:NULL\nFavIconServer:!!!!\nSmartSummaryServer:                                                  \nTwitterServer:NULL\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:                                       \nPersonDocServerURL:\nQuoteServerURL:\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull8() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = arrangeData();
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTwitterSolrServer(solrServer6);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!");
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer7);
    final SolrServer solrServer8 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer8);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer9 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer9);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer10 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer10);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest, "tweetGroupSolrServerURL", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:@@@@@@@@@@@@\nSECSolrServer:NULL\nEventSolrServer:!!!!!!\nUserSearchesSolrServer:!!!!\nDocImageServer:NULL\nFavIconServer:!!!!\nSmartSummaryServer:                                                  \nTwitterServer:BBBB\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:                                       \nPersonDocServerURL:\nQuoteServerURL:\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  private ServiceConfig arrangeData() throws InvocationTargetException {
      final ServiceConfig objectUnderTest = new ServiceConfig();
      final SolrServer solrServer =
          (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
      objectUnderTest.setSmartSummarySolrServer(solrServer);
      Reflector.setField(objectUnderTest, "entitySolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!");
      final DocumentSimilarityUtil documentSimilarityUtil =
          (DocumentSimilarityUtil)
              Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
      Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
      final SolrServer solrServer1 =
          (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
      objectUnderTest.setCompanyModelServer(solrServer1);
      Reflector.setField(objectUnderTest, "eventSolrServerUrl", "!!!!!!");
      final HashMap<String, String> hashMap = new HashMap<String, String>();
      Reflector.setField(objectUnderTest, "props", hashMap);
      Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!");
      Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@");
      Reflector.setField(
          objectUnderTest,
          "smartSummarySolrServerUrl",
          "                                                  ");
      objectUnderTest.setSecSolrServer(null);
      Reflector.setField(objectUnderTest, "quoteSolrServerURL", "");
      objectUnderTest.setDocSolrServer(null);
      final SolrServer solrServer2 =
          (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
      objectUnderTest.setPersonDocServer(solrServer2);
      Reflector.setField(
          objectUnderTest, "companyModelServerURL", "                                       ");
      final SolrServer solrServer3 =
          (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
      objectUnderTest.setQuoteSolrServer(solrServer3);
      Reflector.setField(objectUnderTest, "distributedSearchFile", null);
      final DistributedSearchConfig distributedSearchConfig =
          (DistributedSearchConfig)
              Reflector.getInstance(
                  "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
      Reflector.setField(distributedSearchConfig, "docServers", null);
      Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
      final SolrServer solrServer4 =
          (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
      objectUnderTest.setEventSolrServer(solrServer4);
      objectUnderTest.setDocImageSolrServer(null);
      final SolrServer solrServer5 =
          (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
      objectUnderTest.setPeopleSolrServer(solrServer5);
      Reflector.setField(objectUnderTest, "personDocServerURL", "");
      return objectUnderTest;
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull9() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSmartSummarySolrServer(solrServer);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!!!!!");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", "!!!!!!!!!!");
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(objectUnderTest, "props", hashMap);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!");
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@");
    Reflector.setField(
        objectUnderTest,
        "smartSummarySolrServerUrl",
        "                                                  ");
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", "");
    objectUnderTest.setDocSolrServer(null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPersonDocServer(solrServer1);
    Reflector.setField(
        objectUnderTest, "companyModelServerURL", "                                       ");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setQuoteSolrServer(solrServer2);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", "");
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!!!!!!!");
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer3);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer4);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer5);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer6);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest,
        "tweetGroupSolrServerURL",
        "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:NULL\nSECSolrServer:NULL\nEventSolrServer:NULL\nUserSearchesSolrServer:!!!!!!!!!!\nDocImageServer:NULL\nFavIconServer:!!!!\nSmartSummaryServer:                                                  \nTwitterServer:NULL\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:NULL\nPersonDocServerURL:\nQuoteServerURL:\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull10() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSmartSummarySolrServer(solrServer);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!!!!!");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", "!!!!!!!!!!");
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(objectUnderTest, "props", hashMap);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!");
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@");
    Reflector.setField(
        objectUnderTest,
        "smartSummarySolrServerUrl",
        "                                                  ");
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", "");
    objectUnderTest.setDocSolrServer(null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPersonDocServer(solrServer1);
    Reflector.setField(
        objectUnderTest, "companyModelServerURL", "                                       ");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setQuoteSolrServer(solrServer2);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEventSolrServer(solrServer3);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", "");
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!");
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer4);
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer5);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer6 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer6);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    final SolrServer solrServer7 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setFaviconSolrServer(solrServer7);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest,
        "tweetGroupSolrServerURL",
        "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:NULL\nSECSolrServer:NULL\nEventSolrServer:!!!!!!!!!!\nUserSearchesSolrServer:!!!!\nDocImageServer:NULL\nFavIconServer:!!!!\nSmartSummaryServer:                                                  \nTwitterServer:NULL\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:NULL\nPersonDocServerURL:\nQuoteServerURL:\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void toStringOutputNotNull11() throws Exception {

    // Arrange
    final ServiceConfig objectUnderTest = new ServiceConfig();
    final SolrServer solrServer =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setSmartSummarySolrServer(solrServer);
    Reflector.setField(objectUnderTest, "entitySolrServerUrl", "!!!!!!!!!!!!!!!!!!!!!!!!!!");
    final DocumentSimilarityUtil documentSimilarityUtil =
        (DocumentSimilarityUtil)
            Reflector.getInstance("com.firstrain.content.similarity.DocumentSimilarityUtil");
    Reflector.setField(objectUnderTest, "documentSimilarityUtil", documentSimilarityUtil);
    objectUnderTest.setCompanyModelServer(null);
    Reflector.setField(objectUnderTest, "eventSolrServerUrl", "!!!!!!!!!!");
    final HashMap<String, String> hashMap = new HashMap<String, String>();
    Reflector.setField(objectUnderTest, "props", hashMap);
    Reflector.setField(objectUnderTest, "secSolrServerUrl", "!!!!!!");
    Reflector.setField(objectUnderTest, "peopleSolrServerUrl", "@@@@@@@@@@@@");
    Reflector.setField(
        objectUnderTest,
        "smartSummarySolrServerUrl",
        "                                                  ");
    objectUnderTest.setSecSolrServer(null);
    Reflector.setField(objectUnderTest, "quoteSolrServerURL", "");
    objectUnderTest.setDocSolrServer(null);
    final SolrServer solrServer1 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setPersonDocServer(solrServer1);
    Reflector.setField(
        objectUnderTest, "companyModelServerURL", "                                       ");
    final SolrServer solrServer2 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setQuoteSolrServer(solrServer2);
    Reflector.setField(objectUnderTest, "distributedSearchFile", null);
    final DistributedSearchConfig distributedSearchConfig =
        (DistributedSearchConfig)
            Reflector.getInstance(
                "com.firstrain.solr.client.DistributedSolrSearcher$DistributedSearchConfig");
    Reflector.setField(distributedSearchConfig, "docServers", null);
    Reflector.setField(objectUnderTest, "distributedSearchConfig", distributedSearchConfig);
    objectUnderTest.setEventSolrServer(null);
    objectUnderTest.setDocImageSolrServer(null);
    objectUnderTest.setPeopleSolrServer(null);
    Reflector.setField(objectUnderTest, "personDocServerURL", "");
    objectUnderTest.setTwitterSolrServer(null);
    Reflector.setField(objectUnderTest, "userSearchesSolrServerUrl", "!!!!!!!!!!");
    final SolrServer solrServer3 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setEntitySolrServer(solrServer3);
    final SolrServer solrServer4 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setUserSearchesSolrServer(solrServer4);
    Reflector.setField(objectUnderTest, "docImageSolrServerUrl", "AAAA");
    final SolrServer solrServer5 =
        (SolrServer) Reflector.getInstance("org.apache.solr.client.solrj.SolrServer");
    objectUnderTest.setTweetGroupSolrServer(solrServer5);
    Reflector.setField(objectUnderTest, "distributedDSPingQ", null);
    objectUnderTest.setFaviconSolrServer(null);
    Reflector.setField(objectUnderTest, "faviconSolrServerUrl", "!!!!");
    Reflector.setField(objectUnderTest, "solrVsPingQ", null);
    Reflector.setField(objectUnderTest, "twitterSolrServerUrl", "BBBB");
    Reflector.setField(
        objectUnderTest,
        "tweetGroupSolrServerURL",
        "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    // Act
    final String retval = objectUnderTest.toString();

    // Assert
    assertEquals(
        "\nEntitySolrServer:!!!!!!!!!!!!!!!!!!!!!!!!!!\nPeopleSolrServer:NULL\nSECSolrServer:NULL\nEventSolrServer:NULL\nUserSearchesSolrServer:!!!!!!!!!!\nDocImageServer:NULL\nFavIconServer:NULL\nSmartSummaryServer:                                                  \nTwitterServer:NULL\nTweetGroupServerURL:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCompanyModelServerURL:NULL\nPersonDocServerURL:\nQuoteServerURL:\nDocSolrServer:NULL\nDistributedSearchConfig:NOT NULL\n\tServers:0",
        retval);
  }

  // Test generated by Diffblue Deeptest.

  @Test
  public void valuesOutput6() {

    // Act
    final ServerUrl[] retval = ServerUrl.values();

    // Assert
    assertArrayEquals(
        new ServerUrl[] {
          ServerUrl.SEC_SERVER_URL, ServerUrl.USER_SEARCHES_SERVER_URL,
          ServerUrl.FAV_ICON_SERVER_URL, ServerUrl.TWITTER_SERVER_URL,
          ServerUrl.COMPANY_MODEL_SERVER_URL, ServerUrl.QUOTE_SERVER_URL
        },
        retval);
  }
}
